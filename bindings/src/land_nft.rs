pub use landnft_mod::*;
#[allow(clippy::too_many_arguments, non_camel_case_types)]
pub mod landnft_mod {
    #![allow(clippy::enum_variant_names)]
    #![allow(dead_code)]
    #![allow(clippy::type_complexity)]
    #![allow(unused_imports)]
    use ethers::contract::{
        builders::{ContractCall, Event},
        Contract, Lazy,
    };
    use ethers::core::{
        abi::{Abi, Detokenize, InvalidOutputType, Token, Tokenizable},
        types::*,
    };
    use ethers::providers::Middleware;
    #[doc = "LandNFT was auto-generated with ethers-rs Abigen. More information at: https://github.com/gakonst/ethers-rs"]
    use std::sync::Arc;
    pub static LANDNFT_ABI: ethers::contract::Lazy<ethers::core::abi::Abi> =
        ethers::contract::Lazy::new(|| {
            serde_json :: from_str ("[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_swapLibAddr\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"CannotSetAddressZero\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"ComissionOutOfAllowedRange\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"InsufficientBalance\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"NoTilesSelected\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"NotAuthorised\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"RegionAlreadyOwned\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\",\"components\":[],\"indexed\":false},{\"internalType\":\"address\",\"name\":\"oldAdmin\",\"type\":\"address\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"AdminChanged\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\",\"components\":[],\"indexed\":true}],\"type\":\"event\",\"name\":\"Approval\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"ApprovalForAll\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newCommission\",\"type\":\"uint256\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"oldCommission\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"CommissionRateChanged\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"ContractPaused\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"ContractUnpaused\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newDevFund\",\"type\":\"address\",\"components\":[],\"indexed\":false},{\"internalType\":\"address\",\"name\":\"oldDevFund\",\"type\":\"address\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"DevFundChanged\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newLandBank\",\"type\":\"address\",\"components\":[],\"indexed\":false},{\"internalType\":\"address\",\"name\":\"oldLandBank\",\"type\":\"address\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"LandBankChanged\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"landNft\",\"type\":\"address\",\"components\":[],\"indexed\":false},{\"internalType\":\"address\",\"name\":\"landBank\",\"type\":\"address\",\"components\":[],\"indexed\":false},{\"internalType\":\"address\",\"name\":\"swapToken\",\"type\":\"address\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"LandNFTCreated\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"landNft\",\"type\":\"address\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"LandNFTDestroyed\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"LandNFTTileBought\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"LandNFTTileDeposited\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"LandNFTTileSold\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"LandNFTTileWithdrawn\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\",\"components\":[],\"indexed\":true}],\"type\":\"event\",\"name\":\"OwnershipTransferred\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"Paused\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\",\"components\":[],\"indexed\":true}],\"type\":\"event\",\"name\":\"Transfer\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"Unpaused\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"approve\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"commissionRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"devFund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"firstOwners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"getETHPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"getLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"len\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"isOwned\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"landBank\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"maxTileNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"nextId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"pause\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"regionNumbers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"renounceOwnership\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256[]\",\"name\":\"region\",\"type\":\"uint256[]\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"rioAmount\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"payable\",\"type\":\"function\",\"name\":\"safeMint\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"safeTransferFrom\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"safeTransferFrom\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAdmin\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"setAdmin\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"setApprovalForAll\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_commissionRate\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"setCommissionRate\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_devFund\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"setDevFund\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_landBank\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"setLandBank\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"setPrice\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"totalTileNum\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"transferFrom\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"transferOwnership\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"unpause\",\"outputs\":[]}]") . expect ("invalid abi")
        });
    #[doc = r" Bytecode of the #name contract"]
    pub static LANDNFT_BYTECODE: ethers::contract::Lazy<ethers::core::types::Bytes> =
        ethers::contract::Lazy::new(|| {
            "0x608060405260016007553480156200001657600080fd5b5060405162002e0338038062002e038339810160408190526200003991620002a7565b604080518082018252600b81526a5265616c696f566572736560a81b6020808301918252835180850190945260048452635256525360e01b908401528151919291620000889160009162000201565b5080516200009e90600190602084019062000201565b505050620000bb620000b5620001ab60201b60201c565b620001af565b6006805460ff60a01b191690556001600160a01b038116620001235760405162461bcd60e51b815260206004820152601660248201527f63616e277420736574207a65726f206164647265737300000000000000000000604482015260640160405180910390fd5b600a8054336001600160a01b031991821681178355600b80548316821790556009805483169091179055600e91909155681b1ae4d6e2ef500000600f55600880549091166001600160a01b038316179055604080518082019091526006808252655265616c696f60d01b6020909201918252620001a391600c9162000201565b505062000316565b3390565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b8280546200020f90620002d9565b90600052602060002090601f0160209004810192826200023357600085556200027e565b82601f106200024e57805160ff19168380011785556200027e565b828001600101855582156200027e579182015b828111156200027e57825182559160200191906001019062000261565b506200028c92915062000290565b5090565b5b808211156200028c576000815560010162000291565b600060208284031215620002ba57600080fd5b81516001600160a01b0381168114620002d257600080fd5b9392505050565b600181811c90821680620002ee57607f821691505b602082108114156200031057634e487b7160e01b600052602260045260246000fd5b50919050565b612add80620003266000396000f3fe60806040526004361061023b5760003560e01c8063704b6c021161012e578063ad5c4648116100ab578063efaff03c1161006f578063efaff03c146106ea578063efd3297314610720578063f0640d9514610740578063f2fde38b14610760578063f851a4401461078057600080fd5b8063ad5c464814610627578063ae4db9191461064f578063b88d4fde1461066f578063c87b56dd1461068f578063e985e9c5146106af57600080fd5b806391b7f5ed116100f257806391b7f5ed1461059c57806394c9c3e4146105bc57806395d89b41146105dc578063a035b1fe146105f1578063a22cb4651461060757600080fd5b8063704b6c021461051457806370a0823114610534578063715018a6146105545780638456cb59146105695780638da5cb5b1461057e57600080fd5b806342842e0e116101bc5780635ea1d6f8116101805780635ea1d6f814610472578063618b2add1461048857806361b8ce8c146104c95780636352211e146104df5780636c0360eb146104ff57600080fd5b806342842e0e146103ca5780634390d2a8146103ea578063557527581461040a578063599f689c146104235780635c975abb1461045357600080fd5b806319fac8fd1161020357806319fac8fd146103425780631a753fed1461036257806323b872dd146103825780633f4ba83a146103a257806342583524146103b757600080fd5b806301ffc9a71461024057806306fdde0314610275578063081812fc14610297578063095ea7b3146102e55780630986e64714610307575b600080fd5b34801561024c57600080fd5b5061026061025b3660046123fa565b6107a0565b60405190151581526020015b60405180910390f35b34801561028157600080fd5b5061028a6107f2565b60405161026c919061244e565b3480156102a357600080fd5b506102cd6102b2366004612481565b6004602052600090815260409020546001600160a01b031681565b6040516001600160a01b03909116815260200161026c565b3480156102f157600080fd5b506103056103003660046124ba565b610880565b005b34801561031357600080fd5b50610334610322366004612481565b60009081526011602052604090205490565b60405190815260200161026c565b34801561034e57600080fd5b5061030561035d366004612481565b610967565b34801561036e57600080fd5b5061033461037d366004612481565b610a03565b34801561038e57600080fd5b5061030561039d3660046124e6565b610a9b565b3480156103ae57600080fd5b50610305610c62565b6103056103c536600461253d565b610cd4565b3480156103d657600080fd5b506103056103e53660046124e6565b6118b5565b3480156103f657600080fd5b50600a546102cd906001600160a01b031681565b34801561041657600080fd5b506103346402540be40081565b34801561042f57600080fd5b5061026061043e366004612481565b60106020526000908152604090205460ff1681565b34801561045f57600080fd5b50600654600160a01b900460ff16610260565b34801561047e57600080fd5b50610334600e5481565b34801561049457600080fd5b50600b546104b090600160a01b900467ffffffffffffffff1681565b60405167ffffffffffffffff909116815260200161026c565b3480156104d557600080fd5b50610334600d5481565b3480156104eb57600080fd5b506102cd6104fa366004612481565b6119ad565b34801561050b57600080fd5b5061028a611a04565b34801561052057600080fd5b5061030561052f366004612628565b611a11565b34801561054057600080fd5b5061033461054f366004612628565b611abc565b34801561056057600080fd5b50610305611b1f565b34801561057557600080fd5b50610305611b33565b34801561058a57600080fd5b506006546001600160a01b03166102cd565b3480156105a857600080fd5b506103056105b7366004612481565b611b9f565b3480156105c857600080fd5b506103346105d7366004612645565b611bd3565b3480156105e857600080fd5b5061028a611c04565b3480156105fd57600080fd5b50610334600f5481565b34801561061357600080fd5b50610305610622366004612675565b611c11565b34801561063357600080fd5b506102cd73c02aaa39b223fe8d0a0e5c4f27ead9083c756cc281565b34801561065b57600080fd5b5061030561066a366004612628565b611c7d565b34801561067b57600080fd5b5061030561068a3660046126ae565b611d2c565b34801561069b57600080fd5b5061028a6106aa366004612481565b611e14565b3480156106bb57600080fd5b506102606106ca36600461274d565b600560209081526000928352604080842090915290825290205460ff1681565b3480156106f657600080fd5b506102cd610705366004612481565b6012602052600090815260409020546001600160a01b031681565b34801561072c57600080fd5b50600b546102cd906001600160a01b031681565b34801561074c57600080fd5b5061030561075b366004612628565b611e72565b34801561076c57600080fd5b5061030561077b366004612628565b611f21565b34801561078c57600080fd5b506009546102cd906001600160a01b031681565b60006301ffc9a760e01b6001600160e01b0319831614806107d157506380ac58cd60e01b6001600160e01b03198316145b806107ec5750635b5e139f60e01b6001600160e01b03198316145b92915050565b600080546107ff9061277b565b80601f016020809104026020016040519081016040528092919081815260200182805461082b9061277b565b80156108785780601f1061084d57610100808354040283529160200191610878565b820191906000526020600020905b81548152906001019060200180831161085b57829003601f168201915b505050505081565b6000818152600260205260409020546001600160a01b0316338114806108c957506001600160a01b038116600090815260056020908152604080832033845290915290205460ff165b61090b5760405162461bcd60e51b815260206004820152600e60248201526d1393d517d055551213d49256915160921b60448201526064015b60405180910390fd5b60008281526004602052604080822080546001600160a01b0319166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b600e546009546001600160a01b0316331461099557604051631648fd0160e01b815260040160405180910390fd5b60148211806109a2575060005b156109c057604051637d1dd3df60e11b815260040160405180910390fd5b600e82905560408051838152602081018390527f74b81a9e0217358c4b0755d3032738dc303e980dde2980905160b1d8e7b68ba691015b60405180910390a15050565b600854604051633c50eec160e01b81526000916001600160a01b031690633c50eec190610a5a90600080516020612a888339815191529073c02aaa39b223fe8d0a0e5c4f27ead9083c756cc29087906004016127b6565b602060405180830381865afa158015610a77573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107ec91906127da565b6000818152600260205260409020546001600160a01b03848116911614610af15760405162461bcd60e51b815260206004820152600a60248201526957524f4e475f46524f4d60b01b6044820152606401610902565b6001600160a01b038216610b3b5760405162461bcd60e51b81526020600482015260116024820152701253959053125117d49150d25412515395607a1b6044820152606401610902565b336001600160a01b0384161480610b7557506001600160a01b038316600090815260056020908152604080832033845290915290205460ff165b80610b9657506000818152600460205260409020546001600160a01b031633145b610bd35760405162461bcd60e51b815260206004820152600e60248201526d1393d517d055551213d49256915160921b6044820152606401610902565b6001600160a01b0380841660008181526003602090815260408083208054600019019055938616808352848320805460010190558583526002825284832080546001600160a01b03199081168317909155600490925284832080549092169091559251849392917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b610c6a611f97565b6009546001600160a01b03163314610c9557604051631648fd0160e01b815260040160405180910390fd5b610c9d611fe7565b604051600181527fc6cd34d367248623c114617f3cf4e7d54b15f11b158367408ee3b4c0ff1a5e2e906020015b60405180910390a1565b82805160001415610cf8576040516397dde56d60e01b815260040160405180910390fd5b6000805b8251811015610d5e5760106000848381518110610d1b57610d1b6127f3565b60209081029190910181015182528101919091526040016000205460ff16151560011415610d4c5760019150610d5e565b80610d568161281f565b915050610cfc565b5080610d7d57604051635d29dd2360e01b815260040160405180910390fd5b610d85612037565b6001600160a01b038416600080516020612a888339815191521415611107578451600f54610db3919061283a565b831015610dd357604051631e9acf1760e31b815260040160405180910390fd5b6040516323b872dd60e01b8152600080516020612a88833981519152906323b872dd90610e08903390309088906004016127b6565b6020604051808303816000875af1158015610e27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e4b9190612859565b50600854600080516020612a888339815191529063095ea7b3906001600160a01b03166064610e7b87601461283a565b610e85919061288c565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af1158015610ed0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ef49190612859565b506008546000906001600160a01b0316633c50eec1600080516020612a8883398151915273c02aaa39b223fe8d0a0e5c4f27ead9083c756cc26064610f3a89601461283a565b610f44919061288c565b6040518463ffffffff1660e01b8152600401610f62939291906127b6565b602060405180830381865afa158015610f7f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fa391906127da565b6008549091506001600160a01b031663d5bcb9b5600080516020612a8883398151915273c02aaa39b223fe8d0a0e5c4f27ead9083c756cc26064610fe889601461283a565b610ff2919061288c565b600a546040516001600160e01b031960e087901b1681526110269493929188916001600160a01b03909116906004016128a0565b600060405180830381600087803b15801561104057600080fd5b505af1158015611054573d6000803e3d6000fd5b5050600b54600080516020612a88833981519152925063a9059cbb91506001600160a01b0316606461108788605061283a565b611091919061288c565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af11580156110dc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111009190612859565b505061112a565b600f5483101561112a57604051631e9acf1760e31b815260040160405180910390fd5b82156114ad578451600f5461113f919061283a565b83146111795760405162461bcd60e51b81526020600482015260096024820152686c6f772076616c756560b81b6044820152606401610902565b6040516323b872dd60e01b8152600080516020612a88833981519152906323b872dd906111ae903390309088906004016127b6565b6020604051808303816000875af11580156111cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111f19190612859565b50600854600080516020612a888339815191529063095ea7b3906001600160a01b0316606461122187601461283a565b61122b919061288c565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af1158015611276573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061129a9190612859565b506008546000906001600160a01b0316633c50eec1600080516020612a8883398151915273c02aaa39b223fe8d0a0e5c4f27ead9083c756cc260646112e089601461283a565b6112ea919061288c565b6040518463ffffffff1660e01b8152600401611308939291906127b6565b602060405180830381865afa158015611325573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061134991906127da565b6008549091506001600160a01b031663d5bcb9b5600080516020612a8883398151915273c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2606461138e89601461283a565b611398919061288c565b600a546040516001600160e01b031960e087901b1681526113cc9493929188916001600160a01b03909116906004016128a0565b600060405180830381600087803b1580156113e657600080fd5b505af11580156113fa573d6000803e3d6000fd5b5050600b54600080516020612a88833981519152925063a9059cbb91506001600160a01b0316606461142d88605061283a565b611437919061288c565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af1158015611482573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114a69190612859565b505061172b565b600854604051633c50eec160e01b81526000916001600160a01b031690633c50eec1906115049073c02aaa39b223fe8d0a0e5c4f27ead9083c756cc290600080516020612a888339815191529034906004016127b6565b602060405180830381865afa158015611521573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061154591906127da565b90508551600f54611556919061283a565b8110156115915760405162461bcd60e51b81526020600482015260096024820152686c6f772076616c756560b81b6044820152606401610902565b6008546001600160a01b031663d5bcb9b560646115af34605061283a565b6115b9919061288c565b73c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2600080516020612a8883398151915260646115ea8a605061283a565b6115f4919061288c565b606461160188605061283a565b61160b919061288c565b600b546040516001600160e01b031960e089901b16815261163c95949392916001600160a01b0316906004016128a0565b6000604051808303818588803b15801561165557600080fd5b505af1158015611669573d6000803e3d6000fd5b5050600a54600093506001600160a01b031691506064905061168c34601461283a565b611696919061288c565b604051600081818185875af1925050503d80600081146116d2576040519150601f19603f3d011682016040523d82523d6000602084013e6116d7565b606091505b50509050806117285760405162461bcd60e51b815260206004820152601b60248201527f5472616e7366657220746f2064657646756e64206661696c65642e00000000006044820152606401610902565b50505b61173786600d54612084565b600d8054600090815260126020908152604080832080546001600160a01b0319166001600160a01b038c161790559254825260118152919020865161177e92880190612384565b50600d805490600061178f8361281f565b90915550508451600b80546014906117b9908490600160a01b900467ffffffffffffffff166128d0565b92506101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055506402540be400600b60149054906101000a900467ffffffffffffffff1667ffffffffffffffff1611156118485760405162461bcd60e51b81526020600482015260116024820152704d6178206c696d6974206f662074696c6560781b6044820152606401610902565b60005b85518110156118ac5760016010600088848151811061186c5761186c6127f3565b6020026020010151815260200190815260200160002060006101000a81548160ff02191690831515021790555080806118a49061281f565b91505061184b565b50505050505050565b6118c0838383610a9b565b6001600160a01b0382163b15806119695750604051630a85bd0160e11b8082523360048301526001600160a01b03858116602484015260448301849052608060648401526000608484015290919084169063150b7a029060a4016020604051808303816000875af1158015611939573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061195d91906128fc565b6001600160e01b031916145b6119a85760405162461bcd60e51b815260206004820152601060248201526f155394d0519157d49150d2541251539560821b6044820152606401610902565b505050565b6000818152600260205260409020546001600160a01b0316806119ff5760405162461bcd60e51b815260206004820152600a6024820152691393d517d3525395115160b21b6044820152606401610902565b919050565b600c80546107ff9061277b565b6009546001600160a01b03163314611a3c57604051631648fd0160e01b815260040160405180910390fd5b6001600160a01b038116611a63576040516397b43c7960e01b815260040160405180910390fd5b600980546001600160a01b0319166001600160a01b038316908117909155604080519182523360208301527f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f910160405180910390a150565b60006001600160a01b038216611b035760405162461bcd60e51b815260206004820152600c60248201526b5a45524f5f4144445245535360a01b6044820152606401610902565b506001600160a01b031660009081526003602052604090205490565b611b2761218f565b611b3160006121e9565b565b611b3b612037565b6009546001600160a01b03163314611b6657604051631648fd0160e01b815260040160405180910390fd5b611b6e61223b565b604051600181527f752d7e161ff5146f80e3820893176eb40532811e5e20400dfdde57455213706a90602001610cca565b6009546001600160a01b03163314611bca57604051631648fd0160e01b815260040160405180910390fd5b600f8190555b50565b60116020528160005260406000208181548110611bef57600080fd5b90600052602060002001600091509150505481565b600180546107ff9061277b565b3360008181526005602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b600a546009546001600160a01b0391821691163314611caf57604051631648fd0160e01b815260040160405180910390fd5b6001600160a01b038216611cd6576040516397b43c7960e01b815260040160405180910390fd5b600a80546001600160a01b0319166001600160a01b038481169182179092556040805191825291831660208201527ff87e12ba363db684b1b69a530d850a8a3f416932cd031e008ef71e42a1d8845091016109f7565b611d37858585610a9b565b6001600160a01b0384163b1580611dce5750604051630a85bd0160e11b808252906001600160a01b0386169063150b7a0290611d7f9033908a90899089908990600401612919565b6020604051808303816000875af1158015611d9e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dc291906128fc565b6001600160e01b031916145b611e0d5760405162461bcd60e51b815260206004820152601060248201526f155394d0519157d49150d2541251539560821b6044820152606401610902565b5050505050565b60606000600c8054611e259061277b565b905011611e4157604051806020016040528060008152506107ec565b600c611e4c8361227e565b604051602001611e5d929190612989565b60405160208183030381529060405292915050565b600b546009546001600160a01b0391821691163314611ea457604051631648fd0160e01b815260040160405180910390fd5b6001600160a01b038216611ecb576040516397b43c7960e01b815260040160405180910390fd5b600b80546001600160a01b0319166001600160a01b038481169182179092556040805191825291831660208201527f04c90a5bd107b5b753ce9758599ca56cffaadede0b5f6c4b3a375a5effe208d491016109f7565b611f2961218f565b6001600160a01b038116611f8e5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610902565b611bd0816121e9565b600654600160a01b900460ff16611b315760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610902565b611fef611f97565b6006805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b039091168152602001610cca565b600654600160a01b900460ff1615611b315760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610902565b6001600160a01b0382166120ce5760405162461bcd60e51b81526020600482015260116024820152701253959053125117d49150d25412515395607a1b6044820152606401610902565b6000818152600260205260409020546001600160a01b0316156121245760405162461bcd60e51b815260206004820152600e60248201526d1053149150511657d3525395115160921b6044820152606401610902565b6001600160a01b038216600081815260036020908152604080832080546001019055848352600290915280822080546001600160a01b0319168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6006546001600160a01b03163314611b315760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610902565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b612243612037565b6006805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861201f3390565b6060816122a25750506040805180820190915260018152600360fc1b602082015290565b8160005b81156122cc57806122b68161281f565b91506122c59050600a8361288c565b91506122a6565b60008167ffffffffffffffff8111156122e7576122e7612527565b6040519080825280601f01601f191660200182016040528015612311576020820181803683370190505b5090505b841561237c57612326600183612a44565b9150612333600a86612a5b565b61233e906030612a6f565b60f81b818381518110612353576123536127f3565b60200101906001600160f81b031916908160001a905350612375600a8661288c565b9450612315565b949350505050565b8280548282559060005260206000209081019282156123bf579160200282015b828111156123bf5782518255916020019190600101906123a4565b506123cb9291506123cf565b5090565b5b808211156123cb57600081556001016123d0565b6001600160e01b031981168114611bd057600080fd5b60006020828403121561240c57600080fd5b8135612417816123e4565b9392505050565b60005b83811015612439578181015183820152602001612421565b83811115612448576000848401525b50505050565b602081526000825180602084015261246d81604085016020870161241e565b601f01601f19169190910160400192915050565b60006020828403121561249357600080fd5b5035919050565b6001600160a01b0381168114611bd057600080fd5b80356119ff8161249a565b600080604083850312156124cd57600080fd5b82356124d88161249a565b946020939093013593505050565b6000806000606084860312156124fb57600080fd5b83356125068161249a565b925060208401356125168161249a565b929592945050506040919091013590565b634e487b7160e01b600052604160045260246000fd5b6000806000806080858703121561255357600080fd5b843561255e8161249a565b935060208581013567ffffffffffffffff8082111561257c57600080fd5b818801915088601f83011261259057600080fd5b8135818111156125a2576125a2612527565b8060051b604051601f19603f830116810181811085821117156125c7576125c7612527565b60405291825284820192508381018501918b8311156125e557600080fd5b938501935b82851015612603578435845293850193928501926125ea565b809850505050505050612618604086016124af565b9396929550929360600135925050565b60006020828403121561263a57600080fd5b81356124178161249a565b6000806040838503121561265857600080fd5b50508035926020909101359150565b8015158114611bd057600080fd5b6000806040838503121561268857600080fd5b82356126938161249a565b915060208301356126a381612667565b809150509250929050565b6000806000806000608086880312156126c657600080fd5b85356126d18161249a565b945060208601356126e18161249a565b935060408601359250606086013567ffffffffffffffff8082111561270557600080fd5b818801915088601f83011261271957600080fd5b81358181111561272857600080fd5b89602082850101111561273a57600080fd5b9699959850939650602001949392505050565b6000806040838503121561276057600080fd5b823561276b8161249a565b915060208301356126a38161249a565b600181811c9082168061278f57607f821691505b602082108114156127b057634e487b7160e01b600052602260045260246000fd5b50919050565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6000602082840312156127ec57600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060001982141561283357612833612809565b5060010190565b600081600019048311821515161561285457612854612809565b500290565b60006020828403121561286b57600080fd5b815161241781612667565b634e487b7160e01b600052601260045260246000fd5b60008261289b5761289b612876565b500490565b6001600160a01b039586168152938516602085015260408401929092526060830152909116608082015260a00190565b600067ffffffffffffffff8083168185168083038211156128f3576128f3612809565b01949350505050565b60006020828403121561290e57600080fd5b8151612417816123e4565b6001600160a01b038681168252851660208201526040810184905260806060820181905281018290526000828460a0840137600060a0848401015260a0601f19601f85011683010190509695505050505050565b6000815161297f81856020860161241e565b9290920192915050565b600080845481600182811c9150808316806129a557607f831692505b60208084108214156129c557634e487b7160e01b86526022600452602486fd5b8180156129d957600181146129ea57612a17565b60ff19861689528489019650612a17565b60008b81526020902060005b86811015612a0f5781548b8201529085019083016129f6565b505084890196505b505050505050612a3b612a2a828661296d565b64173539b7b760d91b815260050190565b95945050505050565b600082821015612a5657612a56612809565b500390565b600082612a6a57612a6a612876565b500690565b60008219821115612a8257612a82612809565b50019056fe000000000000000000000000f21661d0d1d76d3ecb8e1b9f1c923dbfffae4097a264697066735822122088f05480b5a78c1dbe183fc1fc82b1c61024c797aebc853b053193d4a212661f64736f6c634300080a0033" . parse () . expect ("invalid bytecode")
        });
    pub struct LandNFT<M>(ethers::contract::Contract<M>);
    impl<M> Clone for LandNFT<M> {
        fn clone(&self) -> Self {
            LandNFT(self.0.clone())
        }
    }
    impl<M> std::ops::Deref for LandNFT<M> {
        type Target = ethers::contract::Contract<M>;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl<M: ethers::providers::Middleware> std::fmt::Debug for LandNFT<M> {
        fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
            f.debug_tuple(stringify!(LandNFT))
                .field(&self.address())
                .finish()
        }
    }
    impl<M: ethers::providers::Middleware> LandNFT<M> {
        #[doc = r" Creates a new contract instance with the specified `ethers`"]
        #[doc = r" client at the given `Address`. The contract derefs to a `ethers::Contract`"]
        #[doc = r" object"]
        pub fn new<T: Into<ethers::core::types::Address>>(
            address: T,
            client: ::std::sync::Arc<M>,
        ) -> Self {
            ethers::contract::Contract::new(address.into(), LANDNFT_ABI.clone(), client).into()
        }
        #[doc = r" Constructs the general purpose `Deployer` instance based on the provided constructor arguments and sends it."]
        #[doc = r" Returns a new instance of a deployer that returns an instance of this contract after sending the transaction"]
        #[doc = r""]
        #[doc = r" Notes:"]
        #[doc = r" 1. If there are no constructor arguments, you should pass `()` as the argument."]
        #[doc = r" 1. The default poll duration is 7 seconds."]
        #[doc = r" 1. The default number of confirmations is 1 block."]
        #[doc = r""]
        #[doc = r""]
        #[doc = r" # Example"]
        #[doc = r""]
        #[doc = r" Generate contract bindings with `abigen!` and deploy a new contract instance."]
        #[doc = r""]
        #[doc = r" *Note*: this requires a `bytecode` and `abi` object in the `greeter.json` artifact."]
        #[doc = r""]
        #[doc = r" ```ignore"]
        #[doc = r" # async fn deploy<M: ethers::providers::Middleware>(client: ::std::sync::Arc<M>) {"]
        #[doc = r#"     abigen!(Greeter,"../greeter.json");"#]
        #[doc = r""]
        #[doc = r#"    let greeter_contract = Greeter::deploy(client, "Hello world!".to_string()).unwrap().send().await.unwrap();"#]
        #[doc = r"    let msg = greeter_contract.greet().call().await.unwrap();"]
        #[doc = r" # }"]
        #[doc = r" ```"]
        pub fn deploy<T: ethers::core::abi::Tokenize>(
            client: ::std::sync::Arc<M>,
            constructor_args: T,
        ) -> Result<
            ethers::contract::builders::ContractDeployer<M, Self>,
            ethers::contract::ContractError<M>,
        > {
            let factory = ethers::contract::ContractFactory::new(
                LANDNFT_ABI.clone(),
                LANDNFT_BYTECODE.clone().into(),
                client,
            );
            let deployer = factory.deploy(constructor_args)?;
            let deployer = ethers::contract::ContractDeployer::new(deployer);
            Ok(deployer)
        }
        #[doc = "Calls the contract's `WETH` (0xad5c4648) function"]
        pub fn weth(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([173, 92, 70, 72], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `admin` (0xf851a440) function"]
        pub fn admin(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([248, 81, 164, 64], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `approve` (0x095ea7b3) function"]
        pub fn approve(
            &self,
            spender: ethers::core::types::Address,
            id: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([9, 94, 167, 179], (spender, id))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `balanceOf` (0x70a08231) function"]
        pub fn balance_of(
            &self,
            owner: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([112, 160, 130, 49], owner)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `baseURI` (0x6c0360eb) function"]
        pub fn base_uri(&self) -> ethers::contract::builders::ContractCall<M, String> {
            self.0
                .method_hash([108, 3, 96, 235], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `commissionRate` (0x5ea1d6f8) function"]
        pub fn commission_rate(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([94, 161, 214, 248], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `devFund` (0x4390d2a8) function"]
        pub fn dev_fund(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([67, 144, 210, 168], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `firstOwners` (0xefaff03c) function"]
        pub fn first_owners(
            &self,
            p0: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([239, 175, 240, 60], p0)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `getApproved` (0x081812fc) function"]
        pub fn get_approved(
            &self,
            p0: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([8, 24, 18, 252], p0)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `getETHPrice` (0x1a753fed) function"]
        pub fn get_eth_price(
            &self,
            price: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([26, 117, 63, 237], price)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `getLength` (0x0986e647) function"]
        pub fn get_length(
            &self,
            index: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([9, 134, 230, 71], index)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `isApprovedForAll` (0xe985e9c5) function"]
        pub fn is_approved_for_all(
            &self,
            p0: ethers::core::types::Address,
            p1: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([233, 133, 233, 197], (p0, p1))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `isOwned` (0x599f689c) function"]
        pub fn is_owned(
            &self,
            p0: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([89, 159, 104, 156], p0)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `landBank` (0xefd32973) function"]
        pub fn land_bank(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([239, 211, 41, 115], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `maxTileNum` (0x55752758) function"]
        pub fn max_tile_num(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([85, 117, 39, 88], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `name` (0x06fdde03) function"]
        pub fn name(&self) -> ethers::contract::builders::ContractCall<M, String> {
            self.0
                .method_hash([6, 253, 222, 3], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `nextId` (0x61b8ce8c) function"]
        pub fn next_id(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([97, 184, 206, 140], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `owner` (0x8da5cb5b) function"]
        pub fn owner(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([141, 165, 203, 91], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `ownerOf` (0x6352211e) function"]
        pub fn owner_of(
            &self,
            id: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([99, 82, 33, 30], id)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `pause` (0x8456cb59) function"]
        pub fn pause(&self) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([132, 86, 203, 89], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `paused` (0x5c975abb) function"]
        pub fn paused(&self) -> ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([92, 151, 90, 187], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `price` (0xa035b1fe) function"]
        pub fn price(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([160, 53, 177, 254], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `regionNumbers` (0x94c9c3e4) function"]
        pub fn region_numbers(
            &self,
            p0: ethers::core::types::U256,
            p1: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([148, 201, 195, 228], (p0, p1))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `renounceOwnership` (0x715018a6) function"]
        pub fn renounce_ownership(&self) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([113, 80, 24, 166], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `safeMint` (0x42583524) function"]
        pub fn safe_mint(
            &self,
            to: ethers::core::types::Address,
            region: ::std::vec::Vec<ethers::core::types::U256>,
            token: ethers::core::types::Address,
            rio_amount: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([66, 88, 53, 36], (to, region, token, rio_amount))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `safeTransferFrom` (0x42842e0e) function"]
        pub fn safe_transfer_from(
            &self,
            from: ethers::core::types::Address,
            to: ethers::core::types::Address,
            id: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([66, 132, 46, 14], (from, to, id))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `safeTransferFrom` (0xb88d4fde) function"]
        pub fn safe_transfer_from_with_data(
            &self,
            from: ethers::core::types::Address,
            to: ethers::core::types::Address,
            id: ethers::core::types::U256,
            data: ethers::core::types::Bytes,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([184, 141, 79, 222], (from, to, id, data))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `setAdmin` (0x704b6c02) function"]
        pub fn set_admin(
            &self,
            new_admin: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([112, 75, 108, 2], new_admin)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `setApprovalForAll` (0xa22cb465) function"]
        pub fn set_approval_for_all(
            &self,
            operator: ethers::core::types::Address,
            approved: bool,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([162, 44, 180, 101], (operator, approved))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `setCommissionRate` (0x19fac8fd) function"]
        pub fn set_commission_rate(
            &self,
            commission_rate: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([25, 250, 200, 253], commission_rate)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `setDevFund` (0xae4db919) function"]
        pub fn set_dev_fund(
            &self,
            dev_fund: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([174, 77, 185, 25], dev_fund)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `setLandBank` (0xf0640d95) function"]
        pub fn set_land_bank(
            &self,
            land_bank: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([240, 100, 13, 149], land_bank)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `setPrice` (0x91b7f5ed) function"]
        pub fn set_price(
            &self,
            price: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([145, 183, 245, 237], price)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `supportsInterface` (0x01ffc9a7) function"]
        pub fn supports_interface(
            &self,
            interface_id: [u8; 4],
        ) -> ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([1, 255, 201, 167], interface_id)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `symbol` (0x95d89b41) function"]
        pub fn symbol(&self) -> ethers::contract::builders::ContractCall<M, String> {
            self.0
                .method_hash([149, 216, 155, 65], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `tokenURI` (0xc87b56dd) function"]
        pub fn token_uri(
            &self,
            token_id: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, String> {
            self.0
                .method_hash([200, 123, 86, 221], token_id)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `totalTileNum` (0x618b2add) function"]
        pub fn total_tile_num(&self) -> ethers::contract::builders::ContractCall<M, u64> {
            self.0
                .method_hash([97, 139, 42, 221], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `transferFrom` (0x23b872dd) function"]
        pub fn transfer_from(
            &self,
            from: ethers::core::types::Address,
            to: ethers::core::types::Address,
            id: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([35, 184, 114, 221], (from, to, id))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `transferOwnership` (0xf2fde38b) function"]
        pub fn transfer_ownership(
            &self,
            new_owner: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([242, 253, 227, 139], new_owner)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `unpause` (0x3f4ba83a) function"]
        pub fn unpause(&self) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([63, 75, 168, 58], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Gets the contract's `AdminChanged` event"]
        pub fn admin_changed_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, AdminChangedFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `Approval` event"]
        pub fn approval_filter(&self) -> ethers::contract::builders::Event<M, ApprovalFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `ApprovalForAll` event"]
        pub fn approval_for_all_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, ApprovalForAllFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `CommissionRateChanged` event"]
        pub fn commission_rate_changed_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, CommissionRateChangedFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `ContractPaused` event"]
        pub fn contract_paused_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, ContractPausedFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `ContractUnpaused` event"]
        pub fn contract_unpaused_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, ContractUnpausedFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `DevFundChanged` event"]
        pub fn dev_fund_changed_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, DevFundChangedFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `LandBankChanged` event"]
        pub fn land_bank_changed_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LandBankChangedFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `LandNFTCreated` event"]
        pub fn land_nft_created_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LandNFTCreatedFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `LandNFTDestroyed` event"]
        pub fn land_nft_destroyed_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LandNFTDestroyedFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `LandNFTTileBought` event"]
        pub fn land_nft_tile_bought_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LandNFTTileBoughtFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `LandNFTTileDeposited` event"]
        pub fn land_nft_tile_deposited_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LandNFTTileDepositedFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `LandNFTTileSold` event"]
        pub fn land_nft_tile_sold_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LandNFTTileSoldFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `LandNFTTileWithdrawn` event"]
        pub fn land_nft_tile_withdrawn_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LandNFTTileWithdrawnFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `OwnershipTransferred` event"]
        pub fn ownership_transferred_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, OwnershipTransferredFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `Paused` event"]
        pub fn paused_filter(&self) -> ethers::contract::builders::Event<M, PausedFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `Transfer` event"]
        pub fn transfer_filter(&self) -> ethers::contract::builders::Event<M, TransferFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `Unpaused` event"]
        pub fn unpaused_filter(&self) -> ethers::contract::builders::Event<M, UnpausedFilter> {
            self.0.event()
        }
        #[doc = r" Returns an [`Event`](#ethers_contract::builders::Event) builder for all events of this contract"]
        pub fn events(&self) -> ethers::contract::builders::Event<M, LandNFTEvents> {
            self.0.event_with_filter(Default::default())
        }
    }
    impl<M: ethers::providers::Middleware> From<ethers::contract::Contract<M>> for LandNFT<M> {
        fn from(contract: ethers::contract::Contract<M>) -> Self {
            Self(contract)
        }
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "AdminChanged", abi = "AdminChanged(address,address)")]
    pub struct AdminChangedFilter {
        pub new_admin: ethers::core::types::Address,
        pub old_admin: ethers::core::types::Address,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "Approval", abi = "Approval(address,address,uint256)")]
    pub struct ApprovalFilter {
        #[ethevent(indexed)]
        pub owner: ethers::core::types::Address,
        #[ethevent(indexed)]
        pub spender: ethers::core::types::Address,
        #[ethevent(indexed)]
        pub id: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "ApprovalForAll", abi = "ApprovalForAll(address,address,bool)")]
    pub struct ApprovalForAllFilter {
        #[ethevent(indexed)]
        pub owner: ethers::core::types::Address,
        #[ethevent(indexed)]
        pub operator: ethers::core::types::Address,
        pub approved: bool,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(
        name = "CommissionRateChanged",
        abi = "CommissionRateChanged(uint256,uint256)"
    )]
    pub struct CommissionRateChangedFilter {
        pub new_commission: ethers::core::types::U256,
        pub old_commission: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "ContractPaused", abi = "ContractPaused(bool)")]
    pub struct ContractPausedFilter {
        pub paused: bool,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "ContractUnpaused", abi = "ContractUnpaused(bool)")]
    pub struct ContractUnpausedFilter {
        pub paused: bool,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "DevFundChanged", abi = "DevFundChanged(address,address)")]
    pub struct DevFundChangedFilter {
        pub new_dev_fund: ethers::core::types::Address,
        pub old_dev_fund: ethers::core::types::Address,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "LandBankChanged", abi = "LandBankChanged(address,address)")]
    pub struct LandBankChangedFilter {
        pub new_land_bank: ethers::core::types::Address,
        pub old_land_bank: ethers::core::types::Address,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(
        name = "LandNFTCreated",
        abi = "LandNFTCreated(address,address,address)"
    )]
    pub struct LandNFTCreatedFilter {
        pub land_nft: ethers::core::types::Address,
        pub land_bank: ethers::core::types::Address,
        pub swap_token: ethers::core::types::Address,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "LandNFTDestroyed", abi = "LandNFTDestroyed(address)")]
    pub struct LandNFTDestroyedFilter {
        pub land_nft: ethers::core::types::Address,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "LandNFTTileBought", abi = "LandNFTTileBought(address,uint256)")]
    pub struct LandNFTTileBoughtFilter {
        pub buyer: ethers::core::types::Address,
        pub token_id: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(
        name = "LandNFTTileDeposited",
        abi = "LandNFTTileDeposited(address,uint256)"
    )]
    pub struct LandNFTTileDepositedFilter {
        pub beneficiary: ethers::core::types::Address,
        pub amount: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "LandNFTTileSold", abi = "LandNFTTileSold(address,uint256)")]
    pub struct LandNFTTileSoldFilter {
        pub seller: ethers::core::types::Address,
        pub token_id: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(
        name = "LandNFTTileWithdrawn",
        abi = "LandNFTTileWithdrawn(address,uint256)"
    )]
    pub struct LandNFTTileWithdrawnFilter {
        pub beneficiary: ethers::core::types::Address,
        pub amount: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(
        name = "OwnershipTransferred",
        abi = "OwnershipTransferred(address,address)"
    )]
    pub struct OwnershipTransferredFilter {
        #[ethevent(indexed)]
        pub previous_owner: ethers::core::types::Address,
        #[ethevent(indexed)]
        pub new_owner: ethers::core::types::Address,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "Paused", abi = "Paused(address)")]
    pub struct PausedFilter {
        pub account: ethers::core::types::Address,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "Transfer", abi = "Transfer(address,address,uint256)")]
    pub struct TransferFilter {
        #[ethevent(indexed)]
        pub from: ethers::core::types::Address,
        #[ethevent(indexed)]
        pub to: ethers::core::types::Address,
        #[ethevent(indexed)]
        pub id: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "Unpaused", abi = "Unpaused(address)")]
    pub struct UnpausedFilter {
        pub account: ethers::core::types::Address,
    }
    #[derive(Debug, Clone, PartialEq, Eq, ethers :: contract :: EthAbiType)]
    pub enum LandNFTEvents {
        AdminChangedFilter(AdminChangedFilter),
        ApprovalFilter(ApprovalFilter),
        ApprovalForAllFilter(ApprovalForAllFilter),
        CommissionRateChangedFilter(CommissionRateChangedFilter),
        ContractPausedFilter(ContractPausedFilter),
        ContractUnpausedFilter(ContractUnpausedFilter),
        DevFundChangedFilter(DevFundChangedFilter),
        LandBankChangedFilter(LandBankChangedFilter),
        LandNFTCreatedFilter(LandNFTCreatedFilter),
        LandNFTDestroyedFilter(LandNFTDestroyedFilter),
        LandNFTTileBoughtFilter(LandNFTTileBoughtFilter),
        LandNFTTileDepositedFilter(LandNFTTileDepositedFilter),
        LandNFTTileSoldFilter(LandNFTTileSoldFilter),
        LandNFTTileWithdrawnFilter(LandNFTTileWithdrawnFilter),
        OwnershipTransferredFilter(OwnershipTransferredFilter),
        PausedFilter(PausedFilter),
        TransferFilter(TransferFilter),
        UnpausedFilter(UnpausedFilter),
    }
    impl ethers::contract::EthLogDecode for LandNFTEvents {
        fn decode_log(log: &ethers::core::abi::RawLog) -> Result<Self, ethers::core::abi::Error>
        where
            Self: Sized,
        {
            if let Ok(decoded) = AdminChangedFilter::decode_log(log) {
                return Ok(LandNFTEvents::AdminChangedFilter(decoded));
            }
            if let Ok(decoded) = ApprovalFilter::decode_log(log) {
                return Ok(LandNFTEvents::ApprovalFilter(decoded));
            }
            if let Ok(decoded) = ApprovalForAllFilter::decode_log(log) {
                return Ok(LandNFTEvents::ApprovalForAllFilter(decoded));
            }
            if let Ok(decoded) = CommissionRateChangedFilter::decode_log(log) {
                return Ok(LandNFTEvents::CommissionRateChangedFilter(decoded));
            }
            if let Ok(decoded) = ContractPausedFilter::decode_log(log) {
                return Ok(LandNFTEvents::ContractPausedFilter(decoded));
            }
            if let Ok(decoded) = ContractUnpausedFilter::decode_log(log) {
                return Ok(LandNFTEvents::ContractUnpausedFilter(decoded));
            }
            if let Ok(decoded) = DevFundChangedFilter::decode_log(log) {
                return Ok(LandNFTEvents::DevFundChangedFilter(decoded));
            }
            if let Ok(decoded) = LandBankChangedFilter::decode_log(log) {
                return Ok(LandNFTEvents::LandBankChangedFilter(decoded));
            }
            if let Ok(decoded) = LandNFTCreatedFilter::decode_log(log) {
                return Ok(LandNFTEvents::LandNFTCreatedFilter(decoded));
            }
            if let Ok(decoded) = LandNFTDestroyedFilter::decode_log(log) {
                return Ok(LandNFTEvents::LandNFTDestroyedFilter(decoded));
            }
            if let Ok(decoded) = LandNFTTileBoughtFilter::decode_log(log) {
                return Ok(LandNFTEvents::LandNFTTileBoughtFilter(decoded));
            }
            if let Ok(decoded) = LandNFTTileDepositedFilter::decode_log(log) {
                return Ok(LandNFTEvents::LandNFTTileDepositedFilter(decoded));
            }
            if let Ok(decoded) = LandNFTTileSoldFilter::decode_log(log) {
                return Ok(LandNFTEvents::LandNFTTileSoldFilter(decoded));
            }
            if let Ok(decoded) = LandNFTTileWithdrawnFilter::decode_log(log) {
                return Ok(LandNFTEvents::LandNFTTileWithdrawnFilter(decoded));
            }
            if let Ok(decoded) = OwnershipTransferredFilter::decode_log(log) {
                return Ok(LandNFTEvents::OwnershipTransferredFilter(decoded));
            }
            if let Ok(decoded) = PausedFilter::decode_log(log) {
                return Ok(LandNFTEvents::PausedFilter(decoded));
            }
            if let Ok(decoded) = TransferFilter::decode_log(log) {
                return Ok(LandNFTEvents::TransferFilter(decoded));
            }
            if let Ok(decoded) = UnpausedFilter::decode_log(log) {
                return Ok(LandNFTEvents::UnpausedFilter(decoded));
            }
            Err(ethers::core::abi::Error::InvalidData)
        }
    }
    impl ::std::fmt::Display for LandNFTEvents {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            match self {
                LandNFTEvents::AdminChangedFilter(element) => element.fmt(f),
                LandNFTEvents::ApprovalFilter(element) => element.fmt(f),
                LandNFTEvents::ApprovalForAllFilter(element) => element.fmt(f),
                LandNFTEvents::CommissionRateChangedFilter(element) => element.fmt(f),
                LandNFTEvents::ContractPausedFilter(element) => element.fmt(f),
                LandNFTEvents::ContractUnpausedFilter(element) => element.fmt(f),
                LandNFTEvents::DevFundChangedFilter(element) => element.fmt(f),
                LandNFTEvents::LandBankChangedFilter(element) => element.fmt(f),
                LandNFTEvents::LandNFTCreatedFilter(element) => element.fmt(f),
                LandNFTEvents::LandNFTDestroyedFilter(element) => element.fmt(f),
                LandNFTEvents::LandNFTTileBoughtFilter(element) => element.fmt(f),
                LandNFTEvents::LandNFTTileDepositedFilter(element) => element.fmt(f),
                LandNFTEvents::LandNFTTileSoldFilter(element) => element.fmt(f),
                LandNFTEvents::LandNFTTileWithdrawnFilter(element) => element.fmt(f),
                LandNFTEvents::OwnershipTransferredFilter(element) => element.fmt(f),
                LandNFTEvents::PausedFilter(element) => element.fmt(f),
                LandNFTEvents::TransferFilter(element) => element.fmt(f),
                LandNFTEvents::UnpausedFilter(element) => element.fmt(f),
            }
        }
    }
    #[doc = "Container type for all input parameters for the `WETH`function with signature `WETH()` and selector `[173, 92, 70, 72]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "WETH", abi = "WETH()")]
    pub struct WethCall;
    #[doc = "Container type for all input parameters for the `admin`function with signature `admin()` and selector `[248, 81, 164, 64]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "admin", abi = "admin()")]
    pub struct AdminCall;
    #[doc = "Container type for all input parameters for the `approve`function with signature `approve(address,uint256)` and selector `[9, 94, 167, 179]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "approve", abi = "approve(address,uint256)")]
    pub struct ApproveCall {
        pub spender: ethers::core::types::Address,
        pub id: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `balanceOf`function with signature `balanceOf(address)` and selector `[112, 160, 130, 49]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "balanceOf", abi = "balanceOf(address)")]
    pub struct BalanceOfCall {
        pub owner: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `baseURI`function with signature `baseURI()` and selector `[108, 3, 96, 235]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "baseURI", abi = "baseURI()")]
    pub struct BaseURICall;
    #[doc = "Container type for all input parameters for the `commissionRate`function with signature `commissionRate()` and selector `[94, 161, 214, 248]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "commissionRate", abi = "commissionRate()")]
    pub struct CommissionRateCall;
    #[doc = "Container type for all input parameters for the `devFund`function with signature `devFund()` and selector `[67, 144, 210, 168]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "devFund", abi = "devFund()")]
    pub struct DevFundCall;
    #[doc = "Container type for all input parameters for the `firstOwners`function with signature `firstOwners(uint256)` and selector `[239, 175, 240, 60]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "firstOwners", abi = "firstOwners(uint256)")]
    pub struct FirstOwnersCall(pub ethers::core::types::U256);
    #[doc = "Container type for all input parameters for the `getApproved`function with signature `getApproved(uint256)` and selector `[8, 24, 18, 252]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "getApproved", abi = "getApproved(uint256)")]
    pub struct GetApprovedCall(pub ethers::core::types::U256);
    #[doc = "Container type for all input parameters for the `getETHPrice`function with signature `getETHPrice(uint256)` and selector `[26, 117, 63, 237]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "getETHPrice", abi = "getETHPrice(uint256)")]
    pub struct GetETHPriceCall {
        pub price: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `getLength`function with signature `getLength(uint256)` and selector `[9, 134, 230, 71]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "getLength", abi = "getLength(uint256)")]
    pub struct GetLengthCall {
        pub index: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `isApprovedForAll`function with signature `isApprovedForAll(address,address)` and selector `[233, 133, 233, 197]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "isApprovedForAll", abi = "isApprovedForAll(address,address)")]
    pub struct IsApprovedForAllCall(
        pub ethers::core::types::Address,
        pub ethers::core::types::Address,
    );
    #[doc = "Container type for all input parameters for the `isOwned`function with signature `isOwned(uint256)` and selector `[89, 159, 104, 156]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "isOwned", abi = "isOwned(uint256)")]
    pub struct IsOwnedCall(pub ethers::core::types::U256);
    #[doc = "Container type for all input parameters for the `landBank`function with signature `landBank()` and selector `[239, 211, 41, 115]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "landBank", abi = "landBank()")]
    pub struct LandBankCall;
    #[doc = "Container type for all input parameters for the `maxTileNum`function with signature `maxTileNum()` and selector `[85, 117, 39, 88]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "maxTileNum", abi = "maxTileNum()")]
    pub struct MaxTileNumCall;
    #[doc = "Container type for all input parameters for the `name`function with signature `name()` and selector `[6, 253, 222, 3]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "name", abi = "name()")]
    pub struct NameCall;
    #[doc = "Container type for all input parameters for the `nextId`function with signature `nextId()` and selector `[97, 184, 206, 140]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "nextId", abi = "nextId()")]
    pub struct NextIdCall;
    #[doc = "Container type for all input parameters for the `owner`function with signature `owner()` and selector `[141, 165, 203, 91]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "owner", abi = "owner()")]
    pub struct OwnerCall;
    #[doc = "Container type for all input parameters for the `ownerOf`function with signature `ownerOf(uint256)` and selector `[99, 82, 33, 30]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "ownerOf", abi = "ownerOf(uint256)")]
    pub struct OwnerOfCall {
        pub id: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `pause`function with signature `pause()` and selector `[132, 86, 203, 89]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "pause", abi = "pause()")]
    pub struct PauseCall;
    #[doc = "Container type for all input parameters for the `paused`function with signature `paused()` and selector `[92, 151, 90, 187]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "paused", abi = "paused()")]
    pub struct PausedCall;
    #[doc = "Container type for all input parameters for the `price`function with signature `price()` and selector `[160, 53, 177, 254]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "price", abi = "price()")]
    pub struct PriceCall;
    #[doc = "Container type for all input parameters for the `regionNumbers`function with signature `regionNumbers(uint256,uint256)` and selector `[148, 201, 195, 228]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "regionNumbers", abi = "regionNumbers(uint256,uint256)")]
    pub struct RegionNumbersCall(pub ethers::core::types::U256, pub ethers::core::types::U256);
    #[doc = "Container type for all input parameters for the `renounceOwnership`function with signature `renounceOwnership()` and selector `[113, 80, 24, 166]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "renounceOwnership", abi = "renounceOwnership()")]
    pub struct RenounceOwnershipCall;
    #[doc = "Container type for all input parameters for the `safeMint`function with signature `safeMint(address,uint256[],address,uint256)` and selector `[66, 88, 53, 36]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "safeMint", abi = "safeMint(address,uint256[],address,uint256)")]
    pub struct SafeMintCall {
        pub to: ethers::core::types::Address,
        pub region: ::std::vec::Vec<ethers::core::types::U256>,
        pub token: ethers::core::types::Address,
        pub rio_amount: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `safeTransferFrom`function with signature `safeTransferFrom(address,address,uint256)` and selector `[66, 132, 46, 14]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "safeTransferFrom",
        abi = "safeTransferFrom(address,address,uint256)"
    )]
    pub struct SafeTransferFromCall {
        pub from: ethers::core::types::Address,
        pub to: ethers::core::types::Address,
        pub id: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `safeTransferFrom`function with signature `safeTransferFrom(address,address,uint256,bytes)` and selector `[184, 141, 79, 222]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "safeTransferFrom",
        abi = "safeTransferFrom(address,address,uint256,bytes)"
    )]
    pub struct SafeTransferFromWithDataCall {
        pub from: ethers::core::types::Address,
        pub to: ethers::core::types::Address,
        pub id: ethers::core::types::U256,
        pub data: ethers::core::types::Bytes,
    }
    #[doc = "Container type for all input parameters for the `setAdmin`function with signature `setAdmin(address)` and selector `[112, 75, 108, 2]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "setAdmin", abi = "setAdmin(address)")]
    pub struct SetAdminCall {
        pub new_admin: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `setApprovalForAll`function with signature `setApprovalForAll(address,bool)` and selector `[162, 44, 180, 101]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "setApprovalForAll", abi = "setApprovalForAll(address,bool)")]
    pub struct SetApprovalForAllCall {
        pub operator: ethers::core::types::Address,
        pub approved: bool,
    }
    #[doc = "Container type for all input parameters for the `setCommissionRate`function with signature `setCommissionRate(uint256)` and selector `[25, 250, 200, 253]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "setCommissionRate", abi = "setCommissionRate(uint256)")]
    pub struct SetCommissionRateCall {
        pub commission_rate: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `setDevFund`function with signature `setDevFund(address)` and selector `[174, 77, 185, 25]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "setDevFund", abi = "setDevFund(address)")]
    pub struct SetDevFundCall {
        pub dev_fund: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `setLandBank`function with signature `setLandBank(address)` and selector `[240, 100, 13, 149]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "setLandBank", abi = "setLandBank(address)")]
    pub struct SetLandBankCall {
        pub land_bank: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `setPrice`function with signature `setPrice(uint256)` and selector `[145, 183, 245, 237]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "setPrice", abi = "setPrice(uint256)")]
    pub struct SetPriceCall {
        pub price: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `supportsInterface`function with signature `supportsInterface(bytes4)` and selector `[1, 255, 201, 167]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "supportsInterface", abi = "supportsInterface(bytes4)")]
    pub struct SupportsInterfaceCall {
        pub interface_id: [u8; 4],
    }
    #[doc = "Container type for all input parameters for the `symbol`function with signature `symbol()` and selector `[149, 216, 155, 65]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "symbol", abi = "symbol()")]
    pub struct SymbolCall;
    #[doc = "Container type for all input parameters for the `tokenURI`function with signature `tokenURI(uint256)` and selector `[200, 123, 86, 221]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "tokenURI", abi = "tokenURI(uint256)")]
    pub struct TokenURICall {
        pub token_id: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `totalTileNum`function with signature `totalTileNum()` and selector `[97, 139, 42, 221]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "totalTileNum", abi = "totalTileNum()")]
    pub struct TotalTileNumCall;
    #[doc = "Container type for all input parameters for the `transferFrom`function with signature `transferFrom(address,address,uint256)` and selector `[35, 184, 114, 221]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "transferFrom", abi = "transferFrom(address,address,uint256)")]
    pub struct TransferFromCall {
        pub from: ethers::core::types::Address,
        pub to: ethers::core::types::Address,
        pub id: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `transferOwnership`function with signature `transferOwnership(address)` and selector `[242, 253, 227, 139]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "transferOwnership", abi = "transferOwnership(address)")]
    pub struct TransferOwnershipCall {
        pub new_owner: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `unpause`function with signature `unpause()` and selector `[63, 75, 168, 58]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "unpause", abi = "unpause()")]
    pub struct UnpauseCall;
    #[derive(Debug, Clone, PartialEq, Eq, ethers :: contract :: EthAbiType)]
    pub enum LandNFTCalls {
        Weth(WethCall),
        Admin(AdminCall),
        Approve(ApproveCall),
        BalanceOf(BalanceOfCall),
        BaseURI(BaseURICall),
        CommissionRate(CommissionRateCall),
        DevFund(DevFundCall),
        FirstOwners(FirstOwnersCall),
        GetApproved(GetApprovedCall),
        GetETHPrice(GetETHPriceCall),
        GetLength(GetLengthCall),
        IsApprovedForAll(IsApprovedForAllCall),
        IsOwned(IsOwnedCall),
        LandBank(LandBankCall),
        MaxTileNum(MaxTileNumCall),
        Name(NameCall),
        NextId(NextIdCall),
        Owner(OwnerCall),
        OwnerOf(OwnerOfCall),
        Pause(PauseCall),
        Paused(PausedCall),
        Price(PriceCall),
        RegionNumbers(RegionNumbersCall),
        RenounceOwnership(RenounceOwnershipCall),
        SafeMint(SafeMintCall),
        SafeTransferFrom(SafeTransferFromCall),
        SafeTransferFromWithData(SafeTransferFromWithDataCall),
        SetAdmin(SetAdminCall),
        SetApprovalForAll(SetApprovalForAllCall),
        SetCommissionRate(SetCommissionRateCall),
        SetDevFund(SetDevFundCall),
        SetLandBank(SetLandBankCall),
        SetPrice(SetPriceCall),
        SupportsInterface(SupportsInterfaceCall),
        Symbol(SymbolCall),
        TokenURI(TokenURICall),
        TotalTileNum(TotalTileNumCall),
        TransferFrom(TransferFromCall),
        TransferOwnership(TransferOwnershipCall),
        Unpause(UnpauseCall),
    }
    impl ethers::core::abi::AbiDecode for LandNFTCalls {
        fn decode(data: impl AsRef<[u8]>) -> Result<Self, ethers::core::abi::AbiError> {
            if let Ok(decoded) = <WethCall as ethers::core::abi::AbiDecode>::decode(data.as_ref()) {
                return Ok(LandNFTCalls::Weth(decoded));
            }
            if let Ok(decoded) = <AdminCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(LandNFTCalls::Admin(decoded));
            }
            if let Ok(decoded) =
                <ApproveCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(LandNFTCalls::Approve(decoded));
            }
            if let Ok(decoded) =
                <BalanceOfCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(LandNFTCalls::BalanceOf(decoded));
            }
            if let Ok(decoded) =
                <BaseURICall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(LandNFTCalls::BaseURI(decoded));
            }
            if let Ok(decoded) =
                <CommissionRateCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(LandNFTCalls::CommissionRate(decoded));
            }
            if let Ok(decoded) =
                <DevFundCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(LandNFTCalls::DevFund(decoded));
            }
            if let Ok(decoded) =
                <FirstOwnersCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(LandNFTCalls::FirstOwners(decoded));
            }
            if let Ok(decoded) =
                <GetApprovedCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(LandNFTCalls::GetApproved(decoded));
            }
            if let Ok(decoded) =
                <GetETHPriceCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(LandNFTCalls::GetETHPrice(decoded));
            }
            if let Ok(decoded) =
                <GetLengthCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(LandNFTCalls::GetLength(decoded));
            }
            if let Ok(decoded) =
                <IsApprovedForAllCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(LandNFTCalls::IsApprovedForAll(decoded));
            }
            if let Ok(decoded) =
                <IsOwnedCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(LandNFTCalls::IsOwned(decoded));
            }
            if let Ok(decoded) =
                <LandBankCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(LandNFTCalls::LandBank(decoded));
            }
            if let Ok(decoded) =
                <MaxTileNumCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(LandNFTCalls::MaxTileNum(decoded));
            }
            if let Ok(decoded) = <NameCall as ethers::core::abi::AbiDecode>::decode(data.as_ref()) {
                return Ok(LandNFTCalls::Name(decoded));
            }
            if let Ok(decoded) = <NextIdCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(LandNFTCalls::NextId(decoded));
            }
            if let Ok(decoded) = <OwnerCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(LandNFTCalls::Owner(decoded));
            }
            if let Ok(decoded) =
                <OwnerOfCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(LandNFTCalls::OwnerOf(decoded));
            }
            if let Ok(decoded) = <PauseCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(LandNFTCalls::Pause(decoded));
            }
            if let Ok(decoded) = <PausedCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(LandNFTCalls::Paused(decoded));
            }
            if let Ok(decoded) = <PriceCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(LandNFTCalls::Price(decoded));
            }
            if let Ok(decoded) =
                <RegionNumbersCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(LandNFTCalls::RegionNumbers(decoded));
            }
            if let Ok(decoded) =
                <RenounceOwnershipCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(LandNFTCalls::RenounceOwnership(decoded));
            }
            if let Ok(decoded) =
                <SafeMintCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(LandNFTCalls::SafeMint(decoded));
            }
            if let Ok(decoded) =
                <SafeTransferFromCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(LandNFTCalls::SafeTransferFrom(decoded));
            }
            if let Ok(decoded) =
                <SafeTransferFromWithDataCall as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(LandNFTCalls::SafeTransferFromWithData(decoded));
            }
            if let Ok(decoded) =
                <SetAdminCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(LandNFTCalls::SetAdmin(decoded));
            }
            if let Ok(decoded) =
                <SetApprovalForAllCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(LandNFTCalls::SetApprovalForAll(decoded));
            }
            if let Ok(decoded) =
                <SetCommissionRateCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(LandNFTCalls::SetCommissionRate(decoded));
            }
            if let Ok(decoded) =
                <SetDevFundCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(LandNFTCalls::SetDevFund(decoded));
            }
            if let Ok(decoded) =
                <SetLandBankCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(LandNFTCalls::SetLandBank(decoded));
            }
            if let Ok(decoded) =
                <SetPriceCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(LandNFTCalls::SetPrice(decoded));
            }
            if let Ok(decoded) =
                <SupportsInterfaceCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(LandNFTCalls::SupportsInterface(decoded));
            }
            if let Ok(decoded) = <SymbolCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(LandNFTCalls::Symbol(decoded));
            }
            if let Ok(decoded) =
                <TokenURICall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(LandNFTCalls::TokenURI(decoded));
            }
            if let Ok(decoded) =
                <TotalTileNumCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(LandNFTCalls::TotalTileNum(decoded));
            }
            if let Ok(decoded) =
                <TransferFromCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(LandNFTCalls::TransferFrom(decoded));
            }
            if let Ok(decoded) =
                <TransferOwnershipCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(LandNFTCalls::TransferOwnership(decoded));
            }
            if let Ok(decoded) =
                <UnpauseCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(LandNFTCalls::Unpause(decoded));
            }
            Err(ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ethers::core::abi::AbiEncode for LandNFTCalls {
        fn encode(self) -> Vec<u8> {
            match self {
                LandNFTCalls::Weth(element) => element.encode(),
                LandNFTCalls::Admin(element) => element.encode(),
                LandNFTCalls::Approve(element) => element.encode(),
                LandNFTCalls::BalanceOf(element) => element.encode(),
                LandNFTCalls::BaseURI(element) => element.encode(),
                LandNFTCalls::CommissionRate(element) => element.encode(),
                LandNFTCalls::DevFund(element) => element.encode(),
                LandNFTCalls::FirstOwners(element) => element.encode(),
                LandNFTCalls::GetApproved(element) => element.encode(),
                LandNFTCalls::GetETHPrice(element) => element.encode(),
                LandNFTCalls::GetLength(element) => element.encode(),
                LandNFTCalls::IsApprovedForAll(element) => element.encode(),
                LandNFTCalls::IsOwned(element) => element.encode(),
                LandNFTCalls::LandBank(element) => element.encode(),
                LandNFTCalls::MaxTileNum(element) => element.encode(),
                LandNFTCalls::Name(element) => element.encode(),
                LandNFTCalls::NextId(element) => element.encode(),
                LandNFTCalls::Owner(element) => element.encode(),
                LandNFTCalls::OwnerOf(element) => element.encode(),
                LandNFTCalls::Pause(element) => element.encode(),
                LandNFTCalls::Paused(element) => element.encode(),
                LandNFTCalls::Price(element) => element.encode(),
                LandNFTCalls::RegionNumbers(element) => element.encode(),
                LandNFTCalls::RenounceOwnership(element) => element.encode(),
                LandNFTCalls::SafeMint(element) => element.encode(),
                LandNFTCalls::SafeTransferFrom(element) => element.encode(),
                LandNFTCalls::SafeTransferFromWithData(element) => element.encode(),
                LandNFTCalls::SetAdmin(element) => element.encode(),
                LandNFTCalls::SetApprovalForAll(element) => element.encode(),
                LandNFTCalls::SetCommissionRate(element) => element.encode(),
                LandNFTCalls::SetDevFund(element) => element.encode(),
                LandNFTCalls::SetLandBank(element) => element.encode(),
                LandNFTCalls::SetPrice(element) => element.encode(),
                LandNFTCalls::SupportsInterface(element) => element.encode(),
                LandNFTCalls::Symbol(element) => element.encode(),
                LandNFTCalls::TokenURI(element) => element.encode(),
                LandNFTCalls::TotalTileNum(element) => element.encode(),
                LandNFTCalls::TransferFrom(element) => element.encode(),
                LandNFTCalls::TransferOwnership(element) => element.encode(),
                LandNFTCalls::Unpause(element) => element.encode(),
            }
        }
    }
    impl ::std::fmt::Display for LandNFTCalls {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            match self {
                LandNFTCalls::Weth(element) => element.fmt(f),
                LandNFTCalls::Admin(element) => element.fmt(f),
                LandNFTCalls::Approve(element) => element.fmt(f),
                LandNFTCalls::BalanceOf(element) => element.fmt(f),
                LandNFTCalls::BaseURI(element) => element.fmt(f),
                LandNFTCalls::CommissionRate(element) => element.fmt(f),
                LandNFTCalls::DevFund(element) => element.fmt(f),
                LandNFTCalls::FirstOwners(element) => element.fmt(f),
                LandNFTCalls::GetApproved(element) => element.fmt(f),
                LandNFTCalls::GetETHPrice(element) => element.fmt(f),
                LandNFTCalls::GetLength(element) => element.fmt(f),
                LandNFTCalls::IsApprovedForAll(element) => element.fmt(f),
                LandNFTCalls::IsOwned(element) => element.fmt(f),
                LandNFTCalls::LandBank(element) => element.fmt(f),
                LandNFTCalls::MaxTileNum(element) => element.fmt(f),
                LandNFTCalls::Name(element) => element.fmt(f),
                LandNFTCalls::NextId(element) => element.fmt(f),
                LandNFTCalls::Owner(element) => element.fmt(f),
                LandNFTCalls::OwnerOf(element) => element.fmt(f),
                LandNFTCalls::Pause(element) => element.fmt(f),
                LandNFTCalls::Paused(element) => element.fmt(f),
                LandNFTCalls::Price(element) => element.fmt(f),
                LandNFTCalls::RegionNumbers(element) => element.fmt(f),
                LandNFTCalls::RenounceOwnership(element) => element.fmt(f),
                LandNFTCalls::SafeMint(element) => element.fmt(f),
                LandNFTCalls::SafeTransferFrom(element) => element.fmt(f),
                LandNFTCalls::SafeTransferFromWithData(element) => element.fmt(f),
                LandNFTCalls::SetAdmin(element) => element.fmt(f),
                LandNFTCalls::SetApprovalForAll(element) => element.fmt(f),
                LandNFTCalls::SetCommissionRate(element) => element.fmt(f),
                LandNFTCalls::SetDevFund(element) => element.fmt(f),
                LandNFTCalls::SetLandBank(element) => element.fmt(f),
                LandNFTCalls::SetPrice(element) => element.fmt(f),
                LandNFTCalls::SupportsInterface(element) => element.fmt(f),
                LandNFTCalls::Symbol(element) => element.fmt(f),
                LandNFTCalls::TokenURI(element) => element.fmt(f),
                LandNFTCalls::TotalTileNum(element) => element.fmt(f),
                LandNFTCalls::TransferFrom(element) => element.fmt(f),
                LandNFTCalls::TransferOwnership(element) => element.fmt(f),
                LandNFTCalls::Unpause(element) => element.fmt(f),
            }
        }
    }
    impl ::std::convert::From<WethCall> for LandNFTCalls {
        fn from(var: WethCall) -> Self {
            LandNFTCalls::Weth(var)
        }
    }
    impl ::std::convert::From<AdminCall> for LandNFTCalls {
        fn from(var: AdminCall) -> Self {
            LandNFTCalls::Admin(var)
        }
    }
    impl ::std::convert::From<ApproveCall> for LandNFTCalls {
        fn from(var: ApproveCall) -> Self {
            LandNFTCalls::Approve(var)
        }
    }
    impl ::std::convert::From<BalanceOfCall> for LandNFTCalls {
        fn from(var: BalanceOfCall) -> Self {
            LandNFTCalls::BalanceOf(var)
        }
    }
    impl ::std::convert::From<BaseURICall> for LandNFTCalls {
        fn from(var: BaseURICall) -> Self {
            LandNFTCalls::BaseURI(var)
        }
    }
    impl ::std::convert::From<CommissionRateCall> for LandNFTCalls {
        fn from(var: CommissionRateCall) -> Self {
            LandNFTCalls::CommissionRate(var)
        }
    }
    impl ::std::convert::From<DevFundCall> for LandNFTCalls {
        fn from(var: DevFundCall) -> Self {
            LandNFTCalls::DevFund(var)
        }
    }
    impl ::std::convert::From<FirstOwnersCall> for LandNFTCalls {
        fn from(var: FirstOwnersCall) -> Self {
            LandNFTCalls::FirstOwners(var)
        }
    }
    impl ::std::convert::From<GetApprovedCall> for LandNFTCalls {
        fn from(var: GetApprovedCall) -> Self {
            LandNFTCalls::GetApproved(var)
        }
    }
    impl ::std::convert::From<GetETHPriceCall> for LandNFTCalls {
        fn from(var: GetETHPriceCall) -> Self {
            LandNFTCalls::GetETHPrice(var)
        }
    }
    impl ::std::convert::From<GetLengthCall> for LandNFTCalls {
        fn from(var: GetLengthCall) -> Self {
            LandNFTCalls::GetLength(var)
        }
    }
    impl ::std::convert::From<IsApprovedForAllCall> for LandNFTCalls {
        fn from(var: IsApprovedForAllCall) -> Self {
            LandNFTCalls::IsApprovedForAll(var)
        }
    }
    impl ::std::convert::From<IsOwnedCall> for LandNFTCalls {
        fn from(var: IsOwnedCall) -> Self {
            LandNFTCalls::IsOwned(var)
        }
    }
    impl ::std::convert::From<LandBankCall> for LandNFTCalls {
        fn from(var: LandBankCall) -> Self {
            LandNFTCalls::LandBank(var)
        }
    }
    impl ::std::convert::From<MaxTileNumCall> for LandNFTCalls {
        fn from(var: MaxTileNumCall) -> Self {
            LandNFTCalls::MaxTileNum(var)
        }
    }
    impl ::std::convert::From<NameCall> for LandNFTCalls {
        fn from(var: NameCall) -> Self {
            LandNFTCalls::Name(var)
        }
    }
    impl ::std::convert::From<NextIdCall> for LandNFTCalls {
        fn from(var: NextIdCall) -> Self {
            LandNFTCalls::NextId(var)
        }
    }
    impl ::std::convert::From<OwnerCall> for LandNFTCalls {
        fn from(var: OwnerCall) -> Self {
            LandNFTCalls::Owner(var)
        }
    }
    impl ::std::convert::From<OwnerOfCall> for LandNFTCalls {
        fn from(var: OwnerOfCall) -> Self {
            LandNFTCalls::OwnerOf(var)
        }
    }
    impl ::std::convert::From<PauseCall> for LandNFTCalls {
        fn from(var: PauseCall) -> Self {
            LandNFTCalls::Pause(var)
        }
    }
    impl ::std::convert::From<PausedCall> for LandNFTCalls {
        fn from(var: PausedCall) -> Self {
            LandNFTCalls::Paused(var)
        }
    }
    impl ::std::convert::From<PriceCall> for LandNFTCalls {
        fn from(var: PriceCall) -> Self {
            LandNFTCalls::Price(var)
        }
    }
    impl ::std::convert::From<RegionNumbersCall> for LandNFTCalls {
        fn from(var: RegionNumbersCall) -> Self {
            LandNFTCalls::RegionNumbers(var)
        }
    }
    impl ::std::convert::From<RenounceOwnershipCall> for LandNFTCalls {
        fn from(var: RenounceOwnershipCall) -> Self {
            LandNFTCalls::RenounceOwnership(var)
        }
    }
    impl ::std::convert::From<SafeMintCall> for LandNFTCalls {
        fn from(var: SafeMintCall) -> Self {
            LandNFTCalls::SafeMint(var)
        }
    }
    impl ::std::convert::From<SafeTransferFromCall> for LandNFTCalls {
        fn from(var: SafeTransferFromCall) -> Self {
            LandNFTCalls::SafeTransferFrom(var)
        }
    }
    impl ::std::convert::From<SafeTransferFromWithDataCall> for LandNFTCalls {
        fn from(var: SafeTransferFromWithDataCall) -> Self {
            LandNFTCalls::SafeTransferFromWithData(var)
        }
    }
    impl ::std::convert::From<SetAdminCall> for LandNFTCalls {
        fn from(var: SetAdminCall) -> Self {
            LandNFTCalls::SetAdmin(var)
        }
    }
    impl ::std::convert::From<SetApprovalForAllCall> for LandNFTCalls {
        fn from(var: SetApprovalForAllCall) -> Self {
            LandNFTCalls::SetApprovalForAll(var)
        }
    }
    impl ::std::convert::From<SetCommissionRateCall> for LandNFTCalls {
        fn from(var: SetCommissionRateCall) -> Self {
            LandNFTCalls::SetCommissionRate(var)
        }
    }
    impl ::std::convert::From<SetDevFundCall> for LandNFTCalls {
        fn from(var: SetDevFundCall) -> Self {
            LandNFTCalls::SetDevFund(var)
        }
    }
    impl ::std::convert::From<SetLandBankCall> for LandNFTCalls {
        fn from(var: SetLandBankCall) -> Self {
            LandNFTCalls::SetLandBank(var)
        }
    }
    impl ::std::convert::From<SetPriceCall> for LandNFTCalls {
        fn from(var: SetPriceCall) -> Self {
            LandNFTCalls::SetPrice(var)
        }
    }
    impl ::std::convert::From<SupportsInterfaceCall> for LandNFTCalls {
        fn from(var: SupportsInterfaceCall) -> Self {
            LandNFTCalls::SupportsInterface(var)
        }
    }
    impl ::std::convert::From<SymbolCall> for LandNFTCalls {
        fn from(var: SymbolCall) -> Self {
            LandNFTCalls::Symbol(var)
        }
    }
    impl ::std::convert::From<TokenURICall> for LandNFTCalls {
        fn from(var: TokenURICall) -> Self {
            LandNFTCalls::TokenURI(var)
        }
    }
    impl ::std::convert::From<TotalTileNumCall> for LandNFTCalls {
        fn from(var: TotalTileNumCall) -> Self {
            LandNFTCalls::TotalTileNum(var)
        }
    }
    impl ::std::convert::From<TransferFromCall> for LandNFTCalls {
        fn from(var: TransferFromCall) -> Self {
            LandNFTCalls::TransferFrom(var)
        }
    }
    impl ::std::convert::From<TransferOwnershipCall> for LandNFTCalls {
        fn from(var: TransferOwnershipCall) -> Self {
            LandNFTCalls::TransferOwnership(var)
        }
    }
    impl ::std::convert::From<UnpauseCall> for LandNFTCalls {
        fn from(var: UnpauseCall) -> Self {
            LandNFTCalls::Unpause(var)
        }
    }
}

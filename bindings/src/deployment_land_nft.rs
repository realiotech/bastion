pub use deployment_land_nft::*;
#[allow(clippy::too_many_arguments, non_camel_case_types)]
pub mod deployment_land_nft {
    #![allow(clippy::enum_variant_names)]
    #![allow(dead_code)]
    #![allow(clippy::type_complexity)]
    #![allow(unused_imports)]
    use ethers::contract::{
        builders::{ContractCall, Event},
        Contract, Lazy,
    };
    use ethers::core::{
        abi::{Abi, Detokenize, InvalidOutputType, Token, Tokenizable},
        types::*,
    };
    use ethers::providers::Middleware;
    #[doc = "DeploymentLandNFT was auto-generated with ethers-rs Abigen. More information at: https://github.com/gakonst/ethers-rs"]
    use std::sync::Arc;
    # [rustfmt :: skip] const __ABI : & str = "[{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"IS_SCRIPT\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"dev\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"run\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"vm\",\"outputs\":[{\"internalType\":\"contract Vm\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]}]" ;
    #[doc = r" The parsed JSON-ABI of the contract."]
    pub static DEPLOYMENTLANDNFT_ABI: ethers::contract::Lazy<ethers::core::abi::Abi> =
        ethers::contract::Lazy::new(|| {
            ethers::core::utils::__serde_json::from_str(__ABI).expect("invalid abi")
        });
    #[doc = r" Bytecode of the #name contract"]
    pub static DEPLOYMENTLANDNFT_BYTECODE: ethers::contract::Lazy<ethers::core::types::Bytes> =
        ethers::contract::Lazy::new(|| {
            "0x60806040526000805460ff1916600117905534801561001d57600080fd5b50614aed8061002d6000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80633a7684631461005c57806391cca3db14610094578063a035b1fe146100af578063c0406226146100cb578063f8ccbf47146100d5575b600080fd5b610077737109709ecfa91a80626ff3989d68f67f5b1dd12d81565b6040516001600160a01b0390911681526020015b60405180910390f35b6100777327a1876a09581e02e583e002e42ec1322abe965581565b6100bd662386f26fc1000081565b60405190815260200161008b565b6100d36100f2565b005b6000546100e29060ff1681565b604051901515815260200161008b565b60408051637fb5297f60e01b81529051737109709ecfa91a80626ff3989d68f67f5b1dd12d91637fb5297f91600480830192600092919082900301818387803b15801561013e57600080fd5b505af1158015610152573d6000803e3d6000fd5b5050505060007327a1876a09581e02e583e002e42ec1322abe9655662386f26fc10000604051610181906102d4565b6001600160a01b0390921682526020820152604001604051809103906000f0801580156101b2573d6000803e3d6000fd5b50905060007327a1876a09581e02e583e002e42ec1322abe9655826040516101d9906102e1565b6001600160a01b03928316815291166020820152604001604051809103906000f08015801561020c573d6000803e3d6000fd5b5060405163f0640d9560e01b81526001600160a01b0380831660048301529192509083169063f0640d9590602401600060405180830381600087803b15801561025457600080fd5b505af1158015610268573d6000803e3d6000fd5b505060408051633b756e9b60e11b81529051737109709ecfa91a80626ff3989d68f67f5b1dd12d93506376eadd369250600480830192600092919082900301818387803b1580156102b857600080fd5b505af11580156102cc573d6000803e3d6000fd5b505050505050565b613480806102ef83390190565b6113498061376f8339019056fe608060405260016009553480156200001657600080fd5b506040516200348038038062003480833981016040819052620000399162000199565b6040518060400160405280600b81526020016a5265616c696f566572736560a81b815250604051806040016040528060048152602001635256525360e01b81525081600290816200008b91906200027a565b5060036200009a82826200027a565b50506000805550620000ac3362000147565b6008805460ff60a01b191690556001600160a01b038216620000e1576040516397b43c7960e01b815260040160405180910390fd5b600b80546001600160a01b0384166001600160a01b031991821617909155600a805490911633178155600f5560108190556040805180820190915260068152655265616c696f60d01b6020820152600d906200013e90826200027a565b50505062000346565b600880546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60008060408385031215620001ad57600080fd5b82516001600160a01b0381168114620001c557600080fd5b6020939093015192949293505050565b634e487b7160e01b600052604160045260246000fd5b600181811c908216806200020057607f821691505b6020821081036200022157634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200027557600081815260208120601f850160051c81016020861015620002505750805b601f850160051c820191505b8181101562000271578281556001016200025c565b5050505b505050565b81516001600160401b03811115620002965762000296620001d5565b620002ae81620002a78454620001eb565b8462000227565b602080601f831160018114620002e65760008415620002cd5750858301515b600019600386901b1c1916600185901b17855562000271565b600085815260208120601f198616915b828110156200031757888601518255948401946001909101908401620002f6565b5085821015620003365787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b61312a80620003566000396000f3fe60806040526004361061028c5760003560e01c806370a082311161015a578063b88d4fde116100c1578063efd329731161007a578063efd32973146107b5578063f0640d95146107d5578063f2fde38b146107f5578063f5f7581b14610815578063f851a4401461082e578063fe909f241461084e57600080fd5b8063b88d4fde146106c0578063c427e2b5146106e0578063c457fb37146106f6578063c87b56dd14610716578063e985e9c514610736578063efaff03c1461077f57600080fd5b806395d89b411161011357806395d89b4114610617578063a035b1fe1461062c578063a22cb46514610642578063a4ebcbae14610662578063ad5c464814610678578063ae4db919146106a057600080fd5b806370a082311461056f578063715018a61461058f5780637cb64759146105a45780638456cb59146105c45780638da5cb5b146105d957806391b7f5ed146105f757600080fd5b806342842e0e116101fe5780635ea1d6f8116101b75780635ea1d6f8146104d9578063618b2add146104ef57806361b8ce8c146105045780636352211e1461051a5780636c0360eb1461053a578063704b6c021461054f57600080fd5b806342842e0e1461040a5780634390d2a81461042a578063483344291461044a57806355f804b31461046a578063599f689c1461048a5780635c975abb146104ba57600080fd5b806318160ddd1161025057806318160ddd1461035c57806319fac8fd1461037f5780631e42412a1461039f57806323b872dd146103bf5780632eb4a7ab146103df5780633f4ba83a146103f557600080fd5b8063019ae5991461029857806301ffc9a7146102ad57806306fdde03146102e2578063081812fc14610304578063095ea7b31461033c57600080fd5b3661029357005b600080fd5b6102ab6102a6366004612617565b61086e565b005b3480156102b957600080fd5b506102cd6102c83660046126d4565b6110e8565b60405190151581526020015b60405180910390f35b3480156102ee57600080fd5b506102f761113a565b6040516102d99190612749565b34801561031057600080fd5b5061032461031f36600461275c565b6111cc565b6040516001600160a01b0390911681526020016102d9565b34801561034857600080fd5b506102ab61035736600461278a565b611210565b34801561036857600080fd5b50600154600054035b6040519081526020016102d9565b34801561038b57600080fd5b506102ab61039a36600461275c565b6112b0565b3480156103ab57600080fd5b506102ab6103ba3660046127b6565b611336565b3480156103cb57600080fd5b506102ab6103da36600461283b565b6114cf565b3480156103eb57600080fd5b5061037160135481565b34801561040157600080fd5b506102ab611668565b34801561041657600080fd5b506102ab61042536600461283b565b6116d1565b34801561043657600080fd5b50600b54610324906001600160a01b031681565b34801561045657600080fd5b5061037161046536600461287c565b6116f1565b34801561047657600080fd5b506102ab610485366004612978565b6117a6565b34801561049657600080fd5b506102cd6104a536600461275c565b60166020526000908152604090205460ff1681565b3480156104c657600080fd5b50600854600160a01b900460ff166102cd565b3480156104e557600080fd5b50610371600f5481565b3480156104fb57600080fd5b50601154610371565b34801561051057600080fd5b50610371600e5481565b34801561052657600080fd5b5061032461053536600461275c565b6117be565b34801561054657600080fd5b506102f76117c9565b34801561055b57600080fd5b506102ab61056a3660046129c0565b611857565b34801561057b57600080fd5b5061037161058a3660046129c0565b6118f6565b34801561059b57600080fd5b506102ab611944565b3480156105b057600080fd5b506102ab6105bf36600461275c565b611958565b3480156105d057600080fd5b506102ab611965565b3480156105e557600080fd5b506008546001600160a01b0316610324565b34801561060357600080fd5b506102ab61061236600461275c565b6119ce565b34801561062357600080fd5b506102f7611a02565b34801561063857600080fd5b5061037160105481565b34801561064e57600080fd5b506102ab61065d3660046129eb565b611a11565b34801561066e57600080fd5b5061037160125481565b34801561068457600080fd5b5061032473c02aaa39b223fe8d0a0e5c4f27ead9083c756cc281565b3480156106ac57600080fd5b506102ab6106bb3660046129c0565b611aa6565b3480156106cc57600080fd5b506102ab6106db366004612a24565b611b4f565b3480156106ec57600080fd5b5061037160115481565b34801561070257600080fd5b5061037161071136600461275c565b611b99565b34801561072257600080fd5b506102f761073136600461275c565b611c47565b34801561074257600080fd5b506102cd610751366004612aa3565b6001600160a01b03918216600090815260076020908152604080832093909416825291909152205460ff1690565b34801561078b57600080fd5b5061032461079a36600461275c565b6017602052600090815260409020546001600160a01b031681565b3480156107c157600080fd5b50600c54610324906001600160a01b031681565b3480156107e157600080fd5b506102ab6107f03660046129c0565b611cd7565b34801561080157600080fd5b506102ab6108103660046129c0565b611d80565b34801561082157600080fd5b506103716402540be40081565b34801561083a57600080fd5b50600a54610324906001600160a01b031681565b34801561085a57600080fd5b506102ab610869366004612ad1565b611df6565b8151829060005b8181101561090557600083828151811061089157610891612b2a565b60200260200101516040516020016108a99190612b40565b60408051601f1981840301815291815281516020928301206000818152601990935291205490915060ff16156108f25760405163efbff93960e01b815260040160405180910390fd5b50806108fd81612bb0565b915050610875565b5061090e611e6d565b6402540be4006109216001546000540390565b1061093f5760405163e74fd80b60e01b815260040160405180910390fd5b83518315158061094d575034155b15610e7c5760408051600280825260608201835260009260208301908036833701905050905073f21661d0d1d76d3ecb8e1b9f1c923dbfffae40978160008151811061099b5761099b612b2a565b60200260200101906001600160a01b031690816001600160a01b03168152505073c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2816001815181106109e3576109e3612b2a565b60200260200101906001600160a01b031690816001600160a01b0316815250506000610a16836010546107119190612bc9565b905080861015610a3957604051631e9acf1760e31b815260040160405180910390fd5b60405163095ea7b360e01b81523060048201526024810187905273f21661d0d1d76d3ecb8e1b9f1c923dbfffae40979063095ea7b3906044016020604051808303816000875af1158015610a91573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ab59190612be8565b506040516323b872dd60e01b81523360048201523060248201526044810187905260009073f21661d0d1d76d3ecb8e1b9f1c923dbfffae4097906323b872dd906064016020604051808303816000875af1158015610b17573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b3b9190612be8565b905080610b5b576040516312171d8360e31b815260040160405180910390fd5b60006064610b6a896014612bc9565b610b749190612c1b565b60405163095ea7b360e01b8152737a250d5630b4cf539739df2c5dacb4c659f2488d60048201526024810182905290915073f21661d0d1d76d3ecb8e1b9f1c923dbfffae40979063095ea7b3906044016020604051808303816000875af1158015610be3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c079190612be8565b50604080516002808252606082018352909160208301908036833701905050935073f21661d0d1d76d3ecb8e1b9f1c923dbfffae409784600081518110610c5057610c50612b2a565b60200260200101906001600160a01b031690816001600160a01b03168152505073c02aaa39b223fe8d0a0e5c4f27ead9083c756cc284600181518110610c9857610c98612b2a565b60200260200101906001600160a01b031690816001600160a01b0316815250506000610cc482866116f1565b600b546040516318cbafe560e01b8152919250737a250d5630b4cf539739df2c5dacb4c659f2488d916318cbafe591610d1191869186918b916001600160a01b0316904290600401612c73565b600060405180830381600087803b158015610d2b57600080fd5b505af1158015610d3f573d6000803e3d6000fd5b5050600c5473f21661d0d1d76d3ecb8e1b9f1c923dbfffae4097925063a9059cbb91506001600160a01b03166064610d788d6050612bc9565b610d829190612c1b565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af1158015610dcd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610df19190612be8565b925082610e11576040516312171d8360e31b815260040160405180910390fd5b610e1b3387611eba565b8560116000828254610e2d9190612caf565b9091555050604051610e40908b90612cc7565b6040519081900381209033907ffedaf99886e624862075ed4c59d51e3ec75e512a2ddd085a09a1234f2a486bc790600090a350505050506110e1565b6000341180610e89575083155b156110e1578451601054610e9d9190612bc9565b341015610ebd57604051631e9acf1760e31b815260040160405180910390fd5b600b546001600160a01b03166108fc6064610ed9346014612bc9565b610ee39190612c1b565b6040518115909202916000818181858888f19350505050158015610f0b573d6000803e3d6000fd5b5060006064610f1b346050612bc9565b610f259190612c1b565b604080516002808252606082018352929350600092909160208301908036833701905050905073c02aaa39b223fe8d0a0e5c4f27ead9083c756cc281600081518110610f7357610f73612b2a565b60200260200101906001600160a01b031690816001600160a01b03168152505073f21661d0d1d76d3ecb8e1b9f1c923dbfffae409781600181518110610fbb57610fbb612b2a565b60200260200101906001600160a01b031690816001600160a01b0316815250506000610fe783836116f1565b600c54604051637ff36ab560e01b8152919250737a250d5630b4cf539739df2c5dacb4c659f2488d91637ff36ab591869161103491869188916001600160a01b0316904290600401612d5f565b60006040518083038185885af1158015611052573d6000803e3d6000fd5b50505050506040513d6000823e601f3d908101601f1916820160405261107b9190810190612d94565b506110863385611eba565b83601160008282546110989190612caf565b90915550506040516110ab908990612cc7565b6040519081900381209033907ffedaf99886e624862075ed4c59d51e3ec75e512a2ddd085a09a1234f2a486bc790600090a35050505b5050505050565b60006301ffc9a760e01b6001600160e01b03198316148061111957506380ac58cd60e01b6001600160e01b03198316145b806111345750635b5e139f60e01b6001600160e01b03198316145b92915050565b60606002805461114990612e24565b80601f016020809104026020016040519081016040528092919081815260200182805461117590612e24565b80156111c25780601f10611197576101008083540402835291602001916111c2565b820191906000526020600020905b8154815290600101906020018083116111a557829003601f168201915b5050505050905090565b60006111d782611ed4565b6111f4576040516333d1c03960e21b815260040160405180910390fd5b506000908152600660205260409020546001600160a01b031690565b600061121b826117be565b9050336001600160a01b03821614611254576112378133610751565b611254576040516367d9dca160e11b815260040160405180910390fd5b60008281526006602052604080822080546001600160a01b0319166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b600f54600a546001600160a01b031633146112de57604051631648fd0160e01b815260040160405180910390fd5b601482111561130057604051637d1dd3df60e11b815260040160405180910390fd5b600f829055604051819083907f74b81a9e0217358c4b0755d3032738dc303e980dde2980905160b1d8e7b68ba690600090a35050565b336000908152601b602052604090205460ff16151560010361136b57604051635986e84960e01b815260040160405180910390fd5b6040516bffffffffffffffffffffffff193360601b1660208201526000906034016040516020818303038152906040528051906020012090506000826040516020016113b79190612b40565b60408051601f1981840301815291815281516020928301206000818152601a90935291205490915060ff161561142b5760405162461bcd60e51b8152602060048201526014602482015273185c995848185b1c9958591e4818db185a5b595960621b60448201526064015b60405180910390fd5b61146c858580806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250506013549150859050611efb565b6114a85760405162461bcd60e51b815260206004820152600d60248201526c34b73b30b634b210383937b7b360991b6044820152606401611422565b336000818152601b60205260409020805460ff191660019081179091556110e19190611eba565b60006114da82611f11565b9050836001600160a01b0316816001600160a01b03161461150d5760405162a1148160e81b815260040160405180910390fd5b60008281526006602052604090208054338082146001600160a01b0388169091141761155a5761153d8633610751565b61155a57604051632ce44b5f60e11b815260040160405180910390fd5b6001600160a01b03851661158157604051633a954ecd60e21b815260040160405180910390fd5b801561158c57600082555b6001600160a01b038681166000908152600560205260408082208054600019019055918716808252919020805460010190554260a01b17600160e11b17600085815260046020526040812091909155600160e11b8416900361161e5760018401600081815260046020526040812054900361161c57600054811461161c5760008181526004602052604090208490555b505b83856001600160a01b0316876001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45b505050505050565b611670611f7f565b600a546001600160a01b0316331461169b57604051631648fd0160e01b815260040160405180910390fd5b6116a3611fcf565b6040516001907fc6cd34d367248623c114617f3cf4e7d54b15f11b158367408ee3b4c0ff1a5e2e90600090a2565b6116ec83838360405180602001604052806000815250611b4f565b505050565b60405163d06ca61f60e01b81526000908190737a250d5630b4cf539739df2c5dacb4c659f2488d9063d06ca61f9061172f9087908790600401612e5e565b600060405180830381865afa15801561174c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526117749190810190612d94565b905080600184516117859190612e77565b8151811061179557611795612b2a565b602002602001015191505092915050565b6117ae612024565b600d6117ba8282612ed4565b5050565b600061113482611f11565b600d80546117d690612e24565b80601f016020809104026020016040519081016040528092919081815260200182805461180290612e24565b801561184f5780601f106118245761010080835404028352916020019161184f565b820191906000526020600020905b81548152906001019060200180831161183257829003601f168201915b505050505081565b600a546001600160a01b0316331461188257604051631648fd0160e01b815260040160405180910390fd5b6001600160a01b0381166118a9576040516397b43c7960e01b815260040160405180910390fd5b600a80546001600160a01b0319166001600160a01b0383169081179091556040513391907f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f90600090a350565b60006001600160a01b03821661191f576040516323d3ad8160e21b815260040160405180910390fd5b506001600160a01b03166000908152600560205260409020546001600160401b031690565b61194c612024565b611956600061207e565b565b611960612024565b601355565b61196d611e6d565b600a546001600160a01b0316331461199857604051631648fd0160e01b815260040160405180910390fd5b6119a06120d0565b6040516001907f752d7e161ff5146f80e3820893176eb40532811e5e20400dfdde57455213706a90600090a2565b600a546001600160a01b031633146119f957604051631648fd0160e01b815260040160405180910390fd5b60108190555b50565b60606003805461114990612e24565b336001600160a01b03831603611a3a5760405163b06307db60e01b815260040160405180910390fd5b3360008181526007602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b600b54600a546001600160a01b0391821691163314611ad857604051631648fd0160e01b815260040160405180910390fd5b6001600160a01b038216611aff576040516397b43c7960e01b815260040160405180910390fd5b600b80546001600160a01b0319166001600160a01b03848116918217909255604051918316917ff87e12ba363db684b1b69a530d850a8a3f416932cd031e008ef71e42a1d8845090600090a35050565b611b5a8484846114cf565b6001600160a01b0383163b15611b9357611b7684848484612113565b611b93576040516368d2bf6b60e11b815260040160405180910390fd5b50505050565b600080730b85b3000bef3e26e01428d1b525a532ea7513b89050600080826001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa158015611bf4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c189190612faf565b506001600160701b03918216935016905081611c348287612bc9565b611c3e9190612c1b565b95945050505050565b60606000611c54836117be565b6001600160a01b031603611c7b5760405163d872946b60e01b815260040160405180910390fd5b6000600d8054611c8a90612e24565b905011611ca65760405180602001604052806000815250611134565b600d611cb1836121ff565b604051602001611cc2929190612fff565b60405160208183030381529060405292915050565b600c54600a546001600160a01b0391821691163314611d0957604051631648fd0160e01b815260040160405180910390fd5b6001600160a01b038216611d30576040516397b43c7960e01b815260040160405180910390fd5b600c80546001600160a01b0319166001600160a01b03848116918217909255604051918316917f04c90a5bd107b5b753ce9758599ca56cffaadede0b5f6c4b3a375a5effe208d490600090a35050565b611d88612024565b6001600160a01b038116611ded5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401611422565b6119ff8161207e565b611dfe612024565b60006040518060800160405280868152602001858152602001848152602001838152509050600081604051602001611e369190612b40565b60408051601f198184030181529181528151602092830120600090815260199092529020805460ff19166001179055505050505050565b600854600160a01b900460ff16156119565760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401611422565b6117ba8282604051806020016040528060008152506122ff565b6000805482108015611134575050600090815260046020526040902054600160e01b161590565b600082611f088584612365565b14949350505050565b600081600054811015611f665760008181526004602052604081205490600160e01b82169003611f64575b80600003611f5d575060001901600081815260046020526040902054611f3c565b9392505050565b505b604051636f96cda160e11b815260040160405180910390fd5b600854600160a01b900460ff166119565760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401611422565b611fd7611f7f565b6008805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6008546001600160a01b031633146119565760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401611422565b600880546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6120d8611e6d565b6008805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586120073390565b604051630a85bd0160e11b81526000906001600160a01b0385169063150b7a0290612148903390899088908890600401613086565b6020604051808303816000875af1925050508015612183575060408051601f3d908101601f19168201909252612180918101906130c3565b60015b6121e1573d8080156121b1576040519150601f19603f3d011682016040523d82523d6000602084013e6121b6565b606091505b5080516000036121d9576040516368d2bf6b60e11b815260040160405180910390fd5b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490505b949350505050565b6060816000036122265750506040805180820190915260018152600360fc1b602082015290565b8160005b8115612250578061223a81612bb0565b91506122499050600a83612c1b565b915061222a565b6000816001600160401b0381111561226a5761226a6124dc565b6040519080825280601f01601f191660200182016040528015612294576020820181803683370190505b5090505b84156121f7576122a9600183612e77565b91506122b6600a866130e0565b6122c1906030612caf565b60f81b8183815181106122d6576122d6612b2a565b60200101906001600160f81b031916908160001a9053506122f8600a86612c1b565b9450612298565b61230983836123b2565b6001600160a01b0383163b156116ec576000548281035b6123336000868380600101945086612113565b612350576040516368d2bf6b60e11b815260040160405180910390fd5b8181106123205781600054146110e157600080fd5b600081815b84518110156123aa576123968286838151811061238957612389612b2a565b60200260200101516124b0565b9150806123a281612bb0565b91505061236a565b509392505050565b60008054908290036123d75760405163b562e8dd60e01b815260040160405180910390fd5b6001600160a01b03831660008181526005602090815260408083208054680100000000000000018802019055848352600490915281206001851460e11b4260a01b178317905582840190839083907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8180a4600183015b81811461248657808360007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef600080a460010161244e565b50816000036124a757604051622e076360e81b815260040160405180910390fd5b60005550505050565b60008183106124cc576000828152602084905260409020611f5d565b5060009182526020526040902090565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b038111828210171561251a5761251a6124dc565b604052919050565b60006001600160401b0382111561253b5761253b6124dc565b5060051b60200190565b60006040828403121561255757600080fd5b604051604081018181106001600160401b0382111715612579576125796124dc565b604052823581526020928301359281019290925250919050565b600061010082840312156125a657600080fd5b604051608081018181106001600160401b03821117156125c8576125c86124dc565b6040529050806125d88484612545565b81526125e78460408501612545565b60208201526125f98460808501612545565b604082015261260b8460c08501612545565b60608201525092915050565b6000806040838503121561262a57600080fd5b82356001600160401b0381111561264057600080fd5b8301601f8101851361265157600080fd5b8035602061266661266183612522565b6124f2565b82815260089290921b8301810191818101908884111561268557600080fd5b938201935b838510156126af5761269c8986612593565b825282820191506101008501945061268a565b98969091013596505050505050565b6001600160e01b0319811681146119ff57600080fd5b6000602082840312156126e657600080fd5b8135611f5d816126be565b60005b8381101561270c5781810151838201526020016126f4565b83811115611b935750506000910152565b600081518084526127358160208601602086016126f1565b601f01601f19169290920160200192915050565b602081526000611f5d602083018461271d565b60006020828403121561276e57600080fd5b5035919050565b6001600160a01b03811681146119ff57600080fd5b6000806040838503121561279d57600080fd5b82356127a881612775565b946020939093013593505050565b600080600061012084860312156127cc57600080fd5b83356001600160401b03808211156127e357600080fd5b818601915086601f8301126127f757600080fd5b81358181111561280657600080fd5b8760208260051b850101111561281b57600080fd5b602092830195509350612832918791508601612593565b90509250925092565b60008060006060848603121561285057600080fd5b833561285b81612775565b9250602084013561286b81612775565b929592945050506040919091013590565b6000806040838503121561288f57600080fd5b823591506020808401356001600160401b038111156128ad57600080fd5b8401601f810186136128be57600080fd5b80356128cc61266182612522565b81815260059190911b820183019083810190888311156128eb57600080fd5b928401925b8284101561291257833561290381612775565b825292840192908401906128f0565b80955050505050509250929050565b60006001600160401b0383111561293a5761293a6124dc565b61294d601f8401601f19166020016124f2565b905082815283838301111561296157600080fd5b828260208301376000602084830101529392505050565b60006020828403121561298a57600080fd5b81356001600160401b038111156129a057600080fd5b8201601f810184136129b157600080fd5b6121f784823560208401612921565b6000602082840312156129d257600080fd5b8135611f5d81612775565b80151581146119ff57600080fd5b600080604083850312156129fe57600080fd5b8235612a0981612775565b91506020830135612a19816129dd565b809150509250929050565b60008060008060808587031215612a3a57600080fd5b8435612a4581612775565b93506020850135612a5581612775565b92506040850135915060608501356001600160401b03811115612a7757600080fd5b8501601f81018713612a8857600080fd5b612a9787823560208401612921565b91505092959194509250565b60008060408385031215612ab657600080fd5b8235612ac181612775565b91506020830135612a1981612775565b6000806000806101008587031215612ae857600080fd5b612af28686612545565b9350612b018660408701612545565b9250612b108660808701612545565b9150612b1f8660c08701612545565b905092959194509250565b634e487b7160e01b600052603260045260246000fd5b8151805182526020908101518183015280830151805160408085019190915290820151606080850191909152908401518051608085015282015160a084015290920151805160c08301529091015160e08201526101000190565b634e487b7160e01b600052601160045260246000fd5b600060018201612bc257612bc2612b9a565b5060010190565b6000816000190483118215151615612be357612be3612b9a565b500290565b600060208284031215612bfa57600080fd5b8151611f5d816129dd565b634e487b7160e01b600052601260045260246000fd5b600082612c2a57612c2a612c05565b500490565b600081518084526020808501945080840160005b83811015612c685781516001600160a01b031687529582019590820190600101612c43565b509495945050505050565b85815284602082015260a060408201526000612c9260a0830186612c2f565b6001600160a01b0394909416606083015250608001529392505050565b60008219821115612cc257612cc2612b9a565b500190565b815160009082906020808601845b83811015612d5357815180518051875260209081015181880152848201518051604089015201516060870152612d3d612d24608088016040840151805182526020908101519082015260400190565b6060830151805182526020908101519082015260400190565b5050610100949094019390820190600101612cd5565b50929695505050505050565b848152608060208201526000612d786080830186612c2f565b6001600160a01b03949094166040830152506060015292915050565b60006020808385031215612da757600080fd5b82516001600160401b03811115612dbd57600080fd5b8301601f81018513612dce57600080fd5b8051612ddc61266182612522565b81815260059190911b82018301908381019087831115612dfb57600080fd5b928401925b82841015612e1957835182529284019290840190612e00565b979650505050505050565b600181811c90821680612e3857607f821691505b602082108103612e5857634e487b7160e01b600052602260045260246000fd5b50919050565b8281526040602082015260006121f76040830184612c2f565b600082821015612e8957612e89612b9a565b500390565b601f8211156116ec57600081815260208120601f850160051c81016020861015612eb55750805b601f850160051c820191505b8181101561166057828155600101612ec1565b81516001600160401b03811115612eed57612eed6124dc565b612f0181612efb8454612e24565b84612e8e565b602080601f831160018114612f365760008415612f1e5750858301515b600019600386901b1c1916600185901b178555611660565b600085815260208120601f198616915b82811015612f6557888601518255948401946001909101908401612f46565b5085821015612f835787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b80516001600160701b0381168114612faa57600080fd5b919050565b600080600060608486031215612fc457600080fd5b612fcd84612f93565b9250612fdb60208501612f93565b9150604084015163ffffffff81168114612ff457600080fd5b809150509250925092565b600080845461300d81612e24565b60018281168015613025576001811461303a57613069565b60ff1984168752821515830287019450613069565b8860005260208060002060005b858110156130605781548a820152908401908201613047565b50505082870194505b50505050835161307d8183602088016126f1565b01949350505050565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906130b99083018461271d565b9695505050505050565b6000602082840312156130d557600080fd5b8151611f5d816126be565b6000826130ef576130ef612c05565b50069056fea264697066735822122068e36d1c925c950f4ed99837534304ce6a4ffeed5e88d2268dfb9fc72dc9e21664736f6c634300080f00336080604052600160005534801561001557600080fd5b50604051611349380380611349833981016040819052610034916100f1565b6001600160a01b0382161580159061005457506001600160a01b03811615155b6100a45760405162461bcd60e51b815260206004820152601660248201527f63616e277420736574207a65726f206164647265737300000000000000000000604482015260640160405180910390fd5b600380546001600160a01b039384166001600160a01b03199182161790915560028054929093169116179055610124565b80516001600160a01b03811681146100ec57600080fd5b919050565b6000806040838503121561010457600080fd5b61010d836100d5565b915061011b602084016100d5565b90509250929050565b611216806101336000396000f3fe60806040526004361061007f5760003560e01c806398d5fdca1161004e57806398d5fdca14610138578063a1acbd7e1461014d578063ad5c46481461016d578063df17dcd91461019557600080fd5b80631fffbe7f1461008b5780634390d2a8146100ad57806348334429146100ea5780638da5cb5b1461011857600080fd5b3661008657005b600080fd5b34801561009757600080fd5b506100ab6100a6366004610da4565b6101a8565b005b3480156100b957600080fd5b506003546100cd906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156100f657600080fd5b5061010a610105366004610e3a565b6103b5565b6040519081526020016100e1565b34801561012457600080fd5b506001546100cd906001600160a01b031681565b34801561014457600080fd5b5061010a61046a565b34801561015957600080fd5b506002546100cd906001600160a01b031681565b34801561017957600080fd5b506100cd73c02aaa39b223fe8d0a0e5c4f27ead9083c756cc281565b6100ab6101a3366004610da4565b610598565b6000546001146101ec5760405162461bcd60e51b815260206004820152600a6024820152695245454e5452414e435960b01b60448201526064015b60405180910390fd5b60026000908155815190816101ff61046a565b02905060005b828110156102f05760025484516001600160a01b03909116906323b872dd903390309088908690811061023a5761023a610eed565b60209081029190910101516040516001600160e01b031960e086901b1681526001600160a01b0393841660048201529290911660248301526044820152606401600060405180830381600087803b15801561029457600080fd5b505af11580156102a8573d6000803e3d6000fd5b5050505042600460008684815181106102c3576102c3610eed565b602002602001015181526020019081526020016000208190555080806102e890610f19565b915050610205565b5060405163a9059cbb60e01b81523360048201526024810182905273f21661d0d1d76d3ecb8e1b9f1c923dbfffae40979063a9059cbb906044016020604051808303816000875af1158015610349573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061036d9190610f32565b507f8b01d96644460f984e6836351bf037940d5db9407477a090a8deabdf241b8495338483426040516103a39493929190610f5b565b60405180910390a15050600160005550565b60405163d06ca61f60e01b81526000908190737a250d5630b4cf539739df2c5dacb4c659f2488d9063d06ca61f906103f39087908790600401610fff565b600060405180830381865afa158015610410573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526104389190810190611020565b9050806001845161044991906110a6565b8151811061045957610459610eed565b602002602001015191505092915050565b6040516370a0823160e01b8152306004820152600090819073f21661d0d1d76d3ecb8e1b9f1c923dbfffae4097906370a0823190602401602060405180830381865afa1580156104be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104e291906110bd565b90506000600260009054906101000a90046001600160a01b03166001600160a01b031663618b2add6040518163ffffffff1660e01b81526004016020604051808303816000875af115801561053b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061055f91906110d6565b67ffffffffffffffff1690506000600a82848161057e5761057e611100565b04600c028161058f5761058f611100565b04949350505050565b6000546001146105d75760405162461bcd60e51b815260206004820152600a6024820152695245454e5452414e435960b01b60448201526064016101e3565b600260009081558151906105e961046a565b6105f39083611116565b905060005b835181101561066e57426004600086848151811061061857610618610eed565b60200260200101518152602001908152602001600020546206978061063d9190611135565b111561065c57604051634d056f6d60e01b815260040160405180910390fd5b8061066681610f19565b9150506105f8565b5060408051600280825260608201835260009260208301908036833701905050905073f21661d0d1d76d3ecb8e1b9f1c923dbfffae4097816000815181106106b8576106b8610eed565b60200260200101906001600160a01b031690816001600160a01b03168152505073c02aaa39b223fe8d0a0e5c4f27ead9083c756cc28160018151811061070057610700610eed565b60200260200101906001600160a01b031690816001600160a01b031681525050346000036109a2576040516370a0823160e01b8152336004820152829073f21661d0d1d76d3ecb8e1b9f1c923dbfffae4097906370a0823190602401602060405180830381865afa158015610779573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061079d91906110bd565b10156107bc57604051630780674d60e11b815260040160405180910390fd5b6040516323b872dd60e01b81523360048201523060248201526044810183905260009073f21661d0d1d76d3ecb8e1b9f1c923dbfffae4097906323b872dd906064016020604051808303816000875af115801561081d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108419190610f32565b9050806108615760405163bfa871c560e01b815260040160405180910390fd5b6000606461087085600a611116565b61087a919061114d565b9050600061088882856103b5565b60405163095ea7b360e01b8152737a250d5630b4cf539739df2c5dacb4c659f2488d60048201526024810184905290915073f21661d0d1d76d3ecb8e1b9f1c923dbfffae40979063095ea7b3906044016020604051808303816000875af11580156108f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061091b9190610f32565b506003546040516318cbafe560e01b8152737a250d5630b4cf539739df2c5dacb4c659f2488d916318cbafe59161096891869186918a916001600160a01b0390911690429060040161116f565b600060405180830381600087803b15801561098257600080fd5b505af1158015610996573d6000803e3d6000fd5b50505050505050610c02565b6000341180610a2157506040516370a0823160e01b815233600482015273f21661d0d1d76d3ecb8e1b9f1c923dbfffae4097906370a0823190602401602060405180830381865afa1580156109fb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a1f91906110bd565b155b15610c02576000610a3283836103b5565b905080341015610a5557604051635b6b73eb60e11b815260040160405180910390fd5b6003546001600160a01b03166108fc610a6f600a3461114d565b6040518115909202916000818181858888f19350505050158015610a97573d6000803e3d6000fd5b506000600a610aa7346009611116565b610ab1919061114d565b604080516002808252606082018352929350600092909160208301908036833701905050905073c02aaa39b223fe8d0a0e5c4f27ead9083c756cc281600081518110610aff57610aff610eed565b60200260200101906001600160a01b031690816001600160a01b03168152505073f21661d0d1d76d3ecb8e1b9f1c923dbfffae409781600181518110610b4757610b47610eed565b60200260200101906001600160a01b031690816001600160a01b0316815250506000610b7383866103b5565b604051637ff36ab560e01b8152909150737a250d5630b4cf539739df2c5dacb4c659f2488d90637ff36ab5908590610bb59085908790309042906004016111ab565b60006040518083038185885af1158015610bd3573d6000803e3d6000fd5b50505050506040513d6000823e601f3d908101601f19168201604052610bfc9190810190611020565b50505050505b60005b83811015610cf05760025485516001600160a01b03909116906342842e0e9030903390899086908110610c3a57610c3a610eed565b60209081029190910101516040516001600160e01b031960e086901b1681526001600160a01b0393841660048201529290911660248301526044820152606401600060405180830381600087803b158015610c9457600080fd5b505af1158015610ca8573d6000803e3d6000fd5b505050504260046000878481518110610cc357610cc3610eed565b60200260200101518152602001908152602001600020819055508080610ce890610f19565b915050610c05565b507f63f6eae93c684489ef48a7c99798f6a2ffce3c3266b9a9e7c291930772f4eec433858442604051610d269493929190610f5b565b60405180910390a1505060016000555050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715610d7857610d78610d39565b604052919050565b600067ffffffffffffffff821115610d9a57610d9a610d39565b5060051b60200190565b60006020808385031215610db757600080fd5b823567ffffffffffffffff811115610dce57600080fd5b8301601f81018513610ddf57600080fd5b8035610df2610ded82610d80565b610d4f565b81815260059190911b82018301908381019087831115610e1157600080fd5b928401925b82841015610e2f57833582529284019290840190610e16565b979650505050505050565b60008060408385031215610e4d57600080fd5b8235915060208084013567ffffffffffffffff811115610e6c57600080fd5b8401601f81018613610e7d57600080fd5b8035610e8b610ded82610d80565b81815260059190911b82018301908381019088831115610eaa57600080fd5b928401925b82841015610ede5783356001600160a01b0381168114610ecf5760008081fd5b82529284019290840190610eaf565b80955050505050509250929050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201610f2b57610f2b610f03565b5060010190565b600060208284031215610f4457600080fd5b81518015158114610f5457600080fd5b9392505050565b6001600160a01b0385168152608060208083018290528551918301829052600091868201919060a0850190845b81811015610fa457845183529383019391830191600101610f88565b505060408501969096525050506060015292915050565b600081518084526020808501945080840160005b83811015610ff45781516001600160a01b031687529582019590820190600101610fcf565b509495945050505050565b8281526040602082015260006110186040830184610fbb565b949350505050565b6000602080838503121561103357600080fd5b825167ffffffffffffffff81111561104a57600080fd5b8301601f8101851361105b57600080fd5b8051611069610ded82610d80565b81815260059190911b8201830190838101908783111561108857600080fd5b928401925b82841015610e2f5783518252928401929084019061108d565b6000828210156110b8576110b8610f03565b500390565b6000602082840312156110cf57600080fd5b5051919050565b6000602082840312156110e857600080fd5b815167ffffffffffffffff81168114610f5457600080fd5b634e487b7160e01b600052601260045260246000fd5b600081600019048311821515161561113057611130610f03565b500290565b6000821982111561114857611148610f03565b500190565b60008261116a57634e487b7160e01b600052601260045260246000fd5b500490565b85815284602082015260a06040820152600061118e60a0830186610fbb565b6001600160a01b0394909416606083015250608001529392505050565b8481526080602082015260006111c46080830186610fbb565b6001600160a01b0394909416604083015250606001529291505056fea26469706673582212207fc09be0744ea7d90754c357a7c9682d21b381c1f8622b496dd6f373d386988564736f6c634300080f0033a26469706673582212203e62874029e3555b7a937a7ef8ad4af1834ac1b78b4d237fd330e27eb990d6df64736f6c634300080f0033" . parse () . expect ("invalid bytecode")
        });
    pub struct DeploymentLandNFT<M>(ethers::contract::Contract<M>);
    impl<M> Clone for DeploymentLandNFT<M> {
        fn clone(&self) -> Self {
            DeploymentLandNFT(self.0.clone())
        }
    }
    impl<M> std::ops::Deref for DeploymentLandNFT<M> {
        type Target = ethers::contract::Contract<M>;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl<M> std::fmt::Debug for DeploymentLandNFT<M> {
        fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
            f.debug_tuple(stringify!(DeploymentLandNFT))
                .field(&self.address())
                .finish()
        }
    }
    impl<M: ethers::providers::Middleware> DeploymentLandNFT<M> {
        #[doc = r" Creates a new contract instance with the specified `ethers`"]
        #[doc = r" client at the given `Address`. The contract derefs to a `ethers::Contract`"]
        #[doc = r" object"]
        pub fn new<T: Into<ethers::core::types::Address>>(
            address: T,
            client: ::std::sync::Arc<M>,
        ) -> Self {
            ethers::contract::Contract::new(address.into(), DEPLOYMENTLANDNFT_ABI.clone(), client)
                .into()
        }
        #[doc = r" Constructs the general purpose `Deployer` instance based on the provided constructor arguments and sends it."]
        #[doc = r" Returns a new instance of a deployer that returns an instance of this contract after sending the transaction"]
        #[doc = r""]
        #[doc = r" Notes:"]
        #[doc = r" 1. If there are no constructor arguments, you should pass `()` as the argument."]
        #[doc = r" 1. The default poll duration is 7 seconds."]
        #[doc = r" 1. The default number of confirmations is 1 block."]
        #[doc = r""]
        #[doc = r""]
        #[doc = r" # Example"]
        #[doc = r""]
        #[doc = r" Generate contract bindings with `abigen!` and deploy a new contract instance."]
        #[doc = r""]
        #[doc = r" *Note*: this requires a `bytecode` and `abi` object in the `greeter.json` artifact."]
        #[doc = r""]
        #[doc = r" ```ignore"]
        #[doc = r" # async fn deploy<M: ethers::providers::Middleware>(client: ::std::sync::Arc<M>) {"]
        #[doc = r#"     abigen!(Greeter,"../greeter.json");"#]
        #[doc = r""]
        #[doc = r#"    let greeter_contract = Greeter::deploy(client, "Hello world!".to_string()).unwrap().send().await.unwrap();"#]
        #[doc = r"    let msg = greeter_contract.greet().call().await.unwrap();"]
        #[doc = r" # }"]
        #[doc = r" ```"]
        pub fn deploy<T: ethers::core::abi::Tokenize>(
            client: ::std::sync::Arc<M>,
            constructor_args: T,
        ) -> ::std::result::Result<
            ethers::contract::builders::ContractDeployer<M, Self>,
            ethers::contract::ContractError<M>,
        > {
            let factory = ethers::contract::ContractFactory::new(
                DEPLOYMENTLANDNFT_ABI.clone(),
                DEPLOYMENTLANDNFT_BYTECODE.clone().into(),
                client,
            );
            let deployer = factory.deploy(constructor_args)?;
            let deployer = ethers::contract::ContractDeployer::new(deployer);
            Ok(deployer)
        }
        #[doc = "Calls the contract's `IS_SCRIPT` (0xf8ccbf47) function"]
        pub fn is_script(&self) -> ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([248, 204, 191, 71], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `dev` (0x91cca3db) function"]
        pub fn dev(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([145, 204, 163, 219], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `price` (0xa035b1fe) function"]
        pub fn price(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([160, 53, 177, 254], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `run` (0xc0406226) function"]
        pub fn run(&self) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([192, 64, 98, 38], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `vm` (0x3a768463) function"]
        pub fn vm(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([58, 118, 132, 99], ())
                .expect("method not found (this should never happen)")
        }
    }
    impl<M: ethers::providers::Middleware> From<ethers::contract::Contract<M>>
        for DeploymentLandNFT<M>
    {
        fn from(contract: ethers::contract::Contract<M>) -> Self {
            Self(contract)
        }
    }
    #[doc = "Container type for all input parameters for the `IS_SCRIPT` function with signature `IS_SCRIPT()` and selector `[248, 204, 191, 71]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(name = "IS_SCRIPT", abi = "IS_SCRIPT()")]
    pub struct IsScriptCall;
    #[doc = "Container type for all input parameters for the `dev` function with signature `dev()` and selector `[145, 204, 163, 219]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(name = "dev", abi = "dev()")]
    pub struct DevCall;
    #[doc = "Container type for all input parameters for the `price` function with signature `price()` and selector `[160, 53, 177, 254]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(name = "price", abi = "price()")]
    pub struct PriceCall;
    #[doc = "Container type for all input parameters for the `run` function with signature `run()` and selector `[192, 64, 98, 38]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(name = "run", abi = "run()")]
    pub struct RunCall;
    #[doc = "Container type for all input parameters for the `vm` function with signature `vm()` and selector `[58, 118, 132, 99]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(name = "vm", abi = "vm()")]
    pub struct VmCall;
    #[derive(Debug, Clone, PartialEq, Eq, ethers :: contract :: EthAbiType)]
    pub enum DeploymentLandNFTCalls {
        IsScript(IsScriptCall),
        Dev(DevCall),
        Price(PriceCall),
        Run(RunCall),
        Vm(VmCall),
    }
    impl ethers::core::abi::AbiDecode for DeploymentLandNFTCalls {
        fn decode(
            data: impl AsRef<[u8]>,
        ) -> ::std::result::Result<Self, ethers::core::abi::AbiError> {
            if let Ok(decoded) =
                <IsScriptCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(DeploymentLandNFTCalls::IsScript(decoded));
            }
            if let Ok(decoded) = <DevCall as ethers::core::abi::AbiDecode>::decode(data.as_ref()) {
                return Ok(DeploymentLandNFTCalls::Dev(decoded));
            }
            if let Ok(decoded) = <PriceCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(DeploymentLandNFTCalls::Price(decoded));
            }
            if let Ok(decoded) = <RunCall as ethers::core::abi::AbiDecode>::decode(data.as_ref()) {
                return Ok(DeploymentLandNFTCalls::Run(decoded));
            }
            if let Ok(decoded) = <VmCall as ethers::core::abi::AbiDecode>::decode(data.as_ref()) {
                return Ok(DeploymentLandNFTCalls::Vm(decoded));
            }
            Err(ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ethers::core::abi::AbiEncode for DeploymentLandNFTCalls {
        fn encode(self) -> Vec<u8> {
            match self {
                DeploymentLandNFTCalls::IsScript(element) => element.encode(),
                DeploymentLandNFTCalls::Dev(element) => element.encode(),
                DeploymentLandNFTCalls::Price(element) => element.encode(),
                DeploymentLandNFTCalls::Run(element) => element.encode(),
                DeploymentLandNFTCalls::Vm(element) => element.encode(),
            }
        }
    }
    impl ::std::fmt::Display for DeploymentLandNFTCalls {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            match self {
                DeploymentLandNFTCalls::IsScript(element) => element.fmt(f),
                DeploymentLandNFTCalls::Dev(element) => element.fmt(f),
                DeploymentLandNFTCalls::Price(element) => element.fmt(f),
                DeploymentLandNFTCalls::Run(element) => element.fmt(f),
                DeploymentLandNFTCalls::Vm(element) => element.fmt(f),
            }
        }
    }
    impl ::std::convert::From<IsScriptCall> for DeploymentLandNFTCalls {
        fn from(var: IsScriptCall) -> Self {
            DeploymentLandNFTCalls::IsScript(var)
        }
    }
    impl ::std::convert::From<DevCall> for DeploymentLandNFTCalls {
        fn from(var: DevCall) -> Self {
            DeploymentLandNFTCalls::Dev(var)
        }
    }
    impl ::std::convert::From<PriceCall> for DeploymentLandNFTCalls {
        fn from(var: PriceCall) -> Self {
            DeploymentLandNFTCalls::Price(var)
        }
    }
    impl ::std::convert::From<RunCall> for DeploymentLandNFTCalls {
        fn from(var: RunCall) -> Self {
            DeploymentLandNFTCalls::Run(var)
        }
    }
    impl ::std::convert::From<VmCall> for DeploymentLandNFTCalls {
        fn from(var: VmCall) -> Self {
            DeploymentLandNFTCalls::Vm(var)
        }
    }
    #[doc = "Container type for all return fields from the `IS_SCRIPT` function with signature `IS_SCRIPT()` and selector `[248, 204, 191, 71]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
        Default,
    )]
    pub struct IsScriptReturn(pub bool);
    #[doc = "Container type for all return fields from the `dev` function with signature `dev()` and selector `[145, 204, 163, 219]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
        Default,
    )]
    pub struct DevReturn(pub ethers::core::types::Address);
    #[doc = "Container type for all return fields from the `price` function with signature `price()` and selector `[160, 53, 177, 254]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
        Default,
    )]
    pub struct PriceReturn(pub ethers::core::types::U256);
    #[doc = "Container type for all return fields from the `vm` function with signature `vm()` and selector `[58, 118, 132, 99]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
        Default,
    )]
    pub struct VmReturn(pub ethers::core::types::Address);
}

pub use deployment_land_nft::*;
#[allow(clippy::too_many_arguments, non_camel_case_types)]
pub mod deployment_land_nft {
    #![allow(clippy::enum_variant_names)]
    #![allow(dead_code)]
    #![allow(clippy::type_complexity)]
    #![allow(unused_imports)]
    use ethers::contract::{
        builders::{ContractCall, Event},
        Contract, Lazy,
    };
    use ethers::core::{
        abi::{Abi, Detokenize, InvalidOutputType, Token, Tokenizable},
        types::*,
    };
    use ethers::providers::Middleware;
    #[doc = "DeploymentLandNFT was auto-generated with ethers-rs Abigen. More information at: https://github.com/gakonst/ethers-rs"]
    use std::sync::Arc;
    pub static DEPLOYMENTLANDNFT_ABI: ethers::contract::Lazy<ethers::core::abi::Abi> =
        ethers::contract::Lazy::new(|| {
            ethers :: core :: utils :: __serde_json :: from_str ("[{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"IS_SCRIPT\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"dev\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"run\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"vm\",\"outputs\":[{\"internalType\":\"contract Vm\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]}]") . expect ("invalid abi")
        });
    #[doc = r" Bytecode of the #name contract"]
    pub static DEPLOYMENTLANDNFT_BYTECODE: ethers::contract::Lazy<ethers::core::types::Bytes> =
        ethers::contract::Lazy::new(|| {
            "0x60806040526000805460ff19166001908117909155662386f26fc10000905534801561002a57600080fd5b5061443e8061003a6000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80633a7684631461005c57806391cca3db14610094578063a035b1fe146100af578063c0406226146100c6578063f8ccbf47146100d0575b600080fd5b610077737109709ecfa91a80626ff3989d68f67f5b1dd12d81565b6040516001600160a01b0390911681526020015b60405180910390f35b6100777327a1876a09581e02e583e002e42ec1322abe965581565b6100b860015481565b60405190815260200161008b565b6100ce6100ed565b005b6000546100dd9060ff1681565b604051901515815260200161008b565b60408051637fb5297f60e01b81529051737109709ecfa91a80626ff3989d68f67f5b1dd12d91637fb5297f91600480830192600092919082900301818387803b15801561013957600080fd5b505af115801561014d573d6000803e3d6000fd5b5050505060007327a1876a09581e02e583e002e42ec1322abe9655600154604051610177906102ca565b6001600160a01b0390921682526020820152604001604051809103906000f0801580156101a8573d6000803e3d6000fd5b50905060007327a1876a09581e02e583e002e42ec1322abe9655826040516101cf906102d7565b6001600160a01b03928316815291166020820152604001604051809103906000f080158015610202573d6000803e3d6000fd5b5060405163f0640d9560e01b81526001600160a01b0380831660048301529192509083169063f0640d9590602401600060405180830381600087803b15801561024a57600080fd5b505af115801561025e573d6000803e3d6000fd5b505060408051633b756e9b60e11b81529051737109709ecfa91a80626ff3989d68f67f5b1dd12d93506376eadd369250600480830192600092919082900301818387803b1580156102ae57600080fd5b505af11580156102c2573d6000803e3d6000fd5b505050505050565b612ddb806102e583390190565b611349806130c08339019056fe608060405260016009553480156200001657600080fd5b5060405162002ddb38038062002ddb833981016040819052620000399162000199565b6040518060400160405280600b81526020016a5265616c696f566572736560a81b815250604051806040016040528060048152602001635256525360e01b81525081600290816200008b91906200027a565b5060036200009a82826200027a565b50506000805550620000ac3362000147565b6008805460ff60a01b191690556001600160a01b038216620000e1576040516397b43c7960e01b815260040160405180910390fd5b600b80546001600160a01b0384166001600160a01b031991821617909155600a805490911633178155600f5560108190556040805180820190915260068152655265616c696f60d01b6020820152600d906200013e90826200027a565b50505062000346565b600880546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60008060408385031215620001ad57600080fd5b82516001600160a01b0381168114620001c557600080fd5b6020939093015192949293505050565b634e487b7160e01b600052604160045260246000fd5b600181811c908216806200020057607f821691505b6020821081036200022157634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200027557600081815260208120601f850160051c81016020861015620002505750805b601f850160051c820191505b8181101562000271578281556001016200025c565b5050505b505050565b81516001600160401b03811115620002965762000296620001d5565b620002ae81620002a78454620001eb565b8462000227565b602080601f831160018114620002e65760008415620002cd5750858301515b600019600386901b1c1916600185901b17855562000271565b600085815260208120601f198616915b828110156200031757888601518255948401946001909101908401620002f6565b5085821015620003365787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b612a8580620003566000396000f3fe60806040526004361061024a5760003560e01c806370a0823111610139578063b88d4fde116100b6578063efaff03c1161007a578063efaff03c146106b1578063efd32973146106e7578063f0640d9514610707578063f2fde38b14610727578063f5f7581b14610747578063f851a4401461076057600080fd5b8063b88d4fde146105f2578063c427e2b514610612578063c457fb3714610628578063c87b56dd14610648578063e985e9c51461066857600080fd5b806395d89b41116100fd57806395d89b411461055f578063a035b1fe14610574578063a22cb4651461058a578063ad5c4648146105aa578063ae4db919146105d257600080fd5b806370a08231146104d7578063715018a6146104f75780638456cb591461050c5780638da5cb5b1461052157806391b7f5ed1461053f57600080fd5b80634390d2a8116101c7578063618b2add1161018b578063618b2add1461045757806361b8ce8c1461046c5780636352211e146104825780636c0360eb146104a2578063704b6c02146104b757600080fd5b80634390d2a8146103b257806348334429146103d2578063599f689c146103f25780635c975abb146104225780635ea1d6f81461044157600080fd5b806318160ddd1161020e57806318160ddd1461031a57806319fac8fd1461033d57806323b872dd1461035d5780633f4ba83a1461037d57806342842e0e1461039257600080fd5b8063019ae5991461025657806301ffc9a71461026b57806306fdde03146102a0578063081812fc146102c2578063095ea7b3146102fa57600080fd5b3661025157005b600080fd5b61026961026436600461217f565b610780565b005b34801561027757600080fd5b5061028b61028636600461228e565b610f60565b60405190151581526020015b60405180910390f35b3480156102ac57600080fd5b506102b5610fb2565b6040516102979190612303565b3480156102ce57600080fd5b506102e26102dd366004612316565b611044565b6040516001600160a01b039091168152602001610297565b34801561030657600080fd5b50610269610315366004612344565b611088565b34801561032657600080fd5b50600154600054035b604051908152602001610297565b34801561034957600080fd5b50610269610358366004612316565b611128565b34801561036957600080fd5b50610269610378366004612370565b6111ae565b34801561038957600080fd5b50610269611346565b34801561039e57600080fd5b506102696103ad366004612370565b6113af565b3480156103be57600080fd5b50600b546102e2906001600160a01b031681565b3480156103de57600080fd5b5061032f6103ed3660046123b1565b6113ca565b3480156103fe57600080fd5b5061028b61040d366004612316565b60136020526000908152604090205460ff1681565b34801561042e57600080fd5b50600854600160a01b900460ff1661028b565b34801561044d57600080fd5b5061032f600f5481565b34801561046357600080fd5b5060115461032f565b34801561047857600080fd5b5061032f600e5481565b34801561048e57600080fd5b506102e261049d366004612316565b61147f565b3480156104ae57600080fd5b506102b561148a565b3480156104c357600080fd5b506102696104d2366004612457565b611518565b3480156104e357600080fd5b5061032f6104f2366004612457565b6115b7565b34801561050357600080fd5b50610269611606565b34801561051857600080fd5b5061026961161a565b34801561052d57600080fd5b506008546001600160a01b03166102e2565b34801561054b57600080fd5b5061026961055a366004612316565b611683565b34801561056b57600080fd5b506102b56116b7565b34801561058057600080fd5b5061032f60105481565b34801561059657600080fd5b506102696105a5366004612482565b6116c6565b3480156105b657600080fd5b506102e273c02aaa39b223fe8d0a0e5c4f27ead9083c756cc281565b3480156105de57600080fd5b506102696105ed366004612457565b61175b565b3480156105fe57600080fd5b5061026961060d3660046124bb565b611804565b34801561061e57600080fd5b5061032f60115481565b34801561063457600080fd5b5061032f610643366004612316565b61184e565b34801561065457600080fd5b506102b5610663366004612316565b6118fc565b34801561067457600080fd5b5061028b61068336600461257f565b6001600160a01b03918216600090815260076020908152604080832093909416825291909152205460ff1690565b3480156106bd57600080fd5b506102e26106cc366004612316565b6014602052600090815260409020546001600160a01b031681565b3480156106f357600080fd5b50600c546102e2906001600160a01b031681565b34801561071357600080fd5b50610269610722366004612457565b61198c565b34801561073357600080fd5b50610269610742366004612457565b611a35565b34801561075357600080fd5b5061032f6402540be40081565b34801561076c57600080fd5b50600a546102e2906001600160a01b031681565b610788611ab0565b6402540be40061079b6001546000540390565b106107b95760405163e74fd80b60e01b815260040160405180910390fd5b8151811515806107c7575034155b15610cf65760408051600280825260608201835260009260208301908036833701905050905073f21661d0d1d76d3ecb8e1b9f1c923dbfffae409781600081518110610815576108156125ad565b60200260200101906001600160a01b031690816001600160a01b03168152505073c02aaa39b223fe8d0a0e5c4f27ead9083c756cc28160018151811061085d5761085d6125ad565b60200260200101906001600160a01b031690816001600160a01b03168152505060006108908360105461064391906125d9565b9050808410156108b357604051631e9acf1760e31b815260040160405180910390fd5b60405163095ea7b360e01b81523060048201526024810185905273f21661d0d1d76d3ecb8e1b9f1c923dbfffae40979063095ea7b3906044016020604051808303816000875af115801561090b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061092f91906125f8565b506040516323b872dd60e01b81523360048201523060248201526044810185905260009073f21661d0d1d76d3ecb8e1b9f1c923dbfffae4097906323b872dd906064016020604051808303816000875af1158015610991573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109b591906125f8565b9050806109d5576040516312171d8360e31b815260040160405180910390fd5b600060646109e48760146125d9565b6109ee919061262b565b60405163095ea7b360e01b8152737a250d5630b4cf539739df2c5dacb4c659f2488d60048201526024810182905290915073f21661d0d1d76d3ecb8e1b9f1c923dbfffae40979063095ea7b3906044016020604051808303816000875af1158015610a5d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a8191906125f8565b50604080516002808252606082018352909160208301908036833701905050935073f21661d0d1d76d3ecb8e1b9f1c923dbfffae409784600081518110610aca57610aca6125ad565b60200260200101906001600160a01b031690816001600160a01b03168152505073c02aaa39b223fe8d0a0e5c4f27ead9083c756cc284600181518110610b1257610b126125ad565b60200260200101906001600160a01b031690816001600160a01b0316815250506000610b3e82866113ca565b600b546040516318cbafe560e01b8152919250737a250d5630b4cf539739df2c5dacb4c659f2488d916318cbafe591610b8b91869186918b916001600160a01b0316904290600401612683565b600060405180830381600087803b158015610ba557600080fd5b505af1158015610bb9573d6000803e3d6000fd5b5050600c5473f21661d0d1d76d3ecb8e1b9f1c923dbfffae4097925063a9059cbb91506001600160a01b03166064610bf28b60506125d9565b610bfc919061262b565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af1158015610c47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c6b91906125f8565b925082610c8b576040516312171d8360e31b815260040160405180910390fd5b610c953387611afd565b8560116000828254610ca791906126bf565b9091555050604051610cba9089906126d7565b6040519081900381209033907ffedaf99886e624862075ed4c59d51e3ec75e512a2ddd085a09a1234f2a486bc790600090a35050505050505050565b6000341180610d03575081155b15610f5b578251601054610d1791906125d9565b341015610d3757604051631e9acf1760e31b815260040160405180910390fd5b600b546001600160a01b03166108fc6064610d533460146125d9565b610d5d919061262b565b6040518115909202916000818181858888f19350505050158015610d85573d6000803e3d6000fd5b5060006064610d953460506125d9565b610d9f919061262b565b604080516002808252606082018352929350600092909160208301908036833701905050905073c02aaa39b223fe8d0a0e5c4f27ead9083c756cc281600081518110610ded57610ded6125ad565b60200260200101906001600160a01b031690816001600160a01b03168152505073f21661d0d1d76d3ecb8e1b9f1c923dbfffae409781600181518110610e3557610e356125ad565b60200260200101906001600160a01b031690816001600160a01b0316815250506000610e6183836113ca565b600c54604051637ff36ab560e01b8152919250737a250d5630b4cf539739df2c5dacb4c659f2488d91637ff36ab5918691610eae91869188916001600160a01b031690429060040161276f565b60006040518083038185885af1158015610ecc573d6000803e3d6000fd5b50505050506040513d6000823e601f3d908101601f19168201604052610ef591908101906127a4565b50610f003385611afd565b8360116000828254610f1291906126bf565b9091555050604051610f259087906126d7565b6040519081900381209033907ffedaf99886e624862075ed4c59d51e3ec75e512a2ddd085a09a1234f2a486bc790600090a35050505b505050565b60006301ffc9a760e01b6001600160e01b031983161480610f9157506380ac58cd60e01b6001600160e01b03198316145b80610fac5750635b5e139f60e01b6001600160e01b03198316145b92915050565b606060028054610fc190612835565b80601f0160208091040260200160405190810160405280929190818152602001828054610fed90612835565b801561103a5780601f1061100f5761010080835404028352916020019161103a565b820191906000526020600020905b81548152906001019060200180831161101d57829003601f168201915b5050505050905090565b600061104f82611b1b565b61106c576040516333d1c03960e21b815260040160405180910390fd5b506000908152600660205260409020546001600160a01b031690565b60006110938261147f565b9050336001600160a01b038216146110cc576110af8133610683565b6110cc576040516367d9dca160e11b815260040160405180910390fd5b60008281526006602052604080822080546001600160a01b0319166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b600f54600a546001600160a01b0316331461115657604051631648fd0160e01b815260040160405180910390fd5b601482111561117857604051637d1dd3df60e11b815260040160405180910390fd5b600f829055604051819083907f74b81a9e0217358c4b0755d3032738dc303e980dde2980905160b1d8e7b68ba690600090a35050565b60006111b982611b42565b9050836001600160a01b0316816001600160a01b0316146111ec5760405162a1148160e81b815260040160405180910390fd5b60008281526006602052604090208054338082146001600160a01b038816909114176112395761121c8633610683565b61123957604051632ce44b5f60e11b815260040160405180910390fd5b6001600160a01b03851661126057604051633a954ecd60e21b815260040160405180910390fd5b801561126b57600082555b6001600160a01b038681166000908152600560205260408082208054600019019055918716808252919020805460010190554260a01b17600160e11b17600085815260046020526040812091909155600160e11b841690036112fd576001840160008181526004602052604081205490036112fb5760005481146112fb5760008181526004602052604090208490555b505b83856001600160a01b0316876001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050505050565b61134e611bb0565b600a546001600160a01b0316331461137957604051631648fd0160e01b815260040160405180910390fd5b611381611c00565b6040516001907fc6cd34d367248623c114617f3cf4e7d54b15f11b158367408ee3b4c0ff1a5e2e90600090a2565b610f5b83838360405180602001604052806000815250611804565b60405163d06ca61f60e01b81526000908190737a250d5630b4cf539739df2c5dacb4c659f2488d9063d06ca61f90611408908790879060040161286f565b600060405180830381865afa158015611425573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261144d91908101906127a4565b9050806001845161145e9190612888565b8151811061146e5761146e6125ad565b602002602001015191505092915050565b6000610fac82611b42565b600d805461149790612835565b80601f01602080910402602001604051908101604052809291908181526020018280546114c390612835565b80156115105780601f106114e557610100808354040283529160200191611510565b820191906000526020600020905b8154815290600101906020018083116114f357829003601f168201915b505050505081565b600a546001600160a01b0316331461154357604051631648fd0160e01b815260040160405180910390fd5b6001600160a01b03811661156a576040516397b43c7960e01b815260040160405180910390fd5b600a80546001600160a01b0319166001600160a01b0383169081179091556040513391907f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f90600090a350565b60006001600160a01b0382166115e0576040516323d3ad8160e21b815260040160405180910390fd5b506001600160a01b031660009081526005602052604090205467ffffffffffffffff1690565b61160e611c55565b6116186000611caf565b565b611622611ab0565b600a546001600160a01b0316331461164d57604051631648fd0160e01b815260040160405180910390fd5b611655611d01565b6040516001907f752d7e161ff5146f80e3820893176eb40532811e5e20400dfdde57455213706a90600090a2565b600a546001600160a01b031633146116ae57604051631648fd0160e01b815260040160405180910390fd5b60108190555b50565b606060038054610fc190612835565b336001600160a01b038316036116ef5760405163b06307db60e01b815260040160405180910390fd5b3360008181526007602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b600b54600a546001600160a01b039182169116331461178d57604051631648fd0160e01b815260040160405180910390fd5b6001600160a01b0382166117b4576040516397b43c7960e01b815260040160405180910390fd5b600b80546001600160a01b0319166001600160a01b03848116918217909255604051918316917ff87e12ba363db684b1b69a530d850a8a3f416932cd031e008ef71e42a1d8845090600090a35050565b61180f8484846111ae565b6001600160a01b0383163b156118485761182b84848484611d44565b611848576040516368d2bf6b60e11b815260040160405180910390fd5b50505050565b600080730b85b3000bef3e26e01428d1b525a532ea7513b89050600080826001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa1580156118a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118cd91906128bb565b506001600160701b039182169350169050816118e982876125d9565b6118f3919061262b565b95945050505050565b606060006119098361147f565b6001600160a01b0316036119305760405163d872946b60e01b815260040160405180910390fd5b6000600d805461193f90612835565b90501161195b5760405180602001604052806000815250610fac565b600d61196683611e30565b604051602001611977929190612927565b60405160208183030381529060405292915050565b600c54600a546001600160a01b03918216911633146119be57604051631648fd0160e01b815260040160405180910390fd5b6001600160a01b0382166119e5576040516397b43c7960e01b815260040160405180910390fd5b600c80546001600160a01b0319166001600160a01b03848116918217909255604051918316917f04c90a5bd107b5b753ce9758599ca56cffaadede0b5f6c4b3a375a5effe208d490600090a35050565b611a3d611c55565b6001600160a01b038116611aa75760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b6116b481611caf565b600854600160a01b900460ff16156116185760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401611a9e565b611b17828260405180602001604052806000815250611f31565b5050565b6000805482108015610fac575050600090815260046020526040902054600160e01b161590565b600081600054811015611b975760008181526004602052604081205490600160e01b82169003611b95575b80600003611b8e575060001901600081815260046020526040902054611b6d565b9392505050565b505b604051636f96cda160e11b815260040160405180910390fd5b600854600160a01b900460ff166116185760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401611a9e565b611c08611bb0565b6008805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6008546001600160a01b031633146116185760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401611a9e565b600880546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b611d09611ab0565b6008805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611c383390565b604051630a85bd0160e11b81526000906001600160a01b0385169063150b7a0290611d799033908990889088906004016129c8565b6020604051808303816000875af1925050508015611db4575060408051601f3d908101601f19168201909252611db191810190612a05565b60015b611e12573d808015611de2576040519150601f19603f3d011682016040523d82523d6000602084013e611de7565b606091505b508051600003611e0a576040516368d2bf6b60e11b815260040160405180910390fd5b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490505b949350505050565b606081600003611e575750506040805180820190915260018152600360fc1b602082015290565b8160005b8115611e815780611e6b81612a22565b9150611e7a9050600a8361262b565b9150611e5b565b60008167ffffffffffffffff811115611e9c57611e9c61209c565b6040519080825280601f01601f191660200182016040528015611ec6576020820181803683370190505b5090505b8415611e2857611edb600183612888565b9150611ee8600a86612a3b565b611ef39060306126bf565b60f81b818381518110611f0857611f086125ad565b60200101906001600160f81b031916908160001a905350611f2a600a8661262b565b9450611eca565b611f3b8383611f9e565b6001600160a01b0383163b15610f5b576000548281035b611f656000868380600101945086611d44565b611f82576040516368d2bf6b60e11b815260040160405180910390fd5b818110611f52578160005414611f9757600080fd5b5050505050565b6000805490829003611fc35760405163b562e8dd60e01b815260040160405180910390fd5b6001600160a01b03831660008181526005602090815260408083208054680100000000000000018802019055848352600490915281206001851460e11b4260a01b178317905582840190839083907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8180a4600183015b81811461207257808360007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef600080a460010161203a565b508160000361209357604051622e076360e81b815260040160405180910390fd5b60005550505050565b634e487b7160e01b600052604160045260246000fd5b6040516080810167ffffffffffffffff811182821017156120d5576120d561209c565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156121045761210461209c565b604052919050565b600067ffffffffffffffff8211156121265761212661209c565b5060051b60200190565b60006040828403121561214257600080fd5b6040516040810181811067ffffffffffffffff821117156121655761216561209c565b604052823581526020928301359281019290925250919050565b600080604080848603121561219357600080fd5b833567ffffffffffffffff8111156121aa57600080fd5b8401601f810186136121bb57600080fd5b803560206121d06121cb8361210c565b6120db565b82815260089290921b830181019181810190898411156121ef57600080fd5b938201935b8385101561226857610100858b03121561220e5760008081fd5b6122166120b2565b6122208b87612130565b815261222e8b888801612130565b8482015261223f8b60808801612130565b878201526122508b60c08801612130565b606082015282526101009490940193908201906121f4565b9997909101359750505050505050565b6001600160e01b0319811681146116b457600080fd5b6000602082840312156122a057600080fd5b8135611b8e81612278565b60005b838110156122c65781810151838201526020016122ae565b838111156118485750506000910152565b600081518084526122ef8160208601602086016122ab565b601f01601f19169290920160200192915050565b602081526000611b8e60208301846122d7565b60006020828403121561232857600080fd5b5035919050565b6001600160a01b03811681146116b457600080fd5b6000806040838503121561235757600080fd5b82356123628161232f565b946020939093013593505050565b60008060006060848603121561238557600080fd5b83356123908161232f565b925060208401356123a08161232f565b929592945050506040919091013590565b600080604083850312156123c457600080fd5b8235915060208084013567ffffffffffffffff8111156123e357600080fd5b8401601f810186136123f457600080fd5b80356124026121cb8261210c565b81815260059190911b8201830190838101908883111561242157600080fd5b928401925b828410156124485783356124398161232f565b82529284019290840190612426565b80955050505050509250929050565b60006020828403121561246957600080fd5b8135611b8e8161232f565b80151581146116b457600080fd5b6000806040838503121561249557600080fd5b82356124a08161232f565b915060208301356124b081612474565b809150509250929050565b600080600080608085870312156124d157600080fd5b84356124dc8161232f565b93506020858101356124ed8161232f565b935060408601359250606086013567ffffffffffffffff8082111561251157600080fd5b818801915088601f83011261252557600080fd5b8135818111156125375761253761209c565b612549601f8201601f191685016120db565b9150808252898482850101111561255f57600080fd5b808484018584013760008482840101525080935050505092959194509250565b6000806040838503121561259257600080fd5b823561259d8161232f565b915060208301356124b08161232f565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60008160001904831182151516156125f3576125f36125c3565b500290565b60006020828403121561260a57600080fd5b8151611b8e81612474565b634e487b7160e01b600052601260045260246000fd5b60008261263a5761263a612615565b500490565b600081518084526020808501945080840160005b838110156126785781516001600160a01b031687529582019590820190600101612653565b509495945050505050565b85815284602082015260a0604082015260006126a260a083018661263f565b6001600160a01b0394909416606083015250608001529392505050565b600082198211156126d2576126d26125c3565b500190565b815160009082906020808601845b838110156127635781518051805187526020908101518188015284820151805160408901520151606087015261274d612734608088016040840151805182526020908101519082015260400190565b6060830151805182526020908101519082015260400190565b50506101009490940193908201906001016126e5565b50929695505050505050565b848152608060208201526000612788608083018661263f565b6001600160a01b03949094166040830152506060015292915050565b600060208083850312156127b757600080fd5b825167ffffffffffffffff8111156127ce57600080fd5b8301601f810185136127df57600080fd5b80516127ed6121cb8261210c565b81815260059190911b8201830190838101908783111561280c57600080fd5b928401925b8284101561282a57835182529284019290840190612811565b979650505050505050565b600181811c9082168061284957607f821691505b60208210810361286957634e487b7160e01b600052602260045260246000fd5b50919050565b828152604060208201526000611e28604083018461263f565b60008282101561289a5761289a6125c3565b500390565b80516001600160701b03811681146128b657600080fd5b919050565b6000806000606084860312156128d057600080fd5b6128d98461289f565b92506128e76020850161289f565b9150604084015163ffffffff8116811461290057600080fd5b809150509250925092565b6000815161291d8185602086016122ab565b9290920192915050565b600080845481600182811c91508083168061294357607f831692505b6020808410820361296257634e487b7160e01b86526022600452602486fd5b818015612976576001811461298b576129b8565b60ff19861689528415158502890196506129b8565b60008b81526020902060005b868110156129b05781548b820152908501908301612997565b505084890196505b5050505050506118f3818561290b565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906129fb908301846122d7565b9695505050505050565b600060208284031215612a1757600080fd5b8151611b8e81612278565b600060018201612a3457612a346125c3565b5060010190565b600082612a4a57612a4a612615565b50069056fea2646970667358221220e9a122c66c8a5c878a8b27625f58a372ec117e268c8ea17bb4554f84bb63807d64736f6c634300080f00336080604052600160005534801561001557600080fd5b50604051611349380380611349833981016040819052610034916100f1565b6001600160a01b0382161580159061005457506001600160a01b03811615155b6100a45760405162461bcd60e51b815260206004820152601660248201527f63616e277420736574207a65726f206164647265737300000000000000000000604482015260640160405180910390fd5b600380546001600160a01b039384166001600160a01b03199182161790915560028054929093169116179055610124565b80516001600160a01b03811681146100ec57600080fd5b919050565b6000806040838503121561010457600080fd5b61010d836100d5565b915061011b602084016100d5565b90509250929050565b611216806101336000396000f3fe60806040526004361061007f5760003560e01c806398d5fdca1161004e57806398d5fdca14610138578063a1acbd7e1461014d578063ad5c46481461016d578063df17dcd91461019557600080fd5b80631fffbe7f1461008b5780634390d2a8146100ad57806348334429146100ea5780638da5cb5b1461011857600080fd5b3661008657005b600080fd5b34801561009757600080fd5b506100ab6100a6366004610da4565b6101a8565b005b3480156100b957600080fd5b506003546100cd906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156100f657600080fd5b5061010a610105366004610e3a565b6103b5565b6040519081526020016100e1565b34801561012457600080fd5b506001546100cd906001600160a01b031681565b34801561014457600080fd5b5061010a61046a565b34801561015957600080fd5b506002546100cd906001600160a01b031681565b34801561017957600080fd5b506100cd73c02aaa39b223fe8d0a0e5c4f27ead9083c756cc281565b6100ab6101a3366004610da4565b610598565b6000546001146101ec5760405162461bcd60e51b815260206004820152600a6024820152695245454e5452414e435960b01b60448201526064015b60405180910390fd5b60026000908155815190816101ff61046a565b02905060005b828110156102f05760025484516001600160a01b03909116906323b872dd903390309088908690811061023a5761023a610eed565b60209081029190910101516040516001600160e01b031960e086901b1681526001600160a01b0393841660048201529290911660248301526044820152606401600060405180830381600087803b15801561029457600080fd5b505af11580156102a8573d6000803e3d6000fd5b5050505042600460008684815181106102c3576102c3610eed565b602002602001015181526020019081526020016000208190555080806102e890610f19565b915050610205565b5060405163a9059cbb60e01b81523360048201526024810182905273f21661d0d1d76d3ecb8e1b9f1c923dbfffae40979063a9059cbb906044016020604051808303816000875af1158015610349573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061036d9190610f32565b507f8b01d96644460f984e6836351bf037940d5db9407477a090a8deabdf241b8495338483426040516103a39493929190610f5b565b60405180910390a15050600160005550565b60405163d06ca61f60e01b81526000908190737a250d5630b4cf539739df2c5dacb4c659f2488d9063d06ca61f906103f39087908790600401610fff565b600060405180830381865afa158015610410573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526104389190810190611020565b9050806001845161044991906110a6565b8151811061045957610459610eed565b602002602001015191505092915050565b6040516370a0823160e01b8152306004820152600090819073f21661d0d1d76d3ecb8e1b9f1c923dbfffae4097906370a0823190602401602060405180830381865afa1580156104be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104e291906110bd565b90506000600260009054906101000a90046001600160a01b03166001600160a01b031663618b2add6040518163ffffffff1660e01b81526004016020604051808303816000875af115801561053b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061055f91906110d6565b67ffffffffffffffff1690506000600a82848161057e5761057e611100565b04600c028161058f5761058f611100565b04949350505050565b6000546001146105d75760405162461bcd60e51b815260206004820152600a6024820152695245454e5452414e435960b01b60448201526064016101e3565b600260009081558151906105e961046a565b6105f39083611116565b905060005b835181101561066e57426004600086848151811061061857610618610eed565b60200260200101518152602001908152602001600020546206978061063d9190611135565b111561065c57604051634d056f6d60e01b815260040160405180910390fd5b8061066681610f19565b9150506105f8565b5060408051600280825260608201835260009260208301908036833701905050905073f21661d0d1d76d3ecb8e1b9f1c923dbfffae4097816000815181106106b8576106b8610eed565b60200260200101906001600160a01b031690816001600160a01b03168152505073c02aaa39b223fe8d0a0e5c4f27ead9083c756cc28160018151811061070057610700610eed565b60200260200101906001600160a01b031690816001600160a01b031681525050346000036109a2576040516370a0823160e01b8152336004820152829073f21661d0d1d76d3ecb8e1b9f1c923dbfffae4097906370a0823190602401602060405180830381865afa158015610779573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061079d91906110bd565b10156107bc57604051630780674d60e11b815260040160405180910390fd5b6040516323b872dd60e01b81523360048201523060248201526044810183905260009073f21661d0d1d76d3ecb8e1b9f1c923dbfffae4097906323b872dd906064016020604051808303816000875af115801561081d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108419190610f32565b9050806108615760405163bfa871c560e01b815260040160405180910390fd5b6000606461087085600a611116565b61087a919061114d565b9050600061088882856103b5565b60405163095ea7b360e01b8152737a250d5630b4cf539739df2c5dacb4c659f2488d60048201526024810184905290915073f21661d0d1d76d3ecb8e1b9f1c923dbfffae40979063095ea7b3906044016020604051808303816000875af11580156108f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061091b9190610f32565b506003546040516318cbafe560e01b8152737a250d5630b4cf539739df2c5dacb4c659f2488d916318cbafe59161096891869186918a916001600160a01b0390911690429060040161116f565b600060405180830381600087803b15801561098257600080fd5b505af1158015610996573d6000803e3d6000fd5b50505050505050610c02565b6000341180610a2157506040516370a0823160e01b815233600482015273f21661d0d1d76d3ecb8e1b9f1c923dbfffae4097906370a0823190602401602060405180830381865afa1580156109fb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a1f91906110bd565b155b15610c02576000610a3283836103b5565b905080341015610a5557604051635b6b73eb60e11b815260040160405180910390fd5b6003546001600160a01b03166108fc610a6f600a3461114d565b6040518115909202916000818181858888f19350505050158015610a97573d6000803e3d6000fd5b506000600a610aa7346009611116565b610ab1919061114d565b604080516002808252606082018352929350600092909160208301908036833701905050905073c02aaa39b223fe8d0a0e5c4f27ead9083c756cc281600081518110610aff57610aff610eed565b60200260200101906001600160a01b031690816001600160a01b03168152505073f21661d0d1d76d3ecb8e1b9f1c923dbfffae409781600181518110610b4757610b47610eed565b60200260200101906001600160a01b031690816001600160a01b0316815250506000610b7383866103b5565b604051637ff36ab560e01b8152909150737a250d5630b4cf539739df2c5dacb4c659f2488d90637ff36ab5908590610bb59085908790309042906004016111ab565b60006040518083038185885af1158015610bd3573d6000803e3d6000fd5b50505050506040513d6000823e601f3d908101601f19168201604052610bfc9190810190611020565b50505050505b60005b83811015610cf05760025485516001600160a01b03909116906342842e0e9030903390899086908110610c3a57610c3a610eed565b60209081029190910101516040516001600160e01b031960e086901b1681526001600160a01b0393841660048201529290911660248301526044820152606401600060405180830381600087803b158015610c9457600080fd5b505af1158015610ca8573d6000803e3d6000fd5b505050504260046000878481518110610cc357610cc3610eed565b60200260200101518152602001908152602001600020819055508080610ce890610f19565b915050610c05565b507f63f6eae93c684489ef48a7c99798f6a2ffce3c3266b9a9e7c291930772f4eec433858442604051610d269493929190610f5b565b60405180910390a1505060016000555050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715610d7857610d78610d39565b604052919050565b600067ffffffffffffffff821115610d9a57610d9a610d39565b5060051b60200190565b60006020808385031215610db757600080fd5b823567ffffffffffffffff811115610dce57600080fd5b8301601f81018513610ddf57600080fd5b8035610df2610ded82610d80565b610d4f565b81815260059190911b82018301908381019087831115610e1157600080fd5b928401925b82841015610e2f57833582529284019290840190610e16565b979650505050505050565b60008060408385031215610e4d57600080fd5b8235915060208084013567ffffffffffffffff811115610e6c57600080fd5b8401601f81018613610e7d57600080fd5b8035610e8b610ded82610d80565b81815260059190911b82018301908381019088831115610eaa57600080fd5b928401925b82841015610ede5783356001600160a01b0381168114610ecf5760008081fd5b82529284019290840190610eaf565b80955050505050509250929050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201610f2b57610f2b610f03565b5060010190565b600060208284031215610f4457600080fd5b81518015158114610f5457600080fd5b9392505050565b6001600160a01b0385168152608060208083018290528551918301829052600091868201919060a0850190845b81811015610fa457845183529383019391830191600101610f88565b505060408501969096525050506060015292915050565b600081518084526020808501945080840160005b83811015610ff45781516001600160a01b031687529582019590820190600101610fcf565b509495945050505050565b8281526040602082015260006110186040830184610fbb565b949350505050565b6000602080838503121561103357600080fd5b825167ffffffffffffffff81111561104a57600080fd5b8301601f8101851361105b57600080fd5b8051611069610ded82610d80565b81815260059190911b8201830190838101908783111561108857600080fd5b928401925b82841015610e2f5783518252928401929084019061108d565b6000828210156110b8576110b8610f03565b500390565b6000602082840312156110cf57600080fd5b5051919050565b6000602082840312156110e857600080fd5b815167ffffffffffffffff81168114610f5457600080fd5b634e487b7160e01b600052601260045260246000fd5b600081600019048311821515161561113057611130610f03565b500290565b6000821982111561114857611148610f03565b500190565b60008261116a57634e487b7160e01b600052601260045260246000fd5b500490565b85815284602082015260a06040820152600061118e60a0830186610fbb565b6001600160a01b0394909416606083015250608001529392505050565b8481526080602082015260006111c46080830186610fbb565b6001600160a01b0394909416604083015250606001529291505056fea26469706673582212203992cf4f1971c54b6a14aadeda9be0b0f5e311fe3d81ecfbc47479eeef73793464736f6c634300080f0033a264697066735822122040aa00a75c001be465eb61a12c405df6e103095426b020811384475cd3ce09be64736f6c634300080f0033" . parse () . expect ("invalid bytecode")
        });
    pub struct DeploymentLandNFT<M>(ethers::contract::Contract<M>);
    impl<M> Clone for DeploymentLandNFT<M> {
        fn clone(&self) -> Self {
            DeploymentLandNFT(self.0.clone())
        }
    }
    impl<M> std::ops::Deref for DeploymentLandNFT<M> {
        type Target = ethers::contract::Contract<M>;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl<M: ethers::providers::Middleware> std::fmt::Debug for DeploymentLandNFT<M> {
        fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
            f.debug_tuple(stringify!(DeploymentLandNFT))
                .field(&self.address())
                .finish()
        }
    }
    impl<M: ethers::providers::Middleware> DeploymentLandNFT<M> {
        #[doc = r" Creates a new contract instance with the specified `ethers`"]
        #[doc = r" client at the given `Address`. The contract derefs to a `ethers::Contract`"]
        #[doc = r" object"]
        pub fn new<T: Into<ethers::core::types::Address>>(
            address: T,
            client: ::std::sync::Arc<M>,
        ) -> Self {
            ethers::contract::Contract::new(address.into(), DEPLOYMENTLANDNFT_ABI.clone(), client)
                .into()
        }
        #[doc = r" Constructs the general purpose `Deployer` instance based on the provided constructor arguments and sends it."]
        #[doc = r" Returns a new instance of a deployer that returns an instance of this contract after sending the transaction"]
        #[doc = r""]
        #[doc = r" Notes:"]
        #[doc = r" 1. If there are no constructor arguments, you should pass `()` as the argument."]
        #[doc = r" 1. The default poll duration is 7 seconds."]
        #[doc = r" 1. The default number of confirmations is 1 block."]
        #[doc = r""]
        #[doc = r""]
        #[doc = r" # Example"]
        #[doc = r""]
        #[doc = r" Generate contract bindings with `abigen!` and deploy a new contract instance."]
        #[doc = r""]
        #[doc = r" *Note*: this requires a `bytecode` and `abi` object in the `greeter.json` artifact."]
        #[doc = r""]
        #[doc = r" ```ignore"]
        #[doc = r" # async fn deploy<M: ethers::providers::Middleware>(client: ::std::sync::Arc<M>) {"]
        #[doc = r#"     abigen!(Greeter,"../greeter.json");"#]
        #[doc = r""]
        #[doc = r#"    let greeter_contract = Greeter::deploy(client, "Hello world!".to_string()).unwrap().send().await.unwrap();"#]
        #[doc = r"    let msg = greeter_contract.greet().call().await.unwrap();"]
        #[doc = r" # }"]
        #[doc = r" ```"]
        pub fn deploy<T: ethers::core::abi::Tokenize>(
            client: ::std::sync::Arc<M>,
            constructor_args: T,
        ) -> ::std::result::Result<
            ethers::contract::builders::ContractDeployer<M, Self>,
            ethers::contract::ContractError<M>,
        > {
            let factory = ethers::contract::ContractFactory::new(
                DEPLOYMENTLANDNFT_ABI.clone(),
                DEPLOYMENTLANDNFT_BYTECODE.clone().into(),
                client,
            );
            let deployer = factory.deploy(constructor_args)?;
            let deployer = ethers::contract::ContractDeployer::new(deployer);
            Ok(deployer)
        }
        #[doc = "Calls the contract's `IS_SCRIPT` (0xf8ccbf47) function"]
        pub fn is_script(&self) -> ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([248, 204, 191, 71], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `dev` (0x91cca3db) function"]
        pub fn dev(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([145, 204, 163, 219], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `price` (0xa035b1fe) function"]
        pub fn price(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([160, 53, 177, 254], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `run` (0xc0406226) function"]
        pub fn run(&self) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([192, 64, 98, 38], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `vm` (0x3a768463) function"]
        pub fn vm(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([58, 118, 132, 99], ())
                .expect("method not found (this should never happen)")
        }
    }
    impl<M: ethers::providers::Middleware> From<ethers::contract::Contract<M>>
        for DeploymentLandNFT<M>
    {
        fn from(contract: ethers::contract::Contract<M>) -> Self {
            Self(contract)
        }
    }
    #[doc = "Container type for all input parameters for the `IS_SCRIPT` function with signature `IS_SCRIPT()` and selector `[248, 204, 191, 71]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(name = "IS_SCRIPT", abi = "IS_SCRIPT()")]
    pub struct IsScriptCall;
    #[doc = "Container type for all input parameters for the `dev` function with signature `dev()` and selector `[145, 204, 163, 219]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(name = "dev", abi = "dev()")]
    pub struct DevCall;
    #[doc = "Container type for all input parameters for the `price` function with signature `price()` and selector `[160, 53, 177, 254]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(name = "price", abi = "price()")]
    pub struct PriceCall;
    #[doc = "Container type for all input parameters for the `run` function with signature `run()` and selector `[192, 64, 98, 38]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(name = "run", abi = "run()")]
    pub struct RunCall;
    #[doc = "Container type for all input parameters for the `vm` function with signature `vm()` and selector `[58, 118, 132, 99]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(name = "vm", abi = "vm()")]
    pub struct VmCall;
    #[derive(Debug, Clone, PartialEq, Eq, ethers :: contract :: EthAbiType)]
    pub enum DeploymentLandNFTCalls {
        IsScript(IsScriptCall),
        Dev(DevCall),
        Price(PriceCall),
        Run(RunCall),
        Vm(VmCall),
    }
    impl ethers::core::abi::AbiDecode for DeploymentLandNFTCalls {
        fn decode(
            data: impl AsRef<[u8]>,
        ) -> ::std::result::Result<Self, ethers::core::abi::AbiError> {
            if let Ok(decoded) =
                <IsScriptCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(DeploymentLandNFTCalls::IsScript(decoded));
            }
            if let Ok(decoded) = <DevCall as ethers::core::abi::AbiDecode>::decode(data.as_ref()) {
                return Ok(DeploymentLandNFTCalls::Dev(decoded));
            }
            if let Ok(decoded) = <PriceCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(DeploymentLandNFTCalls::Price(decoded));
            }
            if let Ok(decoded) = <RunCall as ethers::core::abi::AbiDecode>::decode(data.as_ref()) {
                return Ok(DeploymentLandNFTCalls::Run(decoded));
            }
            if let Ok(decoded) = <VmCall as ethers::core::abi::AbiDecode>::decode(data.as_ref()) {
                return Ok(DeploymentLandNFTCalls::Vm(decoded));
            }
            Err(ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ethers::core::abi::AbiEncode for DeploymentLandNFTCalls {
        fn encode(self) -> Vec<u8> {
            match self {
                DeploymentLandNFTCalls::IsScript(element) => element.encode(),
                DeploymentLandNFTCalls::Dev(element) => element.encode(),
                DeploymentLandNFTCalls::Price(element) => element.encode(),
                DeploymentLandNFTCalls::Run(element) => element.encode(),
                DeploymentLandNFTCalls::Vm(element) => element.encode(),
            }
        }
    }
    impl ::std::fmt::Display for DeploymentLandNFTCalls {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            match self {
                DeploymentLandNFTCalls::IsScript(element) => element.fmt(f),
                DeploymentLandNFTCalls::Dev(element) => element.fmt(f),
                DeploymentLandNFTCalls::Price(element) => element.fmt(f),
                DeploymentLandNFTCalls::Run(element) => element.fmt(f),
                DeploymentLandNFTCalls::Vm(element) => element.fmt(f),
            }
        }
    }
    impl ::std::convert::From<IsScriptCall> for DeploymentLandNFTCalls {
        fn from(var: IsScriptCall) -> Self {
            DeploymentLandNFTCalls::IsScript(var)
        }
    }
    impl ::std::convert::From<DevCall> for DeploymentLandNFTCalls {
        fn from(var: DevCall) -> Self {
            DeploymentLandNFTCalls::Dev(var)
        }
    }
    impl ::std::convert::From<PriceCall> for DeploymentLandNFTCalls {
        fn from(var: PriceCall) -> Self {
            DeploymentLandNFTCalls::Price(var)
        }
    }
    impl ::std::convert::From<RunCall> for DeploymentLandNFTCalls {
        fn from(var: RunCall) -> Self {
            DeploymentLandNFTCalls::Run(var)
        }
    }
    impl ::std::convert::From<VmCall> for DeploymentLandNFTCalls {
        fn from(var: VmCall) -> Self {
            DeploymentLandNFTCalls::Vm(var)
        }
    }
    #[doc = "Container type for all return fields from the `IS_SCRIPT` function with signature `IS_SCRIPT()` and selector `[248, 204, 191, 71]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
        Default,
    )]
    pub struct IsScriptReturn(pub bool);
    #[doc = "Container type for all return fields from the `dev` function with signature `dev()` and selector `[145, 204, 163, 219]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
        Default,
    )]
    pub struct DevReturn(pub ethers::core::types::Address);
    #[doc = "Container type for all return fields from the `price` function with signature `price()` and selector `[160, 53, 177, 254]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
        Default,
    )]
    pub struct PriceReturn(pub ethers::core::types::U256);
    #[doc = "Container type for all return fields from the `vm` function with signature `vm()` and selector `[58, 118, 132, 99]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
        Default,
    )]
    pub struct VmReturn(pub ethers::core::types::Address);
}

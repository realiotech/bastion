pub use floki_grow::*;
#[allow(clippy::too_many_arguments, non_camel_case_types)]
pub mod floki_grow {
    #![allow(clippy::enum_variant_names)]
    #![allow(dead_code)]
    #![allow(clippy::type_complexity)]
    #![allow(unused_imports)]
    use ethers::contract::{
        builders::{ContractCall, Event},
        Contract, Lazy,
    };
    use ethers::core::{
        abi::{Abi, Detokenize, InvalidOutputType, Token, Tokenizable},
        types::*,
    };
    use ethers::providers::Middleware;
    #[doc = "FlokiGrow was auto-generated with ethers-rs Abigen. More information at: https://github.com/gakonst/ethers-rs"]
    use std::sync::Arc;
    pub static FLOKIGROW_ABI: ethers::contract::Lazy<ethers::core::abi::Abi> =
        ethers::contract::Lazy::new(|| {
            ethers :: core :: utils :: __serde_json :: from_str ("[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"routerAddress\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"Approval\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[],\"type\":\"event\",\"name\":\"FeesChanged\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\",\"components\":[],\"indexed\":true}],\"type\":\"event\",\"name\":\"OwnershipTransferred\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"Transfer\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oldRouter\",\"type\":\"address\",\"components\":[],\"indexed\":false},{\"internalType\":\"address\",\"name\":\"newRouter\",\"type\":\"address\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"UpdatedRouter\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\",\"components\":[]},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"airdropTokens\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"allowedTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\",\"components\":[]},{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"bulkExcludeFee\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\",\"components\":[]},{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"bulkIsBlacklisted\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"coolDownEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"coolDownTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\",\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"donationWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"excludeFromFee\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"excludeFromReward\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"genesis_block\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"includeInFee\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"includeInReward\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"isExcludedFromReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"marketingWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"maxBuyLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"maxSellLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"maxWalletLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\",\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"bool\",\"name\":\"deductTransferRfi\",\"type\":\"bool\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"reflectionFromToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"renounceOwnership\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddr\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"rescueAnyBEP20Tokens\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"weiAmount\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"rescueBNB\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IRouter\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"sellTaxes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rfi\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"marketing\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"donation\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rfi\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"_marketing\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"_liquidity\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"_donation\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"setSellTaxes\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rfi\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"_marketing\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"_liquidity\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"_donation\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"setTaxes\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"setTradingStatus\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"swapTokensAtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\",\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"taxes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rfi\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"marketing\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"donation\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"totFeesPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rfi\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"marketing\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"donation\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"tradingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"transferOwnership\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"updateAllowedTransfer\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"updateCooldown\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"updateDonationWallet\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"updateIsBlacklisted\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"updateMarketingWallet\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxBuy\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"maxSell\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"updateMaxTxLimit\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"updateMaxWalletlimit\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRouter\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"newPair\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"updateRouterAndPair\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"updateSwapEnabled\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"updateSwapTokensAtAmount\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"payable\",\"type\":\"receive\",\"outputs\":[]}]") . expect ("invalid abi")
        });
    #[doc = r" Bytecode of the #name contract"]
    pub static FLOKIGROW_BYTECODE: ethers::contract::Lazy<ethers::core::types::Bytes> =
        ethers::contract::Lazy::new(|| {
            "" . parse () . expect ("invalid bytecode")
        });
    pub struct FlokiGrow<M>(ethers::contract::Contract<M>);
    impl<M> Clone for FlokiGrow<M> {
        fn clone(&self) -> Self {
            FlokiGrow(self.0.clone())
        }
    }
    impl<M> std::ops::Deref for FlokiGrow<M> {
        type Target = ethers::contract::Contract<M>;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl<M: ethers::providers::Middleware> std::fmt::Debug for FlokiGrow<M> {
        fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
            f.debug_tuple(stringify!(FlokiGrow))
                .field(&self.address())
                .finish()
        }
    }
    impl<M: ethers::providers::Middleware> FlokiGrow<M> {
        #[doc = r" Creates a new contract instance with the specified `ethers`"]
        #[doc = r" client at the given `Address`. The contract derefs to a `ethers::Contract`"]
        #[doc = r" object"]
        pub fn new<T: Into<ethers::core::types::Address>>(
            address: T,
            client: ::std::sync::Arc<M>,
        ) -> Self {
            ethers::contract::Contract::new(address.into(), FLOKIGROW_ABI.clone(), client).into()
        }
        #[doc = r" Constructs the general purpose `Deployer` instance based on the provided constructor arguments and sends it."]
        #[doc = r" Returns a new instance of a deployer that returns an instance of this contract after sending the transaction"]
        #[doc = r""]
        #[doc = r" Notes:"]
        #[doc = r" 1. If there are no constructor arguments, you should pass `()` as the argument."]
        #[doc = r" 1. The default poll duration is 7 seconds."]
        #[doc = r" 1. The default number of confirmations is 1 block."]
        #[doc = r""]
        #[doc = r""]
        #[doc = r" # Example"]
        #[doc = r""]
        #[doc = r" Generate contract bindings with `abigen!` and deploy a new contract instance."]
        #[doc = r""]
        #[doc = r" *Note*: this requires a `bytecode` and `abi` object in the `greeter.json` artifact."]
        #[doc = r""]
        #[doc = r" ```ignore"]
        #[doc = r" # async fn deploy<M: ethers::providers::Middleware>(client: ::std::sync::Arc<M>) {"]
        #[doc = r#"     abigen!(Greeter,"../greeter.json");"#]
        #[doc = r""]
        #[doc = r#"    let greeter_contract = Greeter::deploy(client, "Hello world!".to_string()).unwrap().send().await.unwrap();"#]
        #[doc = r"    let msg = greeter_contract.greet().call().await.unwrap();"]
        #[doc = r" # }"]
        #[doc = r" ```"]
        pub fn deploy<T: ethers::core::abi::Tokenize>(
            client: ::std::sync::Arc<M>,
            constructor_args: T,
        ) -> ::std::result::Result<
            ethers::contract::builders::ContractDeployer<M, Self>,
            ethers::contract::ContractError<M>,
        > {
            let factory = ethers::contract::ContractFactory::new(
                FLOKIGROW_ABI.clone(),
                FLOKIGROW_BYTECODE.clone().into(),
                client,
            );
            let deployer = factory.deploy(constructor_args)?;
            let deployer = ethers::contract::ContractDeployer::new(deployer);
            Ok(deployer)
        }
        #[doc = "Calls the contract's `airdropTokens` (0x706f6937) function"]
        pub fn airdrop_tokens(
            &self,
            accounts: ::std::vec::Vec<ethers::core::types::Address>,
            amounts: ::std::vec::Vec<ethers::core::types::U256>,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([112, 111, 105, 55], (accounts, amounts))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `allowance` (0xdd62ed3e) function"]
        pub fn allowance(
            &self,
            owner: ethers::core::types::Address,
            spender: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([221, 98, 237, 62], (owner, spender))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `allowedTransfer` (0x62695eae) function"]
        pub fn allowed_transfer(
            &self,
            p0: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([98, 105, 94, 174], p0)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `approve` (0x095ea7b3) function"]
        pub fn approve(
            &self,
            spender: ethers::core::types::Address,
            amount: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([9, 94, 167, 179], (spender, amount))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `balanceOf` (0x70a08231) function"]
        pub fn balance_of(
            &self,
            account: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([112, 160, 130, 49], account)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `bulkExcludeFee` (0x8e2839ff) function"]
        pub fn bulk_exclude_fee(
            &self,
            accounts: ::std::vec::Vec<ethers::core::types::Address>,
            state: bool,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([142, 40, 57, 255], (accounts, state))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `bulkIsBlacklisted` (0x13f97a8e) function"]
        pub fn bulk_is_blacklisted(
            &self,
            accounts: ::std::vec::Vec<ethers::core::types::Address>,
            state: bool,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([19, 249, 122, 142], (accounts, state))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `coolDownEnabled` (0xee36e359) function"]
        pub fn cool_down_enabled(&self) -> ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([238, 54, 227, 89], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `coolDownTime` (0xd2ce0db2) function"]
        pub fn cool_down_time(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([210, 206, 13, 178], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `decimals` (0x313ce567) function"]
        pub fn decimals(&self) -> ethers::contract::builders::ContractCall<M, u8> {
            self.0
                .method_hash([49, 60, 229, 103], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `decreaseAllowance` (0xa457c2d7) function"]
        pub fn decrease_allowance(
            &self,
            spender: ethers::core::types::Address,
            subtracted_value: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([164, 87, 194, 215], (spender, subtracted_value))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `donationWallet` (0xe7b94df4) function"]
        pub fn donation_wallet(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([231, 185, 77, 244], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `excludeFromFee` (0x437823ec) function"]
        pub fn exclude_from_fee(
            &self,
            account: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([67, 120, 35, 236], account)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `excludeFromReward` (0x52390c02) function"]
        pub fn exclude_from_reward(
            &self,
            account: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([82, 57, 12, 2], account)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `genesis_block` (0x274a533c) function"]
        pub fn genesis_block(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([39, 74, 83, 60], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `includeInFee` (0xea2f0b37) function"]
        pub fn include_in_fee(
            &self,
            account: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([234, 47, 11, 55], account)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `includeInReward` (0x3685d419) function"]
        pub fn include_in_reward(
            &self,
            account: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([54, 133, 212, 25], account)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `increaseAllowance` (0x39509351) function"]
        pub fn increase_allowance(
            &self,
            spender: ethers::core::types::Address,
            added_value: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([57, 80, 147, 81], (spender, added_value))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `isExcludedFromFee` (0x5342acb4) function"]
        pub fn is_excluded_from_fee(
            &self,
            account: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([83, 66, 172, 180], account)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `isExcludedFromReward` (0x88f82020) function"]
        pub fn is_excluded_from_reward(
            &self,
            account: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([136, 248, 32, 32], account)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `marketingWallet` (0x75f0a874) function"]
        pub fn marketing_wallet(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([117, 240, 168, 116], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `maxBuyLimit` (0x6aa5b37f) function"]
        pub fn max_buy_limit(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([106, 165, 179, 127], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `maxSellLimit` (0x652e2f04) function"]
        pub fn max_sell_limit(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([101, 46, 47, 4], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `maxWalletLimit` (0x66a88d96) function"]
        pub fn max_wallet_limit(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([102, 168, 141, 150], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `name` (0x06fdde03) function"]
        pub fn name(&self) -> ethers::contract::builders::ContractCall<M, String> {
            self.0
                .method_hash([6, 253, 222, 3], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `owner` (0x8da5cb5b) function"]
        pub fn owner(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([141, 165, 203, 91], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `pair` (0xa8aa1b31) function"]
        pub fn pair(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([168, 170, 27, 49], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `reflectionFromToken` (0x4549b039) function"]
        pub fn reflection_from_token(
            &self,
            t_amount: ethers::core::types::U256,
            deduct_transfer_rfi: bool,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([69, 73, 176, 57], (t_amount, deduct_transfer_rfi))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `renounceOwnership` (0x715018a6) function"]
        pub fn renounce_ownership(&self) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([113, 80, 24, 166], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `rescueAnyBEP20Tokens` (0x47c23092) function"]
        pub fn rescue_any_bep20_tokens(
            &self,
            token_addr: ethers::core::types::Address,
            to: ethers::core::types::Address,
            amount: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([71, 194, 48, 146], (token_addr, to, amount))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `rescueBNB` (0x441b1d30) function"]
        pub fn rescue_bnb(
            &self,
            wei_amount: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([68, 27, 29, 48], wei_amount)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `router` (0xf887ea40) function"]
        pub fn router(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([248, 135, 234, 64], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `sellTaxes` (0xf66895a3) function"]
        pub fn sell_taxes(
            &self,
        ) -> ethers::contract::builders::ContractCall<
            M,
            (
                ethers::core::types::U256,
                ethers::core::types::U256,
                ethers::core::types::U256,
                ethers::core::types::U256,
            ),
        > {
            self.0
                .method_hash([246, 104, 149, 163], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `setSellTaxes` (0xf480fec2) function"]
        pub fn set_sell_taxes(
            &self,
            rfi: ethers::core::types::U256,
            marketing: ethers::core::types::U256,
            liquidity: ethers::core::types::U256,
            donation: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([244, 128, 254, 194], (rfi, marketing, liquidity, donation))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `setTaxes` (0xa12a7d61) function"]
        pub fn set_taxes(
            &self,
            rfi: ethers::core::types::U256,
            marketing: ethers::core::types::U256,
            liquidity: ethers::core::types::U256,
            donation: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([161, 42, 125, 97], (rfi, marketing, liquidity, donation))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `setTradingStatus` (0x379ba1d9) function"]
        pub fn set_trading_status(
            &self,
            state: bool,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([55, 155, 161, 217], state)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `swapEnabled` (0x6ddd1713) function"]
        pub fn swap_enabled(&self) -> ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([109, 221, 23, 19], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `swapTokensAtAmount` (0xe2f45605) function"]
        pub fn swap_tokens_at_amount(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([226, 244, 86, 5], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `symbol` (0x95d89b41) function"]
        pub fn symbol(&self) -> ethers::contract::builders::ContractCall<M, String> {
            self.0
                .method_hash([149, 216, 155, 65], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `taxes` (0x728f8eea) function"]
        pub fn taxes(
            &self,
        ) -> ethers::contract::builders::ContractCall<
            M,
            (
                ethers::core::types::U256,
                ethers::core::types::U256,
                ethers::core::types::U256,
                ethers::core::types::U256,
            ),
        > {
            self.0
                .method_hash([114, 143, 142, 234], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `tokenFromReflection` (0x2d838119) function"]
        pub fn token_from_reflection(
            &self,
            r_amount: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([45, 131, 129, 25], r_amount)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `totFeesPaid` (0x9ba5e4d5) function"]
        pub fn tot_fees_paid(
            &self,
        ) -> ethers::contract::builders::ContractCall<
            M,
            (
                ethers::core::types::U256,
                ethers::core::types::U256,
                ethers::core::types::U256,
                ethers::core::types::U256,
            ),
        > {
            self.0
                .method_hash([155, 165, 228, 213], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `totalSupply` (0x18160ddd) function"]
        pub fn total_supply(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([24, 22, 13, 221], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `tradingEnabled` (0x4ada218b) function"]
        pub fn trading_enabled(&self) -> ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([74, 218, 33, 139], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `transfer` (0xa9059cbb) function"]
        pub fn transfer(
            &self,
            recipient: ethers::core::types::Address,
            amount: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([169, 5, 156, 187], (recipient, amount))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `transferFrom` (0x23b872dd) function"]
        pub fn transfer_from(
            &self,
            sender: ethers::core::types::Address,
            recipient: ethers::core::types::Address,
            amount: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([35, 184, 114, 221], (sender, recipient, amount))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `transferOwnership` (0xf2fde38b) function"]
        pub fn transfer_ownership(
            &self,
            new_owner: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([242, 253, 227, 139], new_owner)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `updateAllowedTransfer` (0xb5c57145) function"]
        pub fn update_allowed_transfer(
            &self,
            account: ethers::core::types::Address,
            state: bool,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([181, 197, 113, 69], (account, state))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `updateCooldown` (0xe517f2b9) function"]
        pub fn update_cooldown(
            &self,
            state: bool,
            time: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([229, 23, 242, 185], (state, time))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `updateDonationWallet` (0x2a088da6) function"]
        pub fn update_donation_wallet(
            &self,
            new_wallet: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([42, 8, 141, 166], new_wallet)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `updateIsBlacklisted` (0x5b24ea5e) function"]
        pub fn update_is_blacklisted(
            &self,
            account: ethers::core::types::Address,
            state: bool,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([91, 36, 234, 94], (account, state))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `updateMarketingWallet` (0xaacebbe3) function"]
        pub fn update_marketing_wallet(
            &self,
            new_wallet: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([170, 206, 187, 227], new_wallet)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `updateMaxTxLimit` (0x59759f61) function"]
        pub fn update_max_tx_limit(
            &self,
            max_buy: ethers::core::types::U256,
            max_sell: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([89, 117, 159, 97], (max_buy, max_sell))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `updateMaxWalletlimit` (0xd8672e51) function"]
        pub fn update_max_walletlimit(
            &self,
            amount: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([216, 103, 46, 81], amount)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `updateRouterAndPair` (0x40b28c2f) function"]
        pub fn update_router_and_pair(
            &self,
            new_router: ethers::core::types::Address,
            new_pair: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([64, 178, 140, 47], (new_router, new_pair))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `updateSwapEnabled` (0x924de9b7) function"]
        pub fn update_swap_enabled(
            &self,
            enabled: bool,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([146, 77, 233, 183], enabled)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `updateSwapTokensAtAmount` (0xd257b34f) function"]
        pub fn update_swap_tokens_at_amount(
            &self,
            amount: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([210, 87, 179, 79], amount)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Gets the contract's `Approval` event"]
        pub fn approval_filter(&self) -> ethers::contract::builders::Event<M, ApprovalFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `FeesChanged` event"]
        pub fn fees_changed_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, FeesChangedFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `OwnershipTransferred` event"]
        pub fn ownership_transferred_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, OwnershipTransferredFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `Transfer` event"]
        pub fn transfer_filter(&self) -> ethers::contract::builders::Event<M, TransferFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `UpdatedRouter` event"]
        pub fn updated_router_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, UpdatedRouterFilter> {
            self.0.event()
        }
        #[doc = r" Returns an [`Event`](#ethers_contract::builders::Event) builder for all events of this contract"]
        pub fn events(&self) -> ethers::contract::builders::Event<M, FlokiGrowEvents> {
            self.0.event_with_filter(Default::default())
        }
    }
    impl<M: ethers::providers::Middleware> From<ethers::contract::Contract<M>> for FlokiGrow<M> {
        fn from(contract: ethers::contract::Contract<M>) -> Self {
            Self(contract)
        }
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "Approval", abi = "Approval(address,address,uint256)")]
    pub struct ApprovalFilter {
        #[ethevent(indexed)]
        pub owner: ethers::core::types::Address,
        #[ethevent(indexed)]
        pub spender: ethers::core::types::Address,
        pub value: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "FeesChanged", abi = "FeesChanged()")]
    pub struct FeesChangedFilter();
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(
        name = "OwnershipTransferred",
        abi = "OwnershipTransferred(address,address)"
    )]
    pub struct OwnershipTransferredFilter {
        #[ethevent(indexed)]
        pub previous_owner: ethers::core::types::Address,
        #[ethevent(indexed)]
        pub new_owner: ethers::core::types::Address,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "Transfer", abi = "Transfer(address,address,uint256)")]
    pub struct TransferFilter {
        #[ethevent(indexed)]
        pub from: ethers::core::types::Address,
        #[ethevent(indexed)]
        pub to: ethers::core::types::Address,
        pub value: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "UpdatedRouter", abi = "UpdatedRouter(address,address)")]
    pub struct UpdatedRouterFilter {
        pub old_router: ethers::core::types::Address,
        pub new_router: ethers::core::types::Address,
    }
    #[derive(Debug, Clone, PartialEq, Eq, ethers :: contract :: EthAbiType)]
    pub enum FlokiGrowEvents {
        ApprovalFilter(ApprovalFilter),
        FeesChangedFilter(FeesChangedFilter),
        OwnershipTransferredFilter(OwnershipTransferredFilter),
        TransferFilter(TransferFilter),
        UpdatedRouterFilter(UpdatedRouterFilter),
    }
    impl ethers::contract::EthLogDecode for FlokiGrowEvents {
        fn decode_log(
            log: &ethers::core::abi::RawLog,
        ) -> ::std::result::Result<Self, ethers::core::abi::Error>
        where
            Self: Sized,
        {
            if let Ok(decoded) = ApprovalFilter::decode_log(log) {
                return Ok(FlokiGrowEvents::ApprovalFilter(decoded));
            }
            if let Ok(decoded) = FeesChangedFilter::decode_log(log) {
                return Ok(FlokiGrowEvents::FeesChangedFilter(decoded));
            }
            if let Ok(decoded) = OwnershipTransferredFilter::decode_log(log) {
                return Ok(FlokiGrowEvents::OwnershipTransferredFilter(decoded));
            }
            if let Ok(decoded) = TransferFilter::decode_log(log) {
                return Ok(FlokiGrowEvents::TransferFilter(decoded));
            }
            if let Ok(decoded) = UpdatedRouterFilter::decode_log(log) {
                return Ok(FlokiGrowEvents::UpdatedRouterFilter(decoded));
            }
            Err(ethers::core::abi::Error::InvalidData)
        }
    }
    impl ::std::fmt::Display for FlokiGrowEvents {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            match self {
                FlokiGrowEvents::ApprovalFilter(element) => element.fmt(f),
                FlokiGrowEvents::FeesChangedFilter(element) => element.fmt(f),
                FlokiGrowEvents::OwnershipTransferredFilter(element) => element.fmt(f),
                FlokiGrowEvents::TransferFilter(element) => element.fmt(f),
                FlokiGrowEvents::UpdatedRouterFilter(element) => element.fmt(f),
            }
        }
    }
    #[doc = "Container type for all input parameters for the `airdropTokens` function with signature `airdropTokens(address[],uint256[])` and selector `[112, 111, 105, 55]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "airdropTokens", abi = "airdropTokens(address[],uint256[])")]
    pub struct AirdropTokensCall {
        pub accounts: ::std::vec::Vec<ethers::core::types::Address>,
        pub amounts: ::std::vec::Vec<ethers::core::types::U256>,
    }
    #[doc = "Container type for all input parameters for the `allowance` function with signature `allowance(address,address)` and selector `[221, 98, 237, 62]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "allowance", abi = "allowance(address,address)")]
    pub struct AllowanceCall {
        pub owner: ethers::core::types::Address,
        pub spender: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `allowedTransfer` function with signature `allowedTransfer(address)` and selector `[98, 105, 94, 174]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "allowedTransfer", abi = "allowedTransfer(address)")]
    pub struct AllowedTransferCall(pub ethers::core::types::Address);
    #[doc = "Container type for all input parameters for the `approve` function with signature `approve(address,uint256)` and selector `[9, 94, 167, 179]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "approve", abi = "approve(address,uint256)")]
    pub struct ApproveCall {
        pub spender: ethers::core::types::Address,
        pub amount: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `balanceOf` function with signature `balanceOf(address)` and selector `[112, 160, 130, 49]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "balanceOf", abi = "balanceOf(address)")]
    pub struct BalanceOfCall {
        pub account: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `bulkExcludeFee` function with signature `bulkExcludeFee(address[],bool)` and selector `[142, 40, 57, 255]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "bulkExcludeFee", abi = "bulkExcludeFee(address[],bool)")]
    pub struct BulkExcludeFeeCall {
        pub accounts: ::std::vec::Vec<ethers::core::types::Address>,
        pub state: bool,
    }
    #[doc = "Container type for all input parameters for the `bulkIsBlacklisted` function with signature `bulkIsBlacklisted(address[],bool)` and selector `[19, 249, 122, 142]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "bulkIsBlacklisted", abi = "bulkIsBlacklisted(address[],bool)")]
    pub struct BulkIsBlacklistedCall {
        pub accounts: ::std::vec::Vec<ethers::core::types::Address>,
        pub state: bool,
    }
    #[doc = "Container type for all input parameters for the `coolDownEnabled` function with signature `coolDownEnabled()` and selector `[238, 54, 227, 89]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "coolDownEnabled", abi = "coolDownEnabled()")]
    pub struct CoolDownEnabledCall;
    #[doc = "Container type for all input parameters for the `coolDownTime` function with signature `coolDownTime()` and selector `[210, 206, 13, 178]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "coolDownTime", abi = "coolDownTime()")]
    pub struct CoolDownTimeCall;
    #[doc = "Container type for all input parameters for the `decimals` function with signature `decimals()` and selector `[49, 60, 229, 103]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "decimals", abi = "decimals()")]
    pub struct DecimalsCall;
    #[doc = "Container type for all input parameters for the `decreaseAllowance` function with signature `decreaseAllowance(address,uint256)` and selector `[164, 87, 194, 215]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "decreaseAllowance", abi = "decreaseAllowance(address,uint256)")]
    pub struct DecreaseAllowanceCall {
        pub spender: ethers::core::types::Address,
        pub subtracted_value: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `donationWallet` function with signature `donationWallet()` and selector `[231, 185, 77, 244]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "donationWallet", abi = "donationWallet()")]
    pub struct DonationWalletCall;
    #[doc = "Container type for all input parameters for the `excludeFromFee` function with signature `excludeFromFee(address)` and selector `[67, 120, 35, 236]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "excludeFromFee", abi = "excludeFromFee(address)")]
    pub struct ExcludeFromFeeCall {
        pub account: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `excludeFromReward` function with signature `excludeFromReward(address)` and selector `[82, 57, 12, 2]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "excludeFromReward", abi = "excludeFromReward(address)")]
    pub struct ExcludeFromRewardCall {
        pub account: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `genesis_block` function with signature `genesis_block()` and selector `[39, 74, 83, 60]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "genesis_block", abi = "genesis_block()")]
    pub struct GenesisBlockCall;
    #[doc = "Container type for all input parameters for the `includeInFee` function with signature `includeInFee(address)` and selector `[234, 47, 11, 55]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "includeInFee", abi = "includeInFee(address)")]
    pub struct IncludeInFeeCall {
        pub account: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `includeInReward` function with signature `includeInReward(address)` and selector `[54, 133, 212, 25]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "includeInReward", abi = "includeInReward(address)")]
    pub struct IncludeInRewardCall {
        pub account: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `increaseAllowance` function with signature `increaseAllowance(address,uint256)` and selector `[57, 80, 147, 81]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "increaseAllowance", abi = "increaseAllowance(address,uint256)")]
    pub struct IncreaseAllowanceCall {
        pub spender: ethers::core::types::Address,
        pub added_value: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `isExcludedFromFee` function with signature `isExcludedFromFee(address)` and selector `[83, 66, 172, 180]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "isExcludedFromFee", abi = "isExcludedFromFee(address)")]
    pub struct IsExcludedFromFeeCall {
        pub account: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `isExcludedFromReward` function with signature `isExcludedFromReward(address)` and selector `[136, 248, 32, 32]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "isExcludedFromReward", abi = "isExcludedFromReward(address)")]
    pub struct IsExcludedFromRewardCall {
        pub account: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `marketingWallet` function with signature `marketingWallet()` and selector `[117, 240, 168, 116]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "marketingWallet", abi = "marketingWallet()")]
    pub struct MarketingWalletCall;
    #[doc = "Container type for all input parameters for the `maxBuyLimit` function with signature `maxBuyLimit()` and selector `[106, 165, 179, 127]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "maxBuyLimit", abi = "maxBuyLimit()")]
    pub struct MaxBuyLimitCall;
    #[doc = "Container type for all input parameters for the `maxSellLimit` function with signature `maxSellLimit()` and selector `[101, 46, 47, 4]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "maxSellLimit", abi = "maxSellLimit()")]
    pub struct MaxSellLimitCall;
    #[doc = "Container type for all input parameters for the `maxWalletLimit` function with signature `maxWalletLimit()` and selector `[102, 168, 141, 150]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "maxWalletLimit", abi = "maxWalletLimit()")]
    pub struct MaxWalletLimitCall;
    #[doc = "Container type for all input parameters for the `name` function with signature `name()` and selector `[6, 253, 222, 3]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "name", abi = "name()")]
    pub struct NameCall;
    #[doc = "Container type for all input parameters for the `owner` function with signature `owner()` and selector `[141, 165, 203, 91]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "owner", abi = "owner()")]
    pub struct OwnerCall;
    #[doc = "Container type for all input parameters for the `pair` function with signature `pair()` and selector `[168, 170, 27, 49]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "pair", abi = "pair()")]
    pub struct PairCall;
    #[doc = "Container type for all input parameters for the `reflectionFromToken` function with signature `reflectionFromToken(uint256,bool)` and selector `[69, 73, 176, 57]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "reflectionFromToken",
        abi = "reflectionFromToken(uint256,bool)"
    )]
    pub struct ReflectionFromTokenCall {
        pub t_amount: ethers::core::types::U256,
        pub deduct_transfer_rfi: bool,
    }
    #[doc = "Container type for all input parameters for the `renounceOwnership` function with signature `renounceOwnership()` and selector `[113, 80, 24, 166]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "renounceOwnership", abi = "renounceOwnership()")]
    pub struct RenounceOwnershipCall;
    #[doc = "Container type for all input parameters for the `rescueAnyBEP20Tokens` function with signature `rescueAnyBEP20Tokens(address,address,uint256)` and selector `[71, 194, 48, 146]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "rescueAnyBEP20Tokens",
        abi = "rescueAnyBEP20Tokens(address,address,uint256)"
    )]
    pub struct RescueAnyBEP20TokensCall {
        pub token_addr: ethers::core::types::Address,
        pub to: ethers::core::types::Address,
        pub amount: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `rescueBNB` function with signature `rescueBNB(uint256)` and selector `[68, 27, 29, 48]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "rescueBNB", abi = "rescueBNB(uint256)")]
    pub struct RescueBNBCall {
        pub wei_amount: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `router` function with signature `router()` and selector `[248, 135, 234, 64]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "router", abi = "router()")]
    pub struct RouterCall;
    #[doc = "Container type for all input parameters for the `sellTaxes` function with signature `sellTaxes()` and selector `[246, 104, 149, 163]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "sellTaxes", abi = "sellTaxes()")]
    pub struct SellTaxesCall;
    #[doc = "Container type for all input parameters for the `setSellTaxes` function with signature `setSellTaxes(uint256,uint256,uint256,uint256)` and selector `[244, 128, 254, 194]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "setSellTaxes",
        abi = "setSellTaxes(uint256,uint256,uint256,uint256)"
    )]
    pub struct SetSellTaxesCall {
        pub rfi: ethers::core::types::U256,
        pub marketing: ethers::core::types::U256,
        pub liquidity: ethers::core::types::U256,
        pub donation: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `setTaxes` function with signature `setTaxes(uint256,uint256,uint256,uint256)` and selector `[161, 42, 125, 97]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "setTaxes", abi = "setTaxes(uint256,uint256,uint256,uint256)")]
    pub struct SetTaxesCall {
        pub rfi: ethers::core::types::U256,
        pub marketing: ethers::core::types::U256,
        pub liquidity: ethers::core::types::U256,
        pub donation: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `setTradingStatus` function with signature `setTradingStatus(bool)` and selector `[55, 155, 161, 217]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "setTradingStatus", abi = "setTradingStatus(bool)")]
    pub struct SetTradingStatusCall {
        pub state: bool,
    }
    #[doc = "Container type for all input parameters for the `swapEnabled` function with signature `swapEnabled()` and selector `[109, 221, 23, 19]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "swapEnabled", abi = "swapEnabled()")]
    pub struct SwapEnabledCall;
    #[doc = "Container type for all input parameters for the `swapTokensAtAmount` function with signature `swapTokensAtAmount()` and selector `[226, 244, 86, 5]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "swapTokensAtAmount", abi = "swapTokensAtAmount()")]
    pub struct SwapTokensAtAmountCall;
    #[doc = "Container type for all input parameters for the `symbol` function with signature `symbol()` and selector `[149, 216, 155, 65]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "symbol", abi = "symbol()")]
    pub struct SymbolCall;
    #[doc = "Container type for all input parameters for the `taxes` function with signature `taxes()` and selector `[114, 143, 142, 234]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "taxes", abi = "taxes()")]
    pub struct TaxesCall;
    #[doc = "Container type for all input parameters for the `tokenFromReflection` function with signature `tokenFromReflection(uint256)` and selector `[45, 131, 129, 25]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "tokenFromReflection", abi = "tokenFromReflection(uint256)")]
    pub struct TokenFromReflectionCall {
        pub r_amount: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `totFeesPaid` function with signature `totFeesPaid()` and selector `[155, 165, 228, 213]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "totFeesPaid", abi = "totFeesPaid()")]
    pub struct TotFeesPaidCall;
    #[doc = "Container type for all input parameters for the `totalSupply` function with signature `totalSupply()` and selector `[24, 22, 13, 221]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "totalSupply", abi = "totalSupply()")]
    pub struct TotalSupplyCall;
    #[doc = "Container type for all input parameters for the `tradingEnabled` function with signature `tradingEnabled()` and selector `[74, 218, 33, 139]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "tradingEnabled", abi = "tradingEnabled()")]
    pub struct TradingEnabledCall;
    #[doc = "Container type for all input parameters for the `transfer` function with signature `transfer(address,uint256)` and selector `[169, 5, 156, 187]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "transfer", abi = "transfer(address,uint256)")]
    pub struct TransferCall {
        pub recipient: ethers::core::types::Address,
        pub amount: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `transferFrom` function with signature `transferFrom(address,address,uint256)` and selector `[35, 184, 114, 221]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "transferFrom", abi = "transferFrom(address,address,uint256)")]
    pub struct TransferFromCall {
        pub sender: ethers::core::types::Address,
        pub recipient: ethers::core::types::Address,
        pub amount: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `transferOwnership` function with signature `transferOwnership(address)` and selector `[242, 253, 227, 139]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "transferOwnership", abi = "transferOwnership(address)")]
    pub struct TransferOwnershipCall {
        pub new_owner: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `updateAllowedTransfer` function with signature `updateAllowedTransfer(address,bool)` and selector `[181, 197, 113, 69]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "updateAllowedTransfer",
        abi = "updateAllowedTransfer(address,bool)"
    )]
    pub struct UpdateAllowedTransferCall {
        pub account: ethers::core::types::Address,
        pub state: bool,
    }
    #[doc = "Container type for all input parameters for the `updateCooldown` function with signature `updateCooldown(bool,uint256)` and selector `[229, 23, 242, 185]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "updateCooldown", abi = "updateCooldown(bool,uint256)")]
    pub struct UpdateCooldownCall {
        pub state: bool,
        pub time: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `updateDonationWallet` function with signature `updateDonationWallet(address)` and selector `[42, 8, 141, 166]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "updateDonationWallet", abi = "updateDonationWallet(address)")]
    pub struct UpdateDonationWalletCall {
        pub new_wallet: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `updateIsBlacklisted` function with signature `updateIsBlacklisted(address,bool)` and selector `[91, 36, 234, 94]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "updateIsBlacklisted",
        abi = "updateIsBlacklisted(address,bool)"
    )]
    pub struct UpdateIsBlacklistedCall {
        pub account: ethers::core::types::Address,
        pub state: bool,
    }
    #[doc = "Container type for all input parameters for the `updateMarketingWallet` function with signature `updateMarketingWallet(address)` and selector `[170, 206, 187, 227]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "updateMarketingWallet", abi = "updateMarketingWallet(address)")]
    pub struct UpdateMarketingWalletCall {
        pub new_wallet: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `updateMaxTxLimit` function with signature `updateMaxTxLimit(uint256,uint256)` and selector `[89, 117, 159, 97]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "updateMaxTxLimit", abi = "updateMaxTxLimit(uint256,uint256)")]
    pub struct UpdateMaxTxLimitCall {
        pub max_buy: ethers::core::types::U256,
        pub max_sell: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `updateMaxWalletlimit` function with signature `updateMaxWalletlimit(uint256)` and selector `[216, 103, 46, 81]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "updateMaxWalletlimit", abi = "updateMaxWalletlimit(uint256)")]
    pub struct UpdateMaxWalletlimitCall {
        pub amount: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `updateRouterAndPair` function with signature `updateRouterAndPair(address,address)` and selector `[64, 178, 140, 47]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "updateRouterAndPair",
        abi = "updateRouterAndPair(address,address)"
    )]
    pub struct UpdateRouterAndPairCall {
        pub new_router: ethers::core::types::Address,
        pub new_pair: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `updateSwapEnabled` function with signature `updateSwapEnabled(bool)` and selector `[146, 77, 233, 183]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "updateSwapEnabled", abi = "updateSwapEnabled(bool)")]
    pub struct UpdateSwapEnabledCall {
        pub enabled: bool,
    }
    #[doc = "Container type for all input parameters for the `updateSwapTokensAtAmount` function with signature `updateSwapTokensAtAmount(uint256)` and selector `[210, 87, 179, 79]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "updateSwapTokensAtAmount",
        abi = "updateSwapTokensAtAmount(uint256)"
    )]
    pub struct UpdateSwapTokensAtAmountCall {
        pub amount: ethers::core::types::U256,
    }
    #[derive(Debug, Clone, PartialEq, Eq, ethers :: contract :: EthAbiType)]
    pub enum FlokiGrowCalls {
        AirdropTokens(AirdropTokensCall),
        Allowance(AllowanceCall),
        AllowedTransfer(AllowedTransferCall),
        Approve(ApproveCall),
        BalanceOf(BalanceOfCall),
        BulkExcludeFee(BulkExcludeFeeCall),
        BulkIsBlacklisted(BulkIsBlacklistedCall),
        CoolDownEnabled(CoolDownEnabledCall),
        CoolDownTime(CoolDownTimeCall),
        Decimals(DecimalsCall),
        DecreaseAllowance(DecreaseAllowanceCall),
        DonationWallet(DonationWalletCall),
        ExcludeFromFee(ExcludeFromFeeCall),
        ExcludeFromReward(ExcludeFromRewardCall),
        GenesisBlock(GenesisBlockCall),
        IncludeInFee(IncludeInFeeCall),
        IncludeInReward(IncludeInRewardCall),
        IncreaseAllowance(IncreaseAllowanceCall),
        IsExcludedFromFee(IsExcludedFromFeeCall),
        IsExcludedFromReward(IsExcludedFromRewardCall),
        MarketingWallet(MarketingWalletCall),
        MaxBuyLimit(MaxBuyLimitCall),
        MaxSellLimit(MaxSellLimitCall),
        MaxWalletLimit(MaxWalletLimitCall),
        Name(NameCall),
        Owner(OwnerCall),
        Pair(PairCall),
        ReflectionFromToken(ReflectionFromTokenCall),
        RenounceOwnership(RenounceOwnershipCall),
        RescueAnyBEP20Tokens(RescueAnyBEP20TokensCall),
        RescueBNB(RescueBNBCall),
        Router(RouterCall),
        SellTaxes(SellTaxesCall),
        SetSellTaxes(SetSellTaxesCall),
        SetTaxes(SetTaxesCall),
        SetTradingStatus(SetTradingStatusCall),
        SwapEnabled(SwapEnabledCall),
        SwapTokensAtAmount(SwapTokensAtAmountCall),
        Symbol(SymbolCall),
        Taxes(TaxesCall),
        TokenFromReflection(TokenFromReflectionCall),
        TotFeesPaid(TotFeesPaidCall),
        TotalSupply(TotalSupplyCall),
        TradingEnabled(TradingEnabledCall),
        Transfer(TransferCall),
        TransferFrom(TransferFromCall),
        TransferOwnership(TransferOwnershipCall),
        UpdateAllowedTransfer(UpdateAllowedTransferCall),
        UpdateCooldown(UpdateCooldownCall),
        UpdateDonationWallet(UpdateDonationWalletCall),
        UpdateIsBlacklisted(UpdateIsBlacklistedCall),
        UpdateMarketingWallet(UpdateMarketingWalletCall),
        UpdateMaxTxLimit(UpdateMaxTxLimitCall),
        UpdateMaxWalletlimit(UpdateMaxWalletlimitCall),
        UpdateRouterAndPair(UpdateRouterAndPairCall),
        UpdateSwapEnabled(UpdateSwapEnabledCall),
        UpdateSwapTokensAtAmount(UpdateSwapTokensAtAmountCall),
    }
    impl ethers::core::abi::AbiDecode for FlokiGrowCalls {
        fn decode(
            data: impl AsRef<[u8]>,
        ) -> ::std::result::Result<Self, ethers::core::abi::AbiError> {
            if let Ok(decoded) =
                <AirdropTokensCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(FlokiGrowCalls::AirdropTokens(decoded));
            }
            if let Ok(decoded) =
                <AllowanceCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(FlokiGrowCalls::Allowance(decoded));
            }
            if let Ok(decoded) =
                <AllowedTransferCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(FlokiGrowCalls::AllowedTransfer(decoded));
            }
            if let Ok(decoded) =
                <ApproveCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(FlokiGrowCalls::Approve(decoded));
            }
            if let Ok(decoded) =
                <BalanceOfCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(FlokiGrowCalls::BalanceOf(decoded));
            }
            if let Ok(decoded) =
                <BulkExcludeFeeCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(FlokiGrowCalls::BulkExcludeFee(decoded));
            }
            if let Ok(decoded) =
                <BulkIsBlacklistedCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(FlokiGrowCalls::BulkIsBlacklisted(decoded));
            }
            if let Ok(decoded) =
                <CoolDownEnabledCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(FlokiGrowCalls::CoolDownEnabled(decoded));
            }
            if let Ok(decoded) =
                <CoolDownTimeCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(FlokiGrowCalls::CoolDownTime(decoded));
            }
            if let Ok(decoded) =
                <DecimalsCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(FlokiGrowCalls::Decimals(decoded));
            }
            if let Ok(decoded) =
                <DecreaseAllowanceCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(FlokiGrowCalls::DecreaseAllowance(decoded));
            }
            if let Ok(decoded) =
                <DonationWalletCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(FlokiGrowCalls::DonationWallet(decoded));
            }
            if let Ok(decoded) =
                <ExcludeFromFeeCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(FlokiGrowCalls::ExcludeFromFee(decoded));
            }
            if let Ok(decoded) =
                <ExcludeFromRewardCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(FlokiGrowCalls::ExcludeFromReward(decoded));
            }
            if let Ok(decoded) =
                <GenesisBlockCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(FlokiGrowCalls::GenesisBlock(decoded));
            }
            if let Ok(decoded) =
                <IncludeInFeeCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(FlokiGrowCalls::IncludeInFee(decoded));
            }
            if let Ok(decoded) =
                <IncludeInRewardCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(FlokiGrowCalls::IncludeInReward(decoded));
            }
            if let Ok(decoded) =
                <IncreaseAllowanceCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(FlokiGrowCalls::IncreaseAllowance(decoded));
            }
            if let Ok(decoded) =
                <IsExcludedFromFeeCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(FlokiGrowCalls::IsExcludedFromFee(decoded));
            }
            if let Ok(decoded) =
                <IsExcludedFromRewardCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(FlokiGrowCalls::IsExcludedFromReward(decoded));
            }
            if let Ok(decoded) =
                <MarketingWalletCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(FlokiGrowCalls::MarketingWallet(decoded));
            }
            if let Ok(decoded) =
                <MaxBuyLimitCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(FlokiGrowCalls::MaxBuyLimit(decoded));
            }
            if let Ok(decoded) =
                <MaxSellLimitCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(FlokiGrowCalls::MaxSellLimit(decoded));
            }
            if let Ok(decoded) =
                <MaxWalletLimitCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(FlokiGrowCalls::MaxWalletLimit(decoded));
            }
            if let Ok(decoded) = <NameCall as ethers::core::abi::AbiDecode>::decode(data.as_ref()) {
                return Ok(FlokiGrowCalls::Name(decoded));
            }
            if let Ok(decoded) = <OwnerCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(FlokiGrowCalls::Owner(decoded));
            }
            if let Ok(decoded) = <PairCall as ethers::core::abi::AbiDecode>::decode(data.as_ref()) {
                return Ok(FlokiGrowCalls::Pair(decoded));
            }
            if let Ok(decoded) =
                <ReflectionFromTokenCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(FlokiGrowCalls::ReflectionFromToken(decoded));
            }
            if let Ok(decoded) =
                <RenounceOwnershipCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(FlokiGrowCalls::RenounceOwnership(decoded));
            }
            if let Ok(decoded) =
                <RescueAnyBEP20TokensCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(FlokiGrowCalls::RescueAnyBEP20Tokens(decoded));
            }
            if let Ok(decoded) =
                <RescueBNBCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(FlokiGrowCalls::RescueBNB(decoded));
            }
            if let Ok(decoded) = <RouterCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(FlokiGrowCalls::Router(decoded));
            }
            if let Ok(decoded) =
                <SellTaxesCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(FlokiGrowCalls::SellTaxes(decoded));
            }
            if let Ok(decoded) =
                <SetSellTaxesCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(FlokiGrowCalls::SetSellTaxes(decoded));
            }
            if let Ok(decoded) =
                <SetTaxesCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(FlokiGrowCalls::SetTaxes(decoded));
            }
            if let Ok(decoded) =
                <SetTradingStatusCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(FlokiGrowCalls::SetTradingStatus(decoded));
            }
            if let Ok(decoded) =
                <SwapEnabledCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(FlokiGrowCalls::SwapEnabled(decoded));
            }
            if let Ok(decoded) =
                <SwapTokensAtAmountCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(FlokiGrowCalls::SwapTokensAtAmount(decoded));
            }
            if let Ok(decoded) = <SymbolCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(FlokiGrowCalls::Symbol(decoded));
            }
            if let Ok(decoded) = <TaxesCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(FlokiGrowCalls::Taxes(decoded));
            }
            if let Ok(decoded) =
                <TokenFromReflectionCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(FlokiGrowCalls::TokenFromReflection(decoded));
            }
            if let Ok(decoded) =
                <TotFeesPaidCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(FlokiGrowCalls::TotFeesPaid(decoded));
            }
            if let Ok(decoded) =
                <TotalSupplyCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(FlokiGrowCalls::TotalSupply(decoded));
            }
            if let Ok(decoded) =
                <TradingEnabledCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(FlokiGrowCalls::TradingEnabled(decoded));
            }
            if let Ok(decoded) =
                <TransferCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(FlokiGrowCalls::Transfer(decoded));
            }
            if let Ok(decoded) =
                <TransferFromCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(FlokiGrowCalls::TransferFrom(decoded));
            }
            if let Ok(decoded) =
                <TransferOwnershipCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(FlokiGrowCalls::TransferOwnership(decoded));
            }
            if let Ok(decoded) =
                <UpdateAllowedTransferCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(FlokiGrowCalls::UpdateAllowedTransfer(decoded));
            }
            if let Ok(decoded) =
                <UpdateCooldownCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(FlokiGrowCalls::UpdateCooldown(decoded));
            }
            if let Ok(decoded) =
                <UpdateDonationWalletCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(FlokiGrowCalls::UpdateDonationWallet(decoded));
            }
            if let Ok(decoded) =
                <UpdateIsBlacklistedCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(FlokiGrowCalls::UpdateIsBlacklisted(decoded));
            }
            if let Ok(decoded) =
                <UpdateMarketingWalletCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(FlokiGrowCalls::UpdateMarketingWallet(decoded));
            }
            if let Ok(decoded) =
                <UpdateMaxTxLimitCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(FlokiGrowCalls::UpdateMaxTxLimit(decoded));
            }
            if let Ok(decoded) =
                <UpdateMaxWalletlimitCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(FlokiGrowCalls::UpdateMaxWalletlimit(decoded));
            }
            if let Ok(decoded) =
                <UpdateRouterAndPairCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(FlokiGrowCalls::UpdateRouterAndPair(decoded));
            }
            if let Ok(decoded) =
                <UpdateSwapEnabledCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(FlokiGrowCalls::UpdateSwapEnabled(decoded));
            }
            if let Ok(decoded) =
                <UpdateSwapTokensAtAmountCall as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(FlokiGrowCalls::UpdateSwapTokensAtAmount(decoded));
            }
            Err(ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ethers::core::abi::AbiEncode for FlokiGrowCalls {
        fn encode(self) -> Vec<u8> {
            match self {
                FlokiGrowCalls::AirdropTokens(element) => element.encode(),
                FlokiGrowCalls::Allowance(element) => element.encode(),
                FlokiGrowCalls::AllowedTransfer(element) => element.encode(),
                FlokiGrowCalls::Approve(element) => element.encode(),
                FlokiGrowCalls::BalanceOf(element) => element.encode(),
                FlokiGrowCalls::BulkExcludeFee(element) => element.encode(),
                FlokiGrowCalls::BulkIsBlacklisted(element) => element.encode(),
                FlokiGrowCalls::CoolDownEnabled(element) => element.encode(),
                FlokiGrowCalls::CoolDownTime(element) => element.encode(),
                FlokiGrowCalls::Decimals(element) => element.encode(),
                FlokiGrowCalls::DecreaseAllowance(element) => element.encode(),
                FlokiGrowCalls::DonationWallet(element) => element.encode(),
                FlokiGrowCalls::ExcludeFromFee(element) => element.encode(),
                FlokiGrowCalls::ExcludeFromReward(element) => element.encode(),
                FlokiGrowCalls::GenesisBlock(element) => element.encode(),
                FlokiGrowCalls::IncludeInFee(element) => element.encode(),
                FlokiGrowCalls::IncludeInReward(element) => element.encode(),
                FlokiGrowCalls::IncreaseAllowance(element) => element.encode(),
                FlokiGrowCalls::IsExcludedFromFee(element) => element.encode(),
                FlokiGrowCalls::IsExcludedFromReward(element) => element.encode(),
                FlokiGrowCalls::MarketingWallet(element) => element.encode(),
                FlokiGrowCalls::MaxBuyLimit(element) => element.encode(),
                FlokiGrowCalls::MaxSellLimit(element) => element.encode(),
                FlokiGrowCalls::MaxWalletLimit(element) => element.encode(),
                FlokiGrowCalls::Name(element) => element.encode(),
                FlokiGrowCalls::Owner(element) => element.encode(),
                FlokiGrowCalls::Pair(element) => element.encode(),
                FlokiGrowCalls::ReflectionFromToken(element) => element.encode(),
                FlokiGrowCalls::RenounceOwnership(element) => element.encode(),
                FlokiGrowCalls::RescueAnyBEP20Tokens(element) => element.encode(),
                FlokiGrowCalls::RescueBNB(element) => element.encode(),
                FlokiGrowCalls::Router(element) => element.encode(),
                FlokiGrowCalls::SellTaxes(element) => element.encode(),
                FlokiGrowCalls::SetSellTaxes(element) => element.encode(),
                FlokiGrowCalls::SetTaxes(element) => element.encode(),
                FlokiGrowCalls::SetTradingStatus(element) => element.encode(),
                FlokiGrowCalls::SwapEnabled(element) => element.encode(),
                FlokiGrowCalls::SwapTokensAtAmount(element) => element.encode(),
                FlokiGrowCalls::Symbol(element) => element.encode(),
                FlokiGrowCalls::Taxes(element) => element.encode(),
                FlokiGrowCalls::TokenFromReflection(element) => element.encode(),
                FlokiGrowCalls::TotFeesPaid(element) => element.encode(),
                FlokiGrowCalls::TotalSupply(element) => element.encode(),
                FlokiGrowCalls::TradingEnabled(element) => element.encode(),
                FlokiGrowCalls::Transfer(element) => element.encode(),
                FlokiGrowCalls::TransferFrom(element) => element.encode(),
                FlokiGrowCalls::TransferOwnership(element) => element.encode(),
                FlokiGrowCalls::UpdateAllowedTransfer(element) => element.encode(),
                FlokiGrowCalls::UpdateCooldown(element) => element.encode(),
                FlokiGrowCalls::UpdateDonationWallet(element) => element.encode(),
                FlokiGrowCalls::UpdateIsBlacklisted(element) => element.encode(),
                FlokiGrowCalls::UpdateMarketingWallet(element) => element.encode(),
                FlokiGrowCalls::UpdateMaxTxLimit(element) => element.encode(),
                FlokiGrowCalls::UpdateMaxWalletlimit(element) => element.encode(),
                FlokiGrowCalls::UpdateRouterAndPair(element) => element.encode(),
                FlokiGrowCalls::UpdateSwapEnabled(element) => element.encode(),
                FlokiGrowCalls::UpdateSwapTokensAtAmount(element) => element.encode(),
            }
        }
    }
    impl ::std::fmt::Display for FlokiGrowCalls {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            match self {
                FlokiGrowCalls::AirdropTokens(element) => element.fmt(f),
                FlokiGrowCalls::Allowance(element) => element.fmt(f),
                FlokiGrowCalls::AllowedTransfer(element) => element.fmt(f),
                FlokiGrowCalls::Approve(element) => element.fmt(f),
                FlokiGrowCalls::BalanceOf(element) => element.fmt(f),
                FlokiGrowCalls::BulkExcludeFee(element) => element.fmt(f),
                FlokiGrowCalls::BulkIsBlacklisted(element) => element.fmt(f),
                FlokiGrowCalls::CoolDownEnabled(element) => element.fmt(f),
                FlokiGrowCalls::CoolDownTime(element) => element.fmt(f),
                FlokiGrowCalls::Decimals(element) => element.fmt(f),
                FlokiGrowCalls::DecreaseAllowance(element) => element.fmt(f),
                FlokiGrowCalls::DonationWallet(element) => element.fmt(f),
                FlokiGrowCalls::ExcludeFromFee(element) => element.fmt(f),
                FlokiGrowCalls::ExcludeFromReward(element) => element.fmt(f),
                FlokiGrowCalls::GenesisBlock(element) => element.fmt(f),
                FlokiGrowCalls::IncludeInFee(element) => element.fmt(f),
                FlokiGrowCalls::IncludeInReward(element) => element.fmt(f),
                FlokiGrowCalls::IncreaseAllowance(element) => element.fmt(f),
                FlokiGrowCalls::IsExcludedFromFee(element) => element.fmt(f),
                FlokiGrowCalls::IsExcludedFromReward(element) => element.fmt(f),
                FlokiGrowCalls::MarketingWallet(element) => element.fmt(f),
                FlokiGrowCalls::MaxBuyLimit(element) => element.fmt(f),
                FlokiGrowCalls::MaxSellLimit(element) => element.fmt(f),
                FlokiGrowCalls::MaxWalletLimit(element) => element.fmt(f),
                FlokiGrowCalls::Name(element) => element.fmt(f),
                FlokiGrowCalls::Owner(element) => element.fmt(f),
                FlokiGrowCalls::Pair(element) => element.fmt(f),
                FlokiGrowCalls::ReflectionFromToken(element) => element.fmt(f),
                FlokiGrowCalls::RenounceOwnership(element) => element.fmt(f),
                FlokiGrowCalls::RescueAnyBEP20Tokens(element) => element.fmt(f),
                FlokiGrowCalls::RescueBNB(element) => element.fmt(f),
                FlokiGrowCalls::Router(element) => element.fmt(f),
                FlokiGrowCalls::SellTaxes(element) => element.fmt(f),
                FlokiGrowCalls::SetSellTaxes(element) => element.fmt(f),
                FlokiGrowCalls::SetTaxes(element) => element.fmt(f),
                FlokiGrowCalls::SetTradingStatus(element) => element.fmt(f),
                FlokiGrowCalls::SwapEnabled(element) => element.fmt(f),
                FlokiGrowCalls::SwapTokensAtAmount(element) => element.fmt(f),
                FlokiGrowCalls::Symbol(element) => element.fmt(f),
                FlokiGrowCalls::Taxes(element) => element.fmt(f),
                FlokiGrowCalls::TokenFromReflection(element) => element.fmt(f),
                FlokiGrowCalls::TotFeesPaid(element) => element.fmt(f),
                FlokiGrowCalls::TotalSupply(element) => element.fmt(f),
                FlokiGrowCalls::TradingEnabled(element) => element.fmt(f),
                FlokiGrowCalls::Transfer(element) => element.fmt(f),
                FlokiGrowCalls::TransferFrom(element) => element.fmt(f),
                FlokiGrowCalls::TransferOwnership(element) => element.fmt(f),
                FlokiGrowCalls::UpdateAllowedTransfer(element) => element.fmt(f),
                FlokiGrowCalls::UpdateCooldown(element) => element.fmt(f),
                FlokiGrowCalls::UpdateDonationWallet(element) => element.fmt(f),
                FlokiGrowCalls::UpdateIsBlacklisted(element) => element.fmt(f),
                FlokiGrowCalls::UpdateMarketingWallet(element) => element.fmt(f),
                FlokiGrowCalls::UpdateMaxTxLimit(element) => element.fmt(f),
                FlokiGrowCalls::UpdateMaxWalletlimit(element) => element.fmt(f),
                FlokiGrowCalls::UpdateRouterAndPair(element) => element.fmt(f),
                FlokiGrowCalls::UpdateSwapEnabled(element) => element.fmt(f),
                FlokiGrowCalls::UpdateSwapTokensAtAmount(element) => element.fmt(f),
            }
        }
    }
    impl ::std::convert::From<AirdropTokensCall> for FlokiGrowCalls {
        fn from(var: AirdropTokensCall) -> Self {
            FlokiGrowCalls::AirdropTokens(var)
        }
    }
    impl ::std::convert::From<AllowanceCall> for FlokiGrowCalls {
        fn from(var: AllowanceCall) -> Self {
            FlokiGrowCalls::Allowance(var)
        }
    }
    impl ::std::convert::From<AllowedTransferCall> for FlokiGrowCalls {
        fn from(var: AllowedTransferCall) -> Self {
            FlokiGrowCalls::AllowedTransfer(var)
        }
    }
    impl ::std::convert::From<ApproveCall> for FlokiGrowCalls {
        fn from(var: ApproveCall) -> Self {
            FlokiGrowCalls::Approve(var)
        }
    }
    impl ::std::convert::From<BalanceOfCall> for FlokiGrowCalls {
        fn from(var: BalanceOfCall) -> Self {
            FlokiGrowCalls::BalanceOf(var)
        }
    }
    impl ::std::convert::From<BulkExcludeFeeCall> for FlokiGrowCalls {
        fn from(var: BulkExcludeFeeCall) -> Self {
            FlokiGrowCalls::BulkExcludeFee(var)
        }
    }
    impl ::std::convert::From<BulkIsBlacklistedCall> for FlokiGrowCalls {
        fn from(var: BulkIsBlacklistedCall) -> Self {
            FlokiGrowCalls::BulkIsBlacklisted(var)
        }
    }
    impl ::std::convert::From<CoolDownEnabledCall> for FlokiGrowCalls {
        fn from(var: CoolDownEnabledCall) -> Self {
            FlokiGrowCalls::CoolDownEnabled(var)
        }
    }
    impl ::std::convert::From<CoolDownTimeCall> for FlokiGrowCalls {
        fn from(var: CoolDownTimeCall) -> Self {
            FlokiGrowCalls::CoolDownTime(var)
        }
    }
    impl ::std::convert::From<DecimalsCall> for FlokiGrowCalls {
        fn from(var: DecimalsCall) -> Self {
            FlokiGrowCalls::Decimals(var)
        }
    }
    impl ::std::convert::From<DecreaseAllowanceCall> for FlokiGrowCalls {
        fn from(var: DecreaseAllowanceCall) -> Self {
            FlokiGrowCalls::DecreaseAllowance(var)
        }
    }
    impl ::std::convert::From<DonationWalletCall> for FlokiGrowCalls {
        fn from(var: DonationWalletCall) -> Self {
            FlokiGrowCalls::DonationWallet(var)
        }
    }
    impl ::std::convert::From<ExcludeFromFeeCall> for FlokiGrowCalls {
        fn from(var: ExcludeFromFeeCall) -> Self {
            FlokiGrowCalls::ExcludeFromFee(var)
        }
    }
    impl ::std::convert::From<ExcludeFromRewardCall> for FlokiGrowCalls {
        fn from(var: ExcludeFromRewardCall) -> Self {
            FlokiGrowCalls::ExcludeFromReward(var)
        }
    }
    impl ::std::convert::From<GenesisBlockCall> for FlokiGrowCalls {
        fn from(var: GenesisBlockCall) -> Self {
            FlokiGrowCalls::GenesisBlock(var)
        }
    }
    impl ::std::convert::From<IncludeInFeeCall> for FlokiGrowCalls {
        fn from(var: IncludeInFeeCall) -> Self {
            FlokiGrowCalls::IncludeInFee(var)
        }
    }
    impl ::std::convert::From<IncludeInRewardCall> for FlokiGrowCalls {
        fn from(var: IncludeInRewardCall) -> Self {
            FlokiGrowCalls::IncludeInReward(var)
        }
    }
    impl ::std::convert::From<IncreaseAllowanceCall> for FlokiGrowCalls {
        fn from(var: IncreaseAllowanceCall) -> Self {
            FlokiGrowCalls::IncreaseAllowance(var)
        }
    }
    impl ::std::convert::From<IsExcludedFromFeeCall> for FlokiGrowCalls {
        fn from(var: IsExcludedFromFeeCall) -> Self {
            FlokiGrowCalls::IsExcludedFromFee(var)
        }
    }
    impl ::std::convert::From<IsExcludedFromRewardCall> for FlokiGrowCalls {
        fn from(var: IsExcludedFromRewardCall) -> Self {
            FlokiGrowCalls::IsExcludedFromReward(var)
        }
    }
    impl ::std::convert::From<MarketingWalletCall> for FlokiGrowCalls {
        fn from(var: MarketingWalletCall) -> Self {
            FlokiGrowCalls::MarketingWallet(var)
        }
    }
    impl ::std::convert::From<MaxBuyLimitCall> for FlokiGrowCalls {
        fn from(var: MaxBuyLimitCall) -> Self {
            FlokiGrowCalls::MaxBuyLimit(var)
        }
    }
    impl ::std::convert::From<MaxSellLimitCall> for FlokiGrowCalls {
        fn from(var: MaxSellLimitCall) -> Self {
            FlokiGrowCalls::MaxSellLimit(var)
        }
    }
    impl ::std::convert::From<MaxWalletLimitCall> for FlokiGrowCalls {
        fn from(var: MaxWalletLimitCall) -> Self {
            FlokiGrowCalls::MaxWalletLimit(var)
        }
    }
    impl ::std::convert::From<NameCall> for FlokiGrowCalls {
        fn from(var: NameCall) -> Self {
            FlokiGrowCalls::Name(var)
        }
    }
    impl ::std::convert::From<OwnerCall> for FlokiGrowCalls {
        fn from(var: OwnerCall) -> Self {
            FlokiGrowCalls::Owner(var)
        }
    }
    impl ::std::convert::From<PairCall> for FlokiGrowCalls {
        fn from(var: PairCall) -> Self {
            FlokiGrowCalls::Pair(var)
        }
    }
    impl ::std::convert::From<ReflectionFromTokenCall> for FlokiGrowCalls {
        fn from(var: ReflectionFromTokenCall) -> Self {
            FlokiGrowCalls::ReflectionFromToken(var)
        }
    }
    impl ::std::convert::From<RenounceOwnershipCall> for FlokiGrowCalls {
        fn from(var: RenounceOwnershipCall) -> Self {
            FlokiGrowCalls::RenounceOwnership(var)
        }
    }
    impl ::std::convert::From<RescueAnyBEP20TokensCall> for FlokiGrowCalls {
        fn from(var: RescueAnyBEP20TokensCall) -> Self {
            FlokiGrowCalls::RescueAnyBEP20Tokens(var)
        }
    }
    impl ::std::convert::From<RescueBNBCall> for FlokiGrowCalls {
        fn from(var: RescueBNBCall) -> Self {
            FlokiGrowCalls::RescueBNB(var)
        }
    }
    impl ::std::convert::From<RouterCall> for FlokiGrowCalls {
        fn from(var: RouterCall) -> Self {
            FlokiGrowCalls::Router(var)
        }
    }
    impl ::std::convert::From<SellTaxesCall> for FlokiGrowCalls {
        fn from(var: SellTaxesCall) -> Self {
            FlokiGrowCalls::SellTaxes(var)
        }
    }
    impl ::std::convert::From<SetSellTaxesCall> for FlokiGrowCalls {
        fn from(var: SetSellTaxesCall) -> Self {
            FlokiGrowCalls::SetSellTaxes(var)
        }
    }
    impl ::std::convert::From<SetTaxesCall> for FlokiGrowCalls {
        fn from(var: SetTaxesCall) -> Self {
            FlokiGrowCalls::SetTaxes(var)
        }
    }
    impl ::std::convert::From<SetTradingStatusCall> for FlokiGrowCalls {
        fn from(var: SetTradingStatusCall) -> Self {
            FlokiGrowCalls::SetTradingStatus(var)
        }
    }
    impl ::std::convert::From<SwapEnabledCall> for FlokiGrowCalls {
        fn from(var: SwapEnabledCall) -> Self {
            FlokiGrowCalls::SwapEnabled(var)
        }
    }
    impl ::std::convert::From<SwapTokensAtAmountCall> for FlokiGrowCalls {
        fn from(var: SwapTokensAtAmountCall) -> Self {
            FlokiGrowCalls::SwapTokensAtAmount(var)
        }
    }
    impl ::std::convert::From<SymbolCall> for FlokiGrowCalls {
        fn from(var: SymbolCall) -> Self {
            FlokiGrowCalls::Symbol(var)
        }
    }
    impl ::std::convert::From<TaxesCall> for FlokiGrowCalls {
        fn from(var: TaxesCall) -> Self {
            FlokiGrowCalls::Taxes(var)
        }
    }
    impl ::std::convert::From<TokenFromReflectionCall> for FlokiGrowCalls {
        fn from(var: TokenFromReflectionCall) -> Self {
            FlokiGrowCalls::TokenFromReflection(var)
        }
    }
    impl ::std::convert::From<TotFeesPaidCall> for FlokiGrowCalls {
        fn from(var: TotFeesPaidCall) -> Self {
            FlokiGrowCalls::TotFeesPaid(var)
        }
    }
    impl ::std::convert::From<TotalSupplyCall> for FlokiGrowCalls {
        fn from(var: TotalSupplyCall) -> Self {
            FlokiGrowCalls::TotalSupply(var)
        }
    }
    impl ::std::convert::From<TradingEnabledCall> for FlokiGrowCalls {
        fn from(var: TradingEnabledCall) -> Self {
            FlokiGrowCalls::TradingEnabled(var)
        }
    }
    impl ::std::convert::From<TransferCall> for FlokiGrowCalls {
        fn from(var: TransferCall) -> Self {
            FlokiGrowCalls::Transfer(var)
        }
    }
    impl ::std::convert::From<TransferFromCall> for FlokiGrowCalls {
        fn from(var: TransferFromCall) -> Self {
            FlokiGrowCalls::TransferFrom(var)
        }
    }
    impl ::std::convert::From<TransferOwnershipCall> for FlokiGrowCalls {
        fn from(var: TransferOwnershipCall) -> Self {
            FlokiGrowCalls::TransferOwnership(var)
        }
    }
    impl ::std::convert::From<UpdateAllowedTransferCall> for FlokiGrowCalls {
        fn from(var: UpdateAllowedTransferCall) -> Self {
            FlokiGrowCalls::UpdateAllowedTransfer(var)
        }
    }
    impl ::std::convert::From<UpdateCooldownCall> for FlokiGrowCalls {
        fn from(var: UpdateCooldownCall) -> Self {
            FlokiGrowCalls::UpdateCooldown(var)
        }
    }
    impl ::std::convert::From<UpdateDonationWalletCall> for FlokiGrowCalls {
        fn from(var: UpdateDonationWalletCall) -> Self {
            FlokiGrowCalls::UpdateDonationWallet(var)
        }
    }
    impl ::std::convert::From<UpdateIsBlacklistedCall> for FlokiGrowCalls {
        fn from(var: UpdateIsBlacklistedCall) -> Self {
            FlokiGrowCalls::UpdateIsBlacklisted(var)
        }
    }
    impl ::std::convert::From<UpdateMarketingWalletCall> for FlokiGrowCalls {
        fn from(var: UpdateMarketingWalletCall) -> Self {
            FlokiGrowCalls::UpdateMarketingWallet(var)
        }
    }
    impl ::std::convert::From<UpdateMaxTxLimitCall> for FlokiGrowCalls {
        fn from(var: UpdateMaxTxLimitCall) -> Self {
            FlokiGrowCalls::UpdateMaxTxLimit(var)
        }
    }
    impl ::std::convert::From<UpdateMaxWalletlimitCall> for FlokiGrowCalls {
        fn from(var: UpdateMaxWalletlimitCall) -> Self {
            FlokiGrowCalls::UpdateMaxWalletlimit(var)
        }
    }
    impl ::std::convert::From<UpdateRouterAndPairCall> for FlokiGrowCalls {
        fn from(var: UpdateRouterAndPairCall) -> Self {
            FlokiGrowCalls::UpdateRouterAndPair(var)
        }
    }
    impl ::std::convert::From<UpdateSwapEnabledCall> for FlokiGrowCalls {
        fn from(var: UpdateSwapEnabledCall) -> Self {
            FlokiGrowCalls::UpdateSwapEnabled(var)
        }
    }
    impl ::std::convert::From<UpdateSwapTokensAtAmountCall> for FlokiGrowCalls {
        fn from(var: UpdateSwapTokensAtAmountCall) -> Self {
            FlokiGrowCalls::UpdateSwapTokensAtAmount(var)
        }
    }
    #[doc = "Container type for all return fields from the `allowance` function with signature `allowance(address,address)` and selector `[221, 98, 237, 62]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct AllowanceReturn(pub ethers::core::types::U256);
    #[doc = "Container type for all return fields from the `allowedTransfer` function with signature `allowedTransfer(address)` and selector `[98, 105, 94, 174]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct AllowedTransferReturn(pub bool);
    #[doc = "Container type for all return fields from the `approve` function with signature `approve(address,uint256)` and selector `[9, 94, 167, 179]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct ApproveReturn(pub bool);
    #[doc = "Container type for all return fields from the `balanceOf` function with signature `balanceOf(address)` and selector `[112, 160, 130, 49]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct BalanceOfReturn(pub ethers::core::types::U256);
    #[doc = "Container type for all return fields from the `coolDownEnabled` function with signature `coolDownEnabled()` and selector `[238, 54, 227, 89]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct CoolDownEnabledReturn(pub bool);
    #[doc = "Container type for all return fields from the `coolDownTime` function with signature `coolDownTime()` and selector `[210, 206, 13, 178]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct CoolDownTimeReturn(pub ethers::core::types::U256);
    #[doc = "Container type for all return fields from the `decimals` function with signature `decimals()` and selector `[49, 60, 229, 103]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct DecimalsReturn(pub u8);
    #[doc = "Container type for all return fields from the `decreaseAllowance` function with signature `decreaseAllowance(address,uint256)` and selector `[164, 87, 194, 215]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct DecreaseAllowanceReturn(pub bool);
    #[doc = "Container type for all return fields from the `donationWallet` function with signature `donationWallet()` and selector `[231, 185, 77, 244]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct DonationWalletReturn(pub ethers::core::types::Address);
    #[doc = "Container type for all return fields from the `genesis_block` function with signature `genesis_block()` and selector `[39, 74, 83, 60]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct GenesisBlockReturn(pub ethers::core::types::U256);
    #[doc = "Container type for all return fields from the `increaseAllowance` function with signature `increaseAllowance(address,uint256)` and selector `[57, 80, 147, 81]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct IncreaseAllowanceReturn(pub bool);
    #[doc = "Container type for all return fields from the `isExcludedFromFee` function with signature `isExcludedFromFee(address)` and selector `[83, 66, 172, 180]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct IsExcludedFromFeeReturn(pub bool);
    #[doc = "Container type for all return fields from the `isExcludedFromReward` function with signature `isExcludedFromReward(address)` and selector `[136, 248, 32, 32]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct IsExcludedFromRewardReturn(pub bool);
    #[doc = "Container type for all return fields from the `marketingWallet` function with signature `marketingWallet()` and selector `[117, 240, 168, 116]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct MarketingWalletReturn(pub ethers::core::types::Address);
    #[doc = "Container type for all return fields from the `maxBuyLimit` function with signature `maxBuyLimit()` and selector `[106, 165, 179, 127]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct MaxBuyLimitReturn(pub ethers::core::types::U256);
    #[doc = "Container type for all return fields from the `maxSellLimit` function with signature `maxSellLimit()` and selector `[101, 46, 47, 4]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct MaxSellLimitReturn(pub ethers::core::types::U256);
    #[doc = "Container type for all return fields from the `maxWalletLimit` function with signature `maxWalletLimit()` and selector `[102, 168, 141, 150]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct MaxWalletLimitReturn(pub ethers::core::types::U256);
    #[doc = "Container type for all return fields from the `name` function with signature `name()` and selector `[6, 253, 222, 3]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct NameReturn(pub String);
    #[doc = "Container type for all return fields from the `owner` function with signature `owner()` and selector `[141, 165, 203, 91]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct OwnerReturn(pub ethers::core::types::Address);
    #[doc = "Container type for all return fields from the `pair` function with signature `pair()` and selector `[168, 170, 27, 49]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct PairReturn(pub ethers::core::types::Address);
    #[doc = "Container type for all return fields from the `reflectionFromToken` function with signature `reflectionFromToken(uint256,bool)` and selector `[69, 73, 176, 57]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct ReflectionFromTokenReturn(pub ethers::core::types::U256);
    #[doc = "Container type for all return fields from the `router` function with signature `router()` and selector `[248, 135, 234, 64]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct RouterReturn(pub ethers::core::types::Address);
    #[doc = "Container type for all return fields from the `sellTaxes` function with signature `sellTaxes()` and selector `[246, 104, 149, 163]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct SellTaxesReturn {
        pub rfi: ethers::core::types::U256,
        pub marketing: ethers::core::types::U256,
        pub liquidity: ethers::core::types::U256,
        pub donation: ethers::core::types::U256,
    }
    #[doc = "Container type for all return fields from the `swapEnabled` function with signature `swapEnabled()` and selector `[109, 221, 23, 19]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct SwapEnabledReturn(pub bool);
    #[doc = "Container type for all return fields from the `swapTokensAtAmount` function with signature `swapTokensAtAmount()` and selector `[226, 244, 86, 5]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct SwapTokensAtAmountReturn(pub ethers::core::types::U256);
    #[doc = "Container type for all return fields from the `symbol` function with signature `symbol()` and selector `[149, 216, 155, 65]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct SymbolReturn(pub String);
    #[doc = "Container type for all return fields from the `taxes` function with signature `taxes()` and selector `[114, 143, 142, 234]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct TaxesReturn {
        pub rfi: ethers::core::types::U256,
        pub marketing: ethers::core::types::U256,
        pub liquidity: ethers::core::types::U256,
        pub donation: ethers::core::types::U256,
    }
    #[doc = "Container type for all return fields from the `tokenFromReflection` function with signature `tokenFromReflection(uint256)` and selector `[45, 131, 129, 25]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct TokenFromReflectionReturn(pub ethers::core::types::U256);
    #[doc = "Container type for all return fields from the `totFeesPaid` function with signature `totFeesPaid()` and selector `[155, 165, 228, 213]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct TotFeesPaidReturn {
        pub rfi: ethers::core::types::U256,
        pub marketing: ethers::core::types::U256,
        pub liquidity: ethers::core::types::U256,
        pub donation: ethers::core::types::U256,
    }
    #[doc = "Container type for all return fields from the `totalSupply` function with signature `totalSupply()` and selector `[24, 22, 13, 221]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct TotalSupplyReturn(pub ethers::core::types::U256);
    #[doc = "Container type for all return fields from the `tradingEnabled` function with signature `tradingEnabled()` and selector `[74, 218, 33, 139]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct TradingEnabledReturn(pub bool);
    #[doc = "Container type for all return fields from the `transfer` function with signature `transfer(address,uint256)` and selector `[169, 5, 156, 187]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct TransferReturn(pub bool);
    #[doc = "Container type for all return fields from the `transferFrom` function with signature `transferFrom(address,address,uint256)` and selector `[35, 184, 114, 221]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct TransferFromReturn(pub bool);
}

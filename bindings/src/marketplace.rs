pub use marketplace_mod::*;
#[allow(clippy::too_many_arguments, non_camel_case_types)]
pub mod marketplace_mod {
    #![allow(clippy::enum_variant_names)]
    #![allow(dead_code)]
    #![allow(clippy::type_complexity)]
    #![allow(unused_imports)]
    use ethers::contract::{
        builders::{ContractCall, Event},
        Contract, Lazy,
    };
    use ethers::core::{
        abi::{Abi, Detokenize, InvalidOutputType, Token, Tokenizable},
        types::*,
    };
    use ethers::providers::Middleware;
    #[doc = "Marketplace was auto-generated with ethers-rs Abigen. More information at: https://github.com/gakonst/ethers-rs"]
    use std::sync::Arc;
    pub static MARKETPLACE_ABI: ethers::contract::Lazy<ethers::core::abi::Abi> =
        ethers::contract::Lazy::new(|| {
            serde_json :: from_str ("[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_landNft\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"_swapToken\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"AuctionEnded\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"HighestBidIncreased\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"Refund\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\",\"components\":[],\"indexed\":true},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"Sale\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"_wallets\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"auctionFinalize\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"auctions\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"beneficiary\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"auctionEnd\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"address payable\",\"name\":\"highestBidder\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"highestBid\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"bool\",\"name\":\"open\",\"type\":\"bool\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"reserve\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"rioAmount\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"payable\",\"type\":\"function\",\"name\":\"bid\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"_rioAmount\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"payable\",\"type\":\"function\",\"name\":\"buy\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"rioAmount\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"payable\",\"type\":\"function\",\"name\":\"buyFromBank\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"_closingTime\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"address payable\",\"name\":\"_beneficiary\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"_reservePrice\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"createAuction\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"address payable\",\"name\":\"wallet\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"sell\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"sellBidPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"sellToBank\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_landBank\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"setLandBank\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"soldFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"withdrawAuction\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"withdrawFromLandBank\",\"outputs\":[]}]") . expect ("invalid abi")
        });
    #[doc = r" Bytecode of the #name contract"]
    pub static MARKETPLACE_BYTECODE: ethers::contract::Lazy<ethers::core::types::Bytes> =
        ethers::contract::Lazy::new(|| {
            "0x608060405260016000553480156200001657600080fd5b506040516200394b3803806200394b83398101604081905262000039916200010a565b6001600160a01b038216158015906200005a57506001600160a01b03811615155b620000ab5760405162461bcd60e51b815260206004820152601660248201527f63616e277420736574207a65726f206164647265737300000000000000000000604482015260640160405180910390fd5b600780546001600160a01b039384166001600160a01b031991821617909155600880549290931691811691909117909155600580549091163317905562000142565b80516001600160a01b03811681146200010557600080fd5b919050565b600080604083850312156200011e57600080fd5b6200012983620000ed565b91506200013960208401620000ed565b90509250929050565b6137f980620001526000396000f3fe6080604052600436106100fe5760003560e01c8063b5fc983311610095578063e757223011610064578063e75722301461032e578063ec58c09714610369578063f0640d9514610389578063f1bc8210146103a9578063f851a440146103df57600080fd5b8063b5fc9833146102bb578063d04c6983146102db578063d6febde8146102fb578063dc16bd431461030e57600080fd5b80637322e3bd116100d15780637322e3bd1461021b578063a36b14621461022e578063ad5c46481461025b578063b1cb48ef1461029b57600080fd5b806312151e3a14610103578063172b099d14610125578063571a26a014610165578063598647f814610208575b600080fd5b34801561010f57600080fd5b5061012361011e366004613507565b6103ff565b005b34801561013157600080fd5b50610152610140366004613533565b60026020526000908152604090205481565b6040519081526020015b60405180910390f35b34801561017157600080fd5b506101c8610180366004613533565b60016020819052600091825260409091208054918101546002820154600383015460048401546005909401546001600160a01b039586169593949290931692909160ff169086565b604080516001600160a01b0397881681526020810196909652939095169284019290925260608301521515608082015260a081019190915260c00161015c565b61012361021636600461354c565b6104d6565b61012361022936600461354c565b610c37565b34801561023a57600080fd5b50610152610249366004613533565b60046020526000908152604090205481565b34801561026757600080fd5b5061028373c02aaa39b223fe8d0a0e5c4f27ead9083c756cc281565b6040516001600160a01b03909116815260200161015c565b3480156102a757600080fd5b506101236102b636600461356e565b611773565b3480156102c757600080fd5b506101236102d6366004613533565b611987565b3480156102e757600080fd5b506101236102f63660046135ad565b611b35565b61012361030936600461354c565b611cb6565b34801561031a57600080fd5b50610123610329366004613533565b612989565b34801561033a57600080fd5b5061034e610349366004613533565b61317e565b6040805193845260208401929092529082015260600161015c565b34801561037557600080fd5b50610123610384366004613533565b6131fd565b34801561039557600080fd5b506101236103a43660046135e6565b6133be565b3480156103b557600080fd5b506102836103c4366004613533565b6003602052600090815260409020546001600160a01b031681565b3480156103eb57600080fd5b50600554610283906001600160a01b031681565b6005546001600160a01b0316331461046e5760405162461bcd60e51b815260206004820152602760248201527f4f6e6c792061646d696e2063616e207769746864726177206d6f6e65792066726044820152666f6d2062616e6b60c81b60648201526084015b60405180910390fd5b60065460405163f3fef3a360e01b81526001600160a01b039091169063f3fef3a3906104a0908590859060040161360a565b600060405180830381600087803b1580156104ba57600080fd5b505af11580156104ce573d6000803e3d6000fd5b505050505050565b6000546001146104f85760405162461bcd60e51b815260040161046590613623565b600260009081558281526001602052604090206004015460ff1661055e5760405162461bcd60e51b815260206004820152601760248201527f4e6f206f70656e65642061756374696f6e20666f756e640000000000000000006044820152606401610465565b60075460405163020604bf60e21b81526004810184905230916001600160a01b03169063081812fc90602401602060405180830381865afa1580156105a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105cb9190613647565b6001600160a01b0316146106215760405162461bcd60e51b815260206004820152601b60248201527f43616e6e6f7420636f6d706c657465207468652061756374696f6e00000000006044820152606401610465565b6000828152600160208190526040909120015442111561067c5760405162461bcd60e51b815260206004820152601660248201527520bab1ba34b7b71030b63932b0b23c9032b73232b21760511b6044820152606401610465565b6007546040516331a9108f60e11b8152600481018490526000916001600160a01b031690636352211e90602401602060405180830381865afa1580156106c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106ea9190613647565b9050336001600160a01b03821614156107565760405162461bcd60e51b815260206004820152602860248201527f546865206f776e65722063616e6e6f742062696420686973206f776e20636f6c6044820152676c65637469626c6560c01b6064820152608401610465565b811561096e5760008381526001602052604090206003015482116107bc5760405162461bcd60e51b815260206004820152601e60248201527f546865726520616c7265616479206973206120686967686572206269642e00006044820152606401610465565b6040516323b872dd60e01b81526000805160206137a4833981519152906323b872dd906107f190339030908790600401613664565b6020604051808303816000875af1158015610810573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108349190613688565b506000838152600160205260409020600301541561094157600083815260016020526040908190206002810154600390910154915163a9059cbb60e01b81526000805160206137a48339815191529263a9059cbb926108a2926001600160a01b03909116919060040161360a565b6020604051808303816000875af11580156108c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108e59190613688565b5060008381526001602052604090819020600281015460039091015491517fbb28353e4598c3b9199101a66e0989549b659a59a54d2c27fbb183f1932c8e6d92610938926001600160a01b03169161360a565b60405180910390a15b60008381526001602052604090206002810180546001600160a01b03191633179055600301829055610c2d565b600854604051633c50eec160e01b81526000916001600160a01b031690633c50eec1906109c59073c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2906000805160206137a4833981519152903490600401613664565b602060405180830381865afa1580156109e2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a0691906136aa565b6000858152600160205260409020600301549091508111610a695760405162461bcd60e51b815260206004820152601e60248201527f546865726520616c7265616479206973206120686967686572206269642e00006044820152606401610465565b60085460405163d5bcb9b560e01b81526001600160a01b039091169063d5bcb9b5903490610ac69073c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2906000805160206137a483398151915290849060009030906004016136c3565b6000604051808303818588803b158015610adf57600080fd5b505af1158015610af3573d6000803e3d6000fd5b505050600086815260016020526040902060030154159150610c06905057600084815260016020526040908190206002810154600390910154915163a9059cbb60e01b81526000805160206137a48339815191529263a9059cbb92610b67926001600160a01b03909116919060040161360a565b6020604051808303816000875af1158015610b86573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610baa9190613688565b5060008481526001602052604090819020600281015460039091015491517fbb28353e4598c3b9199101a66e0989549b659a59a54d2c27fbb183f1932c8e6d92610bfd926001600160a01b03169161360a565b60405180910390a15b60008481526001602052604090206002810180546001600160a01b03191633179055600301555b5050600160005550565b600054600114610c595760405162461bcd60e51b815260040161046590613623565b60026000556006546007546040516331a9108f60e11b8152600481018590526001600160a01b039283169290911690636352211e90602401602060405180830381865afa158015610cae573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cd29190613647565b6001600160a01b031614610d285760405162461bcd60e51b815260206004820152601e60248201527f4d757374206265206f776e65642062792062616e6b20636f6e747261637400006044820152606401610465565b8061129c57600754604051630986e64760e01b8152600481018490526001600160a01b0390911690630986e64790602401602060405180830381865afa158015610d76573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d9a91906136aa565b600760009054906101000a90046001600160a01b03166001600160a01b031663618b2add6040518163ffffffff1660e01b81526004016020604051808303816000875af1158015610def573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e1391906136f3565b6006546040516370a0823160e01b81526001600160a01b03909116600482015267ffffffffffffffff91909116906000805160206137a4833981519152906370a0823190602401602060405180830381865afa158015610e77573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e9b91906136aa565b610ea59190613733565b610eaf9190613755565b6008546001600160a01b0316633c50eec173c02aaa39b223fe8d0a0e5c4f27ead9083c756cc26000805160206137a48339815191526006610ef1346005613755565b610efb9190613733565b6040518463ffffffff1660e01b8152600401610f1993929190613664565b602060405180830381865afa158015610f36573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f5a91906136aa565b1015610f9e5760405162461bcd60e51b815260206004820152601360248201527226bab9ba103830bc9032bc30b1ba1031b7b4b760691b6044820152606401610465565b60065460405163036b68b760e01b81526001600160a01b039091169063036b68b790610fd0903390869060040161360a565b600060405180830381600087803b158015610fea57600080fd5b505af1158015610ffe573d6000803e3d6000fd5b50506008546001600160a01b0316915063d5bcb9b590506006611022346005613755565b61102c9190613733565b73c02aaa39b223fe8d0a0e5c4f27ead9083c756cc26000805160206137a4833981519152600661105d346005613755565b6110679190613733565b6008546001600160a01b0316633c50eec173c02aaa39b223fe8d0a0e5c4f27ead9083c756cc26000805160206137a483398151915260066110a9346005613755565b6110b39190613733565b6040518463ffffffff1660e01b81526004016110d193929190613664565b602060405180830381865afa1580156110ee573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061111291906136aa565b6006546040516001600160e01b031960e089901b16815261114395949392916001600160a01b0316906004016136c3565b6000604051808303818588803b15801561115c57600080fd5b505af1158015611170573d6000803e3d6000fd5b50505050506000600760009054906101000a90046001600160a01b03166001600160a01b0316634390d2a86040518163ffffffff1660e01b81526004016020604051808303816000875af11580156111cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111f09190613647565b6001600160a01b0316611204600634613733565b604051600081818185875af1925050503d8060008114611240576040519150601f19603f3d011682016040523d82523d6000602084013e611245565b606091505b50509050806112965760405162461bcd60e51b815260206004820152601b60248201527f5472616e7366657220746f2064657646756e64206661696c65642e00000000006044820152606401610465565b5061176a565b600754604051630986e64760e01b8152600481018490526001600160a01b0390911690630986e64790602401602060405180830381865afa1580156112e5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061130991906136aa565b600760009054906101000a90046001600160a01b03166001600160a01b031663618b2add6040518163ffffffff1660e01b81526004016020604051808303816000875af115801561135e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061138291906136f3565b6006546040516370a0823160e01b81526001600160a01b03909116600482015267ffffffffffffffff91909116906000805160206137a4833981519152906370a0823190602401602060405180830381865afa1580156113e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061140a91906136aa565b6114149190613733565b61141e9190613755565b8110156114635760405162461bcd60e51b815260206004820152601360248201527226bab9ba103830bc9032bc30b1ba1031b7b4b760691b6044820152606401610465565b6040516323b872dd60e01b81526000805160206137a4833981519152906323b872dd9061149890339030908690600401613664565b6020604051808303816000875af11580156114b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114db9190613688565b506008546000805160206137a48339815191529063095ea7b3906001600160a01b0316611509600685613733565b6040518363ffffffff1660e01b815260040161152692919061360a565b6020604051808303816000875af1158015611545573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115699190613688565b506008546001600160a01b031663d5bcb9b56000805160206137a483398151915273c02aaa39b223fe8d0a0e5c4f27ead9083c756cc26115aa600686613733565b600754604080516308721a5560e31b815290516000926001600160a01b031691634390d2a8916004808301926020929190829003018187875af11580156115f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116199190613647565b6040518663ffffffff1660e01b81526004016116399594939291906136c3565b600060405180830381600087803b15801561165357600080fd5b505af1158015611667573d6000803e3d6000fd5b5050600680546000805160206137a4833981519152935063a9059cbb92506001600160a01b03169061169a856005613755565b6116a49190613733565b6040518363ffffffff1660e01b81526004016116c192919061360a565b6020604051808303816000875af11580156116e0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117049190613688565b5060065460405163036b68b760e01b81526001600160a01b039091169063036b68b790611737903390869060040161360a565b600060405180830381600087803b15801561175157600080fd5b505af1158015611765573d6000803e3d6000fd5b505050505b50506001600055565b600084815260026020526040902054156117ee5760405162461bcd60e51b815260206004820152603660248201527f5468652073656c6563746564204e4654206973206f70656e20666f722073616c604482015275194b0818d85b9b9bdd08189948185d58dd1a5bdb995960521b6064820152608401610465565b60008481526001602052604090206004015460ff16156118605760405162461bcd60e51b815260206004820152602760248201527f5468652073656c6563746564204e465420616c72656164792068617320616e2060448201526630bab1ba34b7b760c91b6064820152608401610465565b6007546040516331a9108f60e11b81526004810186905233916001600160a01b031690636352211e90602401602060405180830381865afa1580156118a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118cd9190613647565b6001600160a01b0316146119235760405162461bcd60e51b815260206004820181905260248201527f4f6e6c79206f776e65722063616e2061756374696f6e2074686973206974656d6044820152606401610465565b600084815260016020526040902080546001600160a01b0319166001600160a01b0384161790556119548342613774565b6000948552600160208190526040909520808601919091556005810191909155600401805460ff19169093179092555050565b6000818152600160205260409020546001600160a01b031633146119fb5760405162461bcd60e51b815260206004820152602560248201527f4f6e6c792062656e65666963696572792063616e20776974686472617720617560448201526431ba34b7b760d91b6064820152608401610465565b60008181526001602052604090206004015460ff168015611a2e5750600081815260016020819052604090912001544210155b8015611a4a575060008181526001602052604090206003015415155b15611aea57600081815260016020526040908190206002810154600390910154915163a9059cbb60e01b81526000805160206137a48339815191529263a9059cbb92611aa5926001600160a01b03909116919060040161360a565b6020604051808303816000875af1158015611ac4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ae89190613688565b505b6000908152600160208190526040822080546001600160a01b031990811682559181018390556002810180549092169091556003810182905560048101805460ff1916905560050155565b6007546040516331a9108f60e11b81526004810185905233916001600160a01b031690636352211e90602401602060405180830381865afa158015611b7e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ba29190613647565b6001600160a01b031614611bf85760405162461bcd60e51b815260206004820152601d60248201527f4f6e6c79206f776e65722063616e2073656c6c2074686973206974656d0000006044820152606401610465565b60008381526001602052604090206004015460ff1615611c725760405162461bcd60e51b815260206004820152602f60248201527f43616e6e6f742073656c6c20616e206974656d2077686963682068617320616e60448201526e1030b1ba34bb329030bab1ba34b7b760891b6064820152608401610465565b60008381526002602052604090208290558115611cb157600083815260036020526040902080546001600160a01b0319166001600160a01b0383161790555b505050565b600054600114611cd85760405162461bcd60e51b815260040161046590613623565b600260009081558281526001602052604090206004015460ff16158015611d0c575060008281526002602052604090205415155b611d585760405162461bcd60e51b815260206004820152601f60248201527f54686520636f6c6c65637469626c65206973206e6f7420666f722073616c65006044820152606401610465565b6007546040516331a9108f60e11b8152600481018490526000916001600160a01b031690636352211e90602401602060405180830381865afa158015611da2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dc69190613647565b9050336001600160a01b0382161415611e335760405162461bcd60e51b815260206004820152602960248201527f5468652073656c6c65722063616e6e6f742062757920686973206f776e20636f6044820152686c6c65637469626c6560b81b6064820152608401610465565b60075460408051630bd43adf60e31b815290516000926001600160a01b031691635ea1d6f8916004808301926020929190829003018187875af1158015611e7e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ea291906136aa565b9050826123ef5760008481526002602052604090819020546008549151633c50eec160e01b815290916001600160a01b031690633c50eec190611f0f9073c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2906000805160206137a4833981519152903490600401613664565b602060405180830381865afa158015611f2c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f5091906136aa565b1015611f915760405162461bcd60e51b815260206004820152601060248201526f4e6f7420656e6f7567682066756e647360801b6044820152606401610465565b6007546040516323b872dd60e01b81526001600160a01b03909116906323b872dd90611fc590859033908990600401613664565b600060405180830381600087803b158015611fdf57600080fd5b505af1158015611ff3573d6000803e3d6000fd5b50505050600060646002836120089190613733565b6120129034613755565b61201c9190613733565b90506000606461202c8434613755565b6120369190613733565b905060006064612047600286613733565b6120519034613755565b61205b9190613733565b90506000818361206b863461378c565b612075919061378c565b61207f919061378c565b60008981526003602052604080822054905192935090916001600160a01b039091169083908381818185875af1925050503d80600081146120dc576040519150601f19603f3d011682016040523d82523d6000602084013e6120e1565b606091505b50509050806121325760405162461bcd60e51b815260206004820152601a60248201527f5472616e7366657220746f2073656c6c6572206661696c65642e0000000000006044820152606401610465565b600754604080516308721a5560e31b815290516000926001600160a01b031691634390d2a8916004808301926020929190829003018187875af115801561217d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121a19190613647565b6001600160a01b03168660405160006040518083038185875af1925050503d80600081146121eb576040519150601f19603f3d011682016040523d82523d6000602084013e6121f0565b606091505b50509050806122415760405162461bcd60e51b815260206004820152601c60248201527f5472616e7366657220746f206465767266756e64206661696c65642e000000006044820152606401610465565b600754604051633bebfc0f60e21b8152600481018c90526000916001600160a01b03169063efaff03c906024016020604051808303816000875af115801561228d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122b19190613647565b6001600160a01b03168660405160006040518083038185875af1925050503d80600081146122fb576040519150601f19603f3d011682016040523d82523d6000602084013e612300565b606091505b50509050806123515760405162461bcd60e51b815260206004820152601f60248201527f5472616e7366657220746f206669727374206f776e6572206661696c65642e006044820152606401610465565b60085460065460405163d5bcb9b560e01b81526001600160a01b039283169263d5bcb9b59289926123b19273c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2926000805160206137a483398151915292869260009216906004016136c3565b6000604051808303818588803b1580156123ca57600080fd5b505af11580156123de573d6000803e3d6000fd5b50505050505050505050505061290b565b600084815260026020526040902054831461243f5760405162461bcd60e51b815260206004820152601060248201526f4e6f7420656e6f7567682066756e647360801b6044820152606401610465565b6000606461244e600284613733565b6124589086613755565b6124629190613733565b9050600060646124728487613755565b61247c9190613733565b90506000606461248d600286613733565b6124979088613755565b6124a19190613733565b9050600081836124b1868a61378c565b6124bb919061378c565b6124c5919061378c565b6040516323b872dd60e01b81529091506000805160206137a4833981519152906323b872dd906124fd90339030908990600401613664565b6020604051808303816000875af115801561251c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125409190613688565b5060085460405163095ea7b360e01b81526000805160206137a48339815191529163095ea7b39161257f916001600160a01b031690889060040161360a565b6020604051808303816000875af115801561259e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125c29190613688565b50600854600754604080516308721a5560e31b815290516001600160a01b039384169363d5bcb9b5936000805160206137a48339815191529373c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2938b936000931691634390d2a8916004808301926020929190829003018187875af1158015612643573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126679190613647565b6040518663ffffffff1660e01b81526004016126879594939291906136c3565b600060405180830381600087803b1580156126a157600080fd5b505af11580156126b5573d6000803e3d6000fd5b50506006546040516323b872dd60e01b81526000805160206137a483398151915293506323b872dd92506126fb9133916001600160a01b03909116908790600401613664565b6020604051808303816000875af115801561271a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061273e9190613688565b506040516323b872dd60e01b81526000805160206137a4833981519152906323b872dd906127749033908a908690600401613664565b6020604051808303816000875af1158015612793573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127b79190613688565b50600754604051633bebfc0f60e21b8152600481018a90526000805160206137a4833981519152916323b872dd9133916001600160a01b03169063efaff03c906024016020604051808303816000875af1158015612819573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061283d9190613647565b866040518463ffffffff1660e01b815260040161285c93929190613664565b6020604051808303816000875af115801561287b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061289f9190613688565b506007546040516323b872dd60e01b81526001600160a01b03909116906323b872dd906128d490899033908d90600401613664565b600060405180830381600087803b1580156128ee57600080fd5b505af1158015612902573d6000803e3d6000fd5b50505050505050505b600084815260026020908152604080832080546004845282852055839055600382529182902080546001600160a01b0319169055905134815233916001600160a01b0385169187917f88863d5e20f64464b554931394e2e4b6f09c10015147215bf26b3ba5070acebe910160405180910390a4505060016000555050565b6000546001146129ab5760405162461bcd60e51b815260040161046590613623565b60026000556007546040516331a9108f60e11b81526004810183905233916001600160a01b031690636352211e90602401602060405180830381865afa1580156129f9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a1d9190613647565b6001600160a01b031614612a735760405162461bcd60e51b815260206004820152601f60248201527f4f6e6c79206f776e65722063616e2066696e616c697a652061756374696f6e006044820152606401610465565b612a7c81613489565b612aba5760405162461bcd60e51b815260206004820152600f60248201526e43616e6e6f742066696e616c697a6560881b6044820152606401610465565b600081815260016020526040902060030154156130d6576000818152600160209081526040808320600201546007548251630bd43adf60e31b815292516001600160a01b0392831695949190921692635ea1d6f89260048083019392829003018187875af1158015612b30573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b5491906136aa565b905060006064612b65600284613733565b600086815260016020526040902060030154612b819190613755565b612b8b9190613733565b60008581526001602052604081206003015491925090606490612baf908590613755565b612bb99190613733565b905060006064612bca600286613733565b600088815260016020526040902060030154612be69190613755565b612bf09190613733565b6000878152600160205260408120600301549192509082908490612c1590879061378c565b612c1f919061378c565b612c29919061378c565b60085460405163095ea7b360e01b81529192506000805160206137a48339815191529163095ea7b391612c6c916001600160a01b0390911690889060040161360a565b6020604051808303816000875af1158015612c8b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612caf9190613688565b50600854600754604080516308721a5560e31b815290516001600160a01b039384169363d5bcb9b5936000805160206137a48339815191529373c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2938b936000931691634390d2a8916004808301926020929190829003018187875af1158015612d30573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d549190613647565b6040518663ffffffff1660e01b8152600401612d749594939291906136c3565b600060405180830381600087803b158015612d8e57600080fd5b505af1158015612da2573d6000803e3d6000fd5b505060065460405163a9059cbb60e01b81526000805160206137a4833981519152935063a9059cbb9250612de4916001600160a01b031690869060040161360a565b6020604051808303816000875af1158015612e03573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e279190613688565b506000878152600160205260409081902054905163a9059cbb60e01b81526000805160206137a48339815191529163a9059cbb91612e73916001600160a01b031690859060040161360a565b6020604051808303816000875af1158015612e92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612eb69190613688565b50600754604051633bebfc0f60e21b8152600481018990526000805160206137a48339815191529163a9059cbb916001600160a01b039091169063efaff03c906024016020604051808303816000875af1158015612f18573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f3c9190613647565b856040518363ffffffff1660e01b8152600401612f5a92919061360a565b6020604051808303816000875af1158015612f79573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f9d9190613688565b50600087815260016020908152604091829020805460039091015492519283526001600160a01b03898116939116918a917f88863d5e20f64464b554931394e2e4b6f09c10015147215bf26b3ba5070acebe910160405180910390a46007546040516331a9108f60e11b8152600481018990526000916001600160a01b031690636352211e90602401602060405180830381865afa158015613043573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130679190613647565b6007546040516323b872dd60e01b81529192506001600160a01b0316906323b872dd9061309c9084908b908d90600401613664565b600060405180830381600087803b1580156130b657600080fd5b505af11580156130ca573d6000803e3d6000fd5b50505050505050505050505b60008181526001602052604090819020600281015460039091015491517fdaec4582d5d9595688c8c98545fdd1c696d41c6aeaeb636737e84ed2f5c00eda92613128926001600160a01b03169161360a565b60405180910390a16000908152600160208190526040822080546001600160a01b0319908116825581830184905560028201805490911690556003810183905560048101805460ff191690556005018290559055565b60008181526002602052604081205481908190156131af5750505060008181526002602052604081205490806131f6565b600084815260016020526040902060030154156131e157505050600081815260016020526040812060030154816131f6565b50505060008181526004602052604081205481905b9193909250565b60005460011461321f5760405162461bcd60e51b815260040161046590613623565b60026000556007546040516331a9108f60e11b81526004810183905233916001600160a01b031690636352211e90602401602060405180830381865afa15801561326d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132919190613647565b6001600160a01b0316146132e75760405162461bcd60e51b815260206004820152601b60248201527f4d757374206265206f776e6564206279206d73672e73656e64657200000000006044820152606401610465565b6007546006546040516323b872dd60e01b81526001600160a01b03928316926323b872dd92613320923392909116908690600401613664565b600060405180830381600087803b15801561333a57600080fd5b505af115801561334e573d6000803e3d6000fd5b505060065460405163d33f1b1d60e01b81526001600160a01b03909116925063d33f1b1d9150613384903390859060040161360a565b600060405180830381600087803b15801561339e57600080fd5b505af11580156133b2573d6000803e3d6000fd5b50506001600055505050565b6001600160a01b03811661340d5760405162461bcd60e51b815260206004820152601660248201527563616e277420736574207a65726f206164647265737360501b6044820152606401610465565b6005546001600160a01b031633146134675760405162461bcd60e51b815260206004820152601960248201527f4f6e6c792061646d696e2063616e20696e697469616c697a65000000000000006044820152606401610465565b600680546001600160a01b0319166001600160a01b0392909216919091179055565b60008181526001602052604081206004015460ff1680156134da5750600082815260016020526040902060058101546003909101541015806134da5750600082815260016020526040902060030154155b156134e757506001919050565b506000919050565b6001600160a01b038116811461350457600080fd5b50565b6000806040838503121561351a57600080fd5b8235613525816134ef565b946020939093013593505050565b60006020828403121561354557600080fd5b5035919050565b6000806040838503121561355f57600080fd5b50508035926020909101359150565b6000806000806080858703121561358457600080fd5b8435935060208501359250604085013561359d816134ef565b9396929550929360600135925050565b6000806000606084860312156135c257600080fd5b833592506020840135915060408401356135db816134ef565b809150509250925092565b6000602082840312156135f857600080fd5b8135613603816134ef565b9392505050565b6001600160a01b03929092168252602082015260400190565b6020808252600a90820152695245454e5452414e435960b01b604082015260600190565b60006020828403121561365957600080fd5b8151613603816134ef565b6001600160a01b039384168152919092166020820152604081019190915260600190565b60006020828403121561369a57600080fd5b8151801515811461360357600080fd5b6000602082840312156136bc57600080fd5b5051919050565b6001600160a01b039586168152938516602085015260408401929092526060830152909116608082015260a00190565b60006020828403121561370557600080fd5b815167ffffffffffffffff8116811461360357600080fd5b634e487b7160e01b600052601160045260246000fd5b60008261375057634e487b7160e01b600052601260045260246000fd5b500490565b600081600019048311821515161561376f5761376f61371d565b500290565b600082198211156137875761378761371d565b500190565b60008282101561379e5761379e61371d565b50039056fe000000000000000000000000f21661d0d1d76d3ecb8e1b9f1c923dbfffae4097a264697066735822122009d34503fdce98f6fb0168189f9d1a3ee9e7e13cbf555a8bed47c0101ab6e4cd64736f6c634300080a0033" . parse () . expect ("invalid bytecode")
        });
    pub struct Marketplace<M>(ethers::contract::Contract<M>);
    impl<M> Clone for Marketplace<M> {
        fn clone(&self) -> Self {
            Marketplace(self.0.clone())
        }
    }
    impl<M> std::ops::Deref for Marketplace<M> {
        type Target = ethers::contract::Contract<M>;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl<M: ethers::providers::Middleware> std::fmt::Debug for Marketplace<M> {
        fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
            f.debug_tuple(stringify!(Marketplace))
                .field(&self.address())
                .finish()
        }
    }
    impl<M: ethers::providers::Middleware> Marketplace<M> {
        #[doc = r" Creates a new contract instance with the specified `ethers`"]
        #[doc = r" client at the given `Address`. The contract derefs to a `ethers::Contract`"]
        #[doc = r" object"]
        pub fn new<T: Into<ethers::core::types::Address>>(
            address: T,
            client: ::std::sync::Arc<M>,
        ) -> Self {
            ethers::contract::Contract::new(address.into(), MARKETPLACE_ABI.clone(), client).into()
        }
        #[doc = r" Constructs the general purpose `Deployer` instance based on the provided constructor arguments and sends it."]
        #[doc = r" Returns a new instance of a deployer that returns an instance of this contract after sending the transaction"]
        #[doc = r""]
        #[doc = r" Notes:"]
        #[doc = r" 1. If there are no constructor arguments, you should pass `()` as the argument."]
        #[doc = r" 1. The default poll duration is 7 seconds."]
        #[doc = r" 1. The default number of confirmations is 1 block."]
        #[doc = r""]
        #[doc = r""]
        #[doc = r" # Example"]
        #[doc = r""]
        #[doc = r" Generate contract bindings with `abigen!` and deploy a new contract instance."]
        #[doc = r""]
        #[doc = r" *Note*: this requires a `bytecode` and `abi` object in the `greeter.json` artifact."]
        #[doc = r""]
        #[doc = r" ```ignore"]
        #[doc = r" # async fn deploy<M: ethers::providers::Middleware>(client: ::std::sync::Arc<M>) {"]
        #[doc = r#"     abigen!(Greeter,"../greeter.json");"#]
        #[doc = r""]
        #[doc = r#"    let greeter_contract = Greeter::deploy(client, "Hello world!".to_string()).unwrap().send().await.unwrap();"#]
        #[doc = r"    let msg = greeter_contract.greet().call().await.unwrap();"]
        #[doc = r" # }"]
        #[doc = r" ```"]
        pub fn deploy<T: ethers::core::abi::Tokenize>(
            client: ::std::sync::Arc<M>,
            constructor_args: T,
        ) -> Result<
            ethers::contract::builders::ContractDeployer<M, Self>,
            ethers::contract::ContractError<M>,
        > {
            let factory = ethers::contract::ContractFactory::new(
                MARKETPLACE_ABI.clone(),
                MARKETPLACE_BYTECODE.clone().into(),
                client,
            );
            let deployer = factory.deploy(constructor_args)?;
            let deployer = ethers::contract::ContractDeployer::new(deployer);
            Ok(deployer)
        }
        #[doc = "Calls the contract's `WETH` (0xad5c4648) function"]
        pub fn weth(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([173, 92, 70, 72], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `_wallets` (0xf1bc8210) function"]
        pub fn wallets(
            &self,
            p0: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([241, 188, 130, 16], p0)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `admin` (0xf851a440) function"]
        pub fn admin(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([248, 81, 164, 64], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `auctionFinalize` (0xdc16bd43) function"]
        pub fn auction_finalize(
            &self,
            token_id: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([220, 22, 189, 67], token_id)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `auctions` (0x571a26a0) function"]
        pub fn auctions(
            &self,
            p0: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<
            M,
            (
                ethers::core::types::Address,
                ethers::core::types::U256,
                ethers::core::types::Address,
                ethers::core::types::U256,
                bool,
                ethers::core::types::U256,
            ),
        > {
            self.0
                .method_hash([87, 26, 38, 160], p0)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `bid` (0x598647f8) function"]
        pub fn bid(
            &self,
            token_id: ethers::core::types::U256,
            rio_amount: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([89, 134, 71, 248], (token_id, rio_amount))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `buy` (0xd6febde8) function"]
        pub fn buy(
            &self,
            token_id: ethers::core::types::U256,
            rio_amount: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([214, 254, 189, 232], (token_id, rio_amount))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `buyFromBank` (0x7322e3bd) function"]
        pub fn buy_from_bank(
            &self,
            token_id: ethers::core::types::U256,
            rio_amount: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([115, 34, 227, 189], (token_id, rio_amount))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `createAuction` (0xb1cb48ef) function"]
        pub fn create_auction(
            &self,
            token_id: ethers::core::types::U256,
            closing_time: ethers::core::types::U256,
            beneficiary: ethers::core::types::Address,
            reserve_price: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash(
                    [177, 203, 72, 239],
                    (token_id, closing_time, beneficiary, reserve_price),
                )
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `getPrice` (0xe7572230) function"]
        pub fn get_price(
            &self,
            token_id: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<
            M,
            (
                ethers::core::types::U256,
                ethers::core::types::U256,
                ethers::core::types::U256,
            ),
        > {
            self.0
                .method_hash([231, 87, 34, 48], token_id)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `sell` (0xd04c6983) function"]
        pub fn sell(
            &self,
            token_id: ethers::core::types::U256,
            price: ethers::core::types::U256,
            wallet: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([208, 76, 105, 131], (token_id, price, wallet))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `sellBidPrice` (0x172b099d) function"]
        pub fn sell_bid_price(
            &self,
            p0: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([23, 43, 9, 157], p0)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `sellToBank` (0xec58c097) function"]
        pub fn sell_to_bank(
            &self,
            token_id: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([236, 88, 192, 151], token_id)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `setLandBank` (0xf0640d95) function"]
        pub fn set_land_bank(
            &self,
            land_bank: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([240, 100, 13, 149], land_bank)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `soldFor` (0xa36b1462) function"]
        pub fn sold_for(
            &self,
            p0: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([163, 107, 20, 98], p0)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `withdrawAuction` (0xb5fc9833) function"]
        pub fn withdraw_auction(
            &self,
            token_id: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([181, 252, 152, 51], token_id)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `withdrawFromLandBank` (0x12151e3a) function"]
        pub fn withdraw_from_land_bank(
            &self,
            beneficiary: ethers::core::types::Address,
            amount: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([18, 21, 30, 58], (beneficiary, amount))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Gets the contract's `AuctionEnded` event"]
        pub fn auction_ended_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, AuctionEndedFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `HighestBidIncreased` event"]
        pub fn highest_bid_increased_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, HighestBidIncreasedFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `Refund` event"]
        pub fn refund_filter(&self) -> ethers::contract::builders::Event<M, RefundFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `Sale` event"]
        pub fn sale_filter(&self) -> ethers::contract::builders::Event<M, SaleFilter> {
            self.0.event()
        }
        #[doc = r" Returns an [`Event`](#ethers_contract::builders::Event) builder for all events of this contract"]
        pub fn events(&self) -> ethers::contract::builders::Event<M, MarketplaceEvents> {
            self.0.event_with_filter(Default::default())
        }
    }
    impl<M: ethers::providers::Middleware> From<ethers::contract::Contract<M>> for Marketplace<M> {
        fn from(contract: ethers::contract::Contract<M>) -> Self {
            Self(contract)
        }
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "AuctionEnded", abi = "AuctionEnded(address,uint256)")]
    pub struct AuctionEndedFilter {
        pub winner: ethers::core::types::Address,
        pub amount: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(
        name = "HighestBidIncreased",
        abi = "HighestBidIncreased(address,uint256,uint256)"
    )]
    pub struct HighestBidIncreasedFilter {
        #[ethevent(indexed)]
        pub bidder: ethers::core::types::Address,
        pub amount: ethers::core::types::U256,
        pub token_id: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "Refund", abi = "Refund(address,uint256)")]
    pub struct RefundFilter {
        pub bidder: ethers::core::types::Address,
        pub amount: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "Sale", abi = "Sale(uint256,address,address,uint256)")]
    pub struct SaleFilter {
        #[ethevent(indexed)]
        pub token_id: ethers::core::types::U256,
        #[ethevent(indexed)]
        pub from: ethers::core::types::Address,
        #[ethevent(indexed)]
        pub to: ethers::core::types::Address,
        pub value: ethers::core::types::U256,
    }
    #[derive(Debug, Clone, PartialEq, Eq, ethers :: contract :: EthAbiType)]
    pub enum MarketplaceEvents {
        AuctionEndedFilter(AuctionEndedFilter),
        HighestBidIncreasedFilter(HighestBidIncreasedFilter),
        RefundFilter(RefundFilter),
        SaleFilter(SaleFilter),
    }
    impl ethers::contract::EthLogDecode for MarketplaceEvents {
        fn decode_log(log: &ethers::core::abi::RawLog) -> Result<Self, ethers::core::abi::Error>
        where
            Self: Sized,
        {
            if let Ok(decoded) = AuctionEndedFilter::decode_log(log) {
                return Ok(MarketplaceEvents::AuctionEndedFilter(decoded));
            }
            if let Ok(decoded) = HighestBidIncreasedFilter::decode_log(log) {
                return Ok(MarketplaceEvents::HighestBidIncreasedFilter(decoded));
            }
            if let Ok(decoded) = RefundFilter::decode_log(log) {
                return Ok(MarketplaceEvents::RefundFilter(decoded));
            }
            if let Ok(decoded) = SaleFilter::decode_log(log) {
                return Ok(MarketplaceEvents::SaleFilter(decoded));
            }
            Err(ethers::core::abi::Error::InvalidData)
        }
    }
    impl ::std::fmt::Display for MarketplaceEvents {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            match self {
                MarketplaceEvents::AuctionEndedFilter(element) => element.fmt(f),
                MarketplaceEvents::HighestBidIncreasedFilter(element) => element.fmt(f),
                MarketplaceEvents::RefundFilter(element) => element.fmt(f),
                MarketplaceEvents::SaleFilter(element) => element.fmt(f),
            }
        }
    }
    #[doc = "Container type for all input parameters for the `WETH`function with signature `WETH()` and selector `[173, 92, 70, 72]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "WETH", abi = "WETH()")]
    pub struct WethCall;
    #[doc = "Container type for all input parameters for the `_wallets`function with signature `_wallets(uint256)` and selector `[241, 188, 130, 16]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "_wallets", abi = "_wallets(uint256)")]
    pub struct WalletsCall(pub ethers::core::types::U256);
    #[doc = "Container type for all input parameters for the `admin`function with signature `admin()` and selector `[248, 81, 164, 64]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "admin", abi = "admin()")]
    pub struct AdminCall;
    #[doc = "Container type for all input parameters for the `auctionFinalize`function with signature `auctionFinalize(uint256)` and selector `[220, 22, 189, 67]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "auctionFinalize", abi = "auctionFinalize(uint256)")]
    pub struct AuctionFinalizeCall {
        pub token_id: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `auctions`function with signature `auctions(uint256)` and selector `[87, 26, 38, 160]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "auctions", abi = "auctions(uint256)")]
    pub struct AuctionsCall(pub ethers::core::types::U256);
    #[doc = "Container type for all input parameters for the `bid`function with signature `bid(uint256,uint256)` and selector `[89, 134, 71, 248]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "bid", abi = "bid(uint256,uint256)")]
    pub struct BidCall {
        pub token_id: ethers::core::types::U256,
        pub rio_amount: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `buy`function with signature `buy(uint256,uint256)` and selector `[214, 254, 189, 232]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "buy", abi = "buy(uint256,uint256)")]
    pub struct BuyCall {
        pub token_id: ethers::core::types::U256,
        pub rio_amount: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `buyFromBank`function with signature `buyFromBank(uint256,uint256)` and selector `[115, 34, 227, 189]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "buyFromBank", abi = "buyFromBank(uint256,uint256)")]
    pub struct BuyFromBankCall {
        pub token_id: ethers::core::types::U256,
        pub rio_amount: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `createAuction`function with signature `createAuction(uint256,uint256,address,uint256)` and selector `[177, 203, 72, 239]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "createAuction",
        abi = "createAuction(uint256,uint256,address,uint256)"
    )]
    pub struct CreateAuctionCall {
        pub token_id: ethers::core::types::U256,
        pub closing_time: ethers::core::types::U256,
        pub beneficiary: ethers::core::types::Address,
        pub reserve_price: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `getPrice`function with signature `getPrice(uint256)` and selector `[231, 87, 34, 48]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "getPrice", abi = "getPrice(uint256)")]
    pub struct GetPriceCall {
        pub token_id: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `sell`function with signature `sell(uint256,uint256,address)` and selector `[208, 76, 105, 131]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "sell", abi = "sell(uint256,uint256,address)")]
    pub struct SellCall {
        pub token_id: ethers::core::types::U256,
        pub price: ethers::core::types::U256,
        pub wallet: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `sellBidPrice`function with signature `sellBidPrice(uint256)` and selector `[23, 43, 9, 157]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "sellBidPrice", abi = "sellBidPrice(uint256)")]
    pub struct SellBidPriceCall(pub ethers::core::types::U256);
    #[doc = "Container type for all input parameters for the `sellToBank`function with signature `sellToBank(uint256)` and selector `[236, 88, 192, 151]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "sellToBank", abi = "sellToBank(uint256)")]
    pub struct SellToBankCall {
        pub token_id: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `setLandBank`function with signature `setLandBank(address)` and selector `[240, 100, 13, 149]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "setLandBank", abi = "setLandBank(address)")]
    pub struct SetLandBankCall {
        pub land_bank: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `soldFor`function with signature `soldFor(uint256)` and selector `[163, 107, 20, 98]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "soldFor", abi = "soldFor(uint256)")]
    pub struct SoldForCall(pub ethers::core::types::U256);
    #[doc = "Container type for all input parameters for the `withdrawAuction`function with signature `withdrawAuction(uint256)` and selector `[181, 252, 152, 51]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "withdrawAuction", abi = "withdrawAuction(uint256)")]
    pub struct WithdrawAuctionCall {
        pub token_id: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `withdrawFromLandBank`function with signature `withdrawFromLandBank(address,uint256)` and selector `[18, 21, 30, 58]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "withdrawFromLandBank",
        abi = "withdrawFromLandBank(address,uint256)"
    )]
    pub struct WithdrawFromLandBankCall {
        pub beneficiary: ethers::core::types::Address,
        pub amount: ethers::core::types::U256,
    }
    #[derive(Debug, Clone, PartialEq, Eq, ethers :: contract :: EthAbiType)]
    pub enum MarketplaceCalls {
        Weth(WethCall),
        Wallets(WalletsCall),
        Admin(AdminCall),
        AuctionFinalize(AuctionFinalizeCall),
        Auctions(AuctionsCall),
        Bid(BidCall),
        Buy(BuyCall),
        BuyFromBank(BuyFromBankCall),
        CreateAuction(CreateAuctionCall),
        GetPrice(GetPriceCall),
        Sell(SellCall),
        SellBidPrice(SellBidPriceCall),
        SellToBank(SellToBankCall),
        SetLandBank(SetLandBankCall),
        SoldFor(SoldForCall),
        WithdrawAuction(WithdrawAuctionCall),
        WithdrawFromLandBank(WithdrawFromLandBankCall),
    }
    impl ethers::core::abi::AbiDecode for MarketplaceCalls {
        fn decode(data: impl AsRef<[u8]>) -> Result<Self, ethers::core::abi::AbiError> {
            if let Ok(decoded) = <WethCall as ethers::core::abi::AbiDecode>::decode(data.as_ref()) {
                return Ok(MarketplaceCalls::Weth(decoded));
            }
            if let Ok(decoded) =
                <WalletsCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(MarketplaceCalls::Wallets(decoded));
            }
            if let Ok(decoded) = <AdminCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(MarketplaceCalls::Admin(decoded));
            }
            if let Ok(decoded) =
                <AuctionFinalizeCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(MarketplaceCalls::AuctionFinalize(decoded));
            }
            if let Ok(decoded) =
                <AuctionsCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(MarketplaceCalls::Auctions(decoded));
            }
            if let Ok(decoded) = <BidCall as ethers::core::abi::AbiDecode>::decode(data.as_ref()) {
                return Ok(MarketplaceCalls::Bid(decoded));
            }
            if let Ok(decoded) = <BuyCall as ethers::core::abi::AbiDecode>::decode(data.as_ref()) {
                return Ok(MarketplaceCalls::Buy(decoded));
            }
            if let Ok(decoded) =
                <BuyFromBankCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(MarketplaceCalls::BuyFromBank(decoded));
            }
            if let Ok(decoded) =
                <CreateAuctionCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(MarketplaceCalls::CreateAuction(decoded));
            }
            if let Ok(decoded) =
                <GetPriceCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(MarketplaceCalls::GetPrice(decoded));
            }
            if let Ok(decoded) = <SellCall as ethers::core::abi::AbiDecode>::decode(data.as_ref()) {
                return Ok(MarketplaceCalls::Sell(decoded));
            }
            if let Ok(decoded) =
                <SellBidPriceCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(MarketplaceCalls::SellBidPrice(decoded));
            }
            if let Ok(decoded) =
                <SellToBankCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(MarketplaceCalls::SellToBank(decoded));
            }
            if let Ok(decoded) =
                <SetLandBankCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(MarketplaceCalls::SetLandBank(decoded));
            }
            if let Ok(decoded) =
                <SoldForCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(MarketplaceCalls::SoldFor(decoded));
            }
            if let Ok(decoded) =
                <WithdrawAuctionCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(MarketplaceCalls::WithdrawAuction(decoded));
            }
            if let Ok(decoded) =
                <WithdrawFromLandBankCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(MarketplaceCalls::WithdrawFromLandBank(decoded));
            }
            Err(ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ethers::core::abi::AbiEncode for MarketplaceCalls {
        fn encode(self) -> Vec<u8> {
            match self {
                MarketplaceCalls::Weth(element) => element.encode(),
                MarketplaceCalls::Wallets(element) => element.encode(),
                MarketplaceCalls::Admin(element) => element.encode(),
                MarketplaceCalls::AuctionFinalize(element) => element.encode(),
                MarketplaceCalls::Auctions(element) => element.encode(),
                MarketplaceCalls::Bid(element) => element.encode(),
                MarketplaceCalls::Buy(element) => element.encode(),
                MarketplaceCalls::BuyFromBank(element) => element.encode(),
                MarketplaceCalls::CreateAuction(element) => element.encode(),
                MarketplaceCalls::GetPrice(element) => element.encode(),
                MarketplaceCalls::Sell(element) => element.encode(),
                MarketplaceCalls::SellBidPrice(element) => element.encode(),
                MarketplaceCalls::SellToBank(element) => element.encode(),
                MarketplaceCalls::SetLandBank(element) => element.encode(),
                MarketplaceCalls::SoldFor(element) => element.encode(),
                MarketplaceCalls::WithdrawAuction(element) => element.encode(),
                MarketplaceCalls::WithdrawFromLandBank(element) => element.encode(),
            }
        }
    }
    impl ::std::fmt::Display for MarketplaceCalls {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            match self {
                MarketplaceCalls::Weth(element) => element.fmt(f),
                MarketplaceCalls::Wallets(element) => element.fmt(f),
                MarketplaceCalls::Admin(element) => element.fmt(f),
                MarketplaceCalls::AuctionFinalize(element) => element.fmt(f),
                MarketplaceCalls::Auctions(element) => element.fmt(f),
                MarketplaceCalls::Bid(element) => element.fmt(f),
                MarketplaceCalls::Buy(element) => element.fmt(f),
                MarketplaceCalls::BuyFromBank(element) => element.fmt(f),
                MarketplaceCalls::CreateAuction(element) => element.fmt(f),
                MarketplaceCalls::GetPrice(element) => element.fmt(f),
                MarketplaceCalls::Sell(element) => element.fmt(f),
                MarketplaceCalls::SellBidPrice(element) => element.fmt(f),
                MarketplaceCalls::SellToBank(element) => element.fmt(f),
                MarketplaceCalls::SetLandBank(element) => element.fmt(f),
                MarketplaceCalls::SoldFor(element) => element.fmt(f),
                MarketplaceCalls::WithdrawAuction(element) => element.fmt(f),
                MarketplaceCalls::WithdrawFromLandBank(element) => element.fmt(f),
            }
        }
    }
    impl ::std::convert::From<WethCall> for MarketplaceCalls {
        fn from(var: WethCall) -> Self {
            MarketplaceCalls::Weth(var)
        }
    }
    impl ::std::convert::From<WalletsCall> for MarketplaceCalls {
        fn from(var: WalletsCall) -> Self {
            MarketplaceCalls::Wallets(var)
        }
    }
    impl ::std::convert::From<AdminCall> for MarketplaceCalls {
        fn from(var: AdminCall) -> Self {
            MarketplaceCalls::Admin(var)
        }
    }
    impl ::std::convert::From<AuctionFinalizeCall> for MarketplaceCalls {
        fn from(var: AuctionFinalizeCall) -> Self {
            MarketplaceCalls::AuctionFinalize(var)
        }
    }
    impl ::std::convert::From<AuctionsCall> for MarketplaceCalls {
        fn from(var: AuctionsCall) -> Self {
            MarketplaceCalls::Auctions(var)
        }
    }
    impl ::std::convert::From<BidCall> for MarketplaceCalls {
        fn from(var: BidCall) -> Self {
            MarketplaceCalls::Bid(var)
        }
    }
    impl ::std::convert::From<BuyCall> for MarketplaceCalls {
        fn from(var: BuyCall) -> Self {
            MarketplaceCalls::Buy(var)
        }
    }
    impl ::std::convert::From<BuyFromBankCall> for MarketplaceCalls {
        fn from(var: BuyFromBankCall) -> Self {
            MarketplaceCalls::BuyFromBank(var)
        }
    }
    impl ::std::convert::From<CreateAuctionCall> for MarketplaceCalls {
        fn from(var: CreateAuctionCall) -> Self {
            MarketplaceCalls::CreateAuction(var)
        }
    }
    impl ::std::convert::From<GetPriceCall> for MarketplaceCalls {
        fn from(var: GetPriceCall) -> Self {
            MarketplaceCalls::GetPrice(var)
        }
    }
    impl ::std::convert::From<SellCall> for MarketplaceCalls {
        fn from(var: SellCall) -> Self {
            MarketplaceCalls::Sell(var)
        }
    }
    impl ::std::convert::From<SellBidPriceCall> for MarketplaceCalls {
        fn from(var: SellBidPriceCall) -> Self {
            MarketplaceCalls::SellBidPrice(var)
        }
    }
    impl ::std::convert::From<SellToBankCall> for MarketplaceCalls {
        fn from(var: SellToBankCall) -> Self {
            MarketplaceCalls::SellToBank(var)
        }
    }
    impl ::std::convert::From<SetLandBankCall> for MarketplaceCalls {
        fn from(var: SetLandBankCall) -> Self {
            MarketplaceCalls::SetLandBank(var)
        }
    }
    impl ::std::convert::From<SoldForCall> for MarketplaceCalls {
        fn from(var: SoldForCall) -> Self {
            MarketplaceCalls::SoldFor(var)
        }
    }
    impl ::std::convert::From<WithdrawAuctionCall> for MarketplaceCalls {
        fn from(var: WithdrawAuctionCall) -> Self {
            MarketplaceCalls::WithdrawAuction(var)
        }
    }
    impl ::std::convert::From<WithdrawFromLandBankCall> for MarketplaceCalls {
        fn from(var: WithdrawFromLandBankCall) -> Self {
            MarketplaceCalls::WithdrawFromLandBank(var)
        }
    }
}

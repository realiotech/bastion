pub use marketplace::*;
#[allow(clippy::too_many_arguments, non_camel_case_types)]
pub mod marketplace {
    #![allow(clippy::enum_variant_names)]
    #![allow(dead_code)]
    #![allow(clippy::type_complexity)]
    #![allow(unused_imports)]
    use ethers::contract::{
        builders::{ContractCall, Event},
        Contract, Lazy,
    };
    use ethers::core::{
        abi::{Abi, Detokenize, InvalidOutputType, Token, Tokenizable},
        types::*,
    };
    use ethers::providers::Middleware;
    #[doc = "Marketplace was auto-generated with ethers-rs Abigen. More information at: https://github.com/gakonst/ethers-rs"]
    use std::sync::Arc;
    pub static MARKETPLACE_ABI: ethers::contract::Lazy<ethers::core::abi::Abi> =
        ethers::contract::Lazy::new(|| {
            ethers :: core :: utils :: __serde_json :: from_str ("[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_landNFT\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"MarketPlaceCannotSetAddressZero\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"MarketPlaceNotAuthorized\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"AuctionEnded\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"HighestBidIncreased\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"Refund\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\",\"components\":[],\"indexed\":true},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"Sale\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"_wallets\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"auctionFinalize\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"auctions\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"beneficiary\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"auctionEnd\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"address payable\",\"name\":\"highestBidder\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"highestBid\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"bool\",\"name\":\"open\",\"type\":\"bool\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"reserve\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"rioAmount\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"payable\",\"type\":\"function\",\"name\":\"bid\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"_rioAmount\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"payable\",\"type\":\"function\",\"name\":\"buy\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"rioAmount\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"payable\",\"type\":\"function\",\"name\":\"buyFromBank\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"_closingTime\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"address payable\",\"name\":\"_beneficiary\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"_reservePrice\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"createAuction\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"landBank\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"landNFT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"address payable\",\"name\":\"wallet\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"sell\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"sellBidPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"sellToBank\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_landBank\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"setLandBank\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"soldFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"withdrawAuction\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"withdrawFromLandBank\",\"outputs\":[]}]") . expect ("invalid abi")
        });
    #[doc = r" Bytecode of the #name contract"]
    pub static MARKETPLACE_BYTECODE: ethers::contract::Lazy<ethers::core::types::Bytes> =
        ethers::contract::Lazy::new(|| {
            "0x608060405260016000553480156200001657600080fd5b5060405162002d3038038062002d30833981016040819052620000399162000090565b6001600160a01b03811662000061576040516383c806d560e01b815260040160405180910390fd5b600780546001600160a01b039092166001600160a01b03199283161790556005805490911633179055620000c2565b600060208284031215620000a357600080fd5b81516001600160a01b0381168114620000bb57600080fd5b9392505050565b612c5e80620000d26000396000f3fe6080604052600436106101145760003560e01c8063b5fc9833116100a0578063ec58c09711610064578063ec58c0971461039f578063efd32973146103bf578063f0640d95146103df578063f1bc8210146103ff578063f851a4401461043557600080fd5b8063b5fc9833146102f1578063d04c698314610311578063d6febde814610331578063dc16bd4314610344578063e75722301461036457600080fd5b8063598647f8116100e7578063598647f8146102565780637322e3bd14610269578063a36b14621461027c578063ad5c4648146102a9578063b1cb48ef146102d157600080fd5b806312151e3a14610119578063172b099d1461013b57806339d022e11461017b578063571a26a0146101b3575b600080fd5b34801561012557600080fd5b5061013961013436600461299c565b610455565b005b34801561014757600080fd5b506101686101563660046129c8565b60026020526000908152604090205481565b6040519081526020015b60405180910390f35b34801561018757600080fd5b5060075461019b906001600160a01b031681565b6040516001600160a01b039091168152602001610172565b3480156101bf57600080fd5b506102166101ce3660046129c8565b60016020819052600091825260409091208054918101546002820154600383015460048401546005909401546001600160a01b039586169593949290931692909160ff169086565b604080516001600160a01b0397881681526020810196909652939095169284019290925260608301521515608082015260a081019190915260c001610172565b6101396102643660046129e1565b61052c565b6101396102773660046129e1565b610afb565b34801561028857600080fd5b506101686102973660046129c8565b60046020526000908152604090205481565b3480156102b557600080fd5b5061019b73c02aaa39b223fe8d0a0e5c4f27ead9083c756cc281565b3480156102dd57600080fd5b506101396102ec366004612a03565b6110c7565b3480156102fd57600080fd5b5061013961030c3660046129c8565b6112db565b34801561031d57600080fd5b5061013961032c366004612a42565b611489565b61013961033f3660046129e1565b61160a565b34801561035057600080fd5b5061013961035f3660046129c8565b611fed565b34801561037057600080fd5b5061038461037f3660046129c8565b61266a565b60408051938452602084019290925290820152606001610172565b3480156103ab57600080fd5b506101396103ba3660046129c8565b6126e9565b3480156103cb57600080fd5b5060065461019b906001600160a01b031681565b3480156103eb57600080fd5b506101396103fa366004612a7b565b6128aa565b34801561040b57600080fd5b5061019b61041a3660046129c8565b6003602052600090815260409020546001600160a01b031681565b34801561044157600080fd5b5060055461019b906001600160a01b031681565b6005546001600160a01b031633146104c45760405162461bcd60e51b815260206004820152602760248201527f4f6e6c792061646d696e2063616e207769746864726177206d6f6e65792066726044820152666f6d2062616e6b60c81b60648201526084015b60405180910390fd5b60065460405163f3fef3a360e01b81526001600160a01b039091169063f3fef3a3906104f69085908590600401612a9f565b600060405180830381600087803b15801561051057600080fd5b505af1158015610524573d6000803e3d6000fd5b505050505050565b60005460011461054e5760405162461bcd60e51b81526004016104bb90612ab8565b600260009081558281526001602052604090206004015460ff166105b45760405162461bcd60e51b815260206004820152601760248201527f4e6f206f70656e65642061756374696f6e20666f756e6400000000000000000060448201526064016104bb565b60075460405163020604bf60e21b81526004810184905230916001600160a01b03169063081812fc90602401602060405180830381865afa1580156105fd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106219190612adc565b6001600160a01b0316146106775760405162461bcd60e51b815260206004820152601b60248201527f43616e6e6f7420636f6d706c657465207468652061756374696f6e000000000060448201526064016104bb565b600082815260016020819052604090912001544211156106d25760405162461bcd60e51b815260206004820152601660248201527520bab1ba34b7b71030b63932b0b23c9032b73232b21760511b60448201526064016104bb565b6007546040516331a9108f60e11b8152600481018490526000916001600160a01b031690636352211e90602401602060405180830381865afa15801561071c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107409190612adc565b90506001600160a01b03811633036107ab5760405162461bcd60e51b815260206004820152602860248201527f546865206f776e65722063616e6e6f742062696420686973206f776e20636f6c6044820152676c65637469626c6560c01b60648201526084016104bb565b81156109c35760008381526001602052604090206003015482116108115760405162461bcd60e51b815260206004820152601e60248201527f546865726520616c7265616479206973206120686967686572206269642e000060448201526064016104bb565b6040516323b872dd60e01b8152600080516020612c09833981519152906323b872dd9061084690339030908790600401612af9565b6020604051808303816000875af1158015610865573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108899190612b1d565b506000838152600160205260409020600301541561099657600083815260016020526040908190206002810154600390910154915163a9059cbb60e01b8152600080516020612c098339815191529263a9059cbb926108f7926001600160a01b039091169190600401612a9f565b6020604051808303816000875af1158015610916573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061093a9190612b1d565b5060008381526001602052604090819020600281015460039091015491517fbb28353e4598c3b9199101a66e0989549b659a59a54d2c27fbb183f1932c8e6d9261098d926001600160a01b031691612a9f565b60405180910390a15b60008381526001602052604090206002810180546001600160a01b03191633179055600301829055610af1565b60008381526001602052604090206003015415610acf57600083815260016020526040908190206002810154600390910154915163a9059cbb60e01b8152600080516020612c098339815191529263a9059cbb92610a30926001600160a01b039091169190600401612a9f565b6020604051808303816000875af1158015610a4f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a739190612b1d565b5060008381526001602052604090819020600281015460039091015491517fbb28353e4598c3b9199101a66e0989549b659a59a54d2c27fbb183f1932c8e6d92610ac6926001600160a01b031691612a9f565b60405180910390a15b600083815260016020526040902060020180546001600160a01b031916331790555b5050600160005550565b600054600114610b1d5760405162461bcd60e51b81526004016104bb90612ab8565b60026000556006546007546040516331a9108f60e11b8152600481018590526001600160a01b039283169290911690636352211e90602401602060405180830381865afa158015610b72573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b969190612adc565b6001600160a01b031614610bec5760405162461bcd60e51b815260206004820152601e60248201527f4d757374206265206f776e65642062792062616e6b20636f6e7472616374000060448201526064016104bb565b80600003610d7f5760065460405163036b68b760e01b81526001600160a01b039091169063036b68b790610c269033908690600401612a9f565b600060405180830381600087803b158015610c4057600080fd5b505af1158015610c54573d6000803e3d6000fd5b505050506000600760009054906101000a90046001600160a01b03166001600160a01b0316634390d2a86040518163ffffffff1660e01b81526004016020604051808303816000875af1158015610caf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cd39190612adc565b6001600160a01b0316610ce7600634612b55565b604051600081818185875af1925050503d8060008114610d23576040519150601f19603f3d011682016040523d82523d6000602084013e610d28565b606091505b5050905080610d795760405162461bcd60e51b815260206004820152601b60248201527f5472616e7366657220746f2064657646756e64206661696c65642e000000000060448201526064016104bb565b506110be565b600754604051630986e64760e01b8152600481018490526001600160a01b0390911690630986e64790602401602060405180830381865afa158015610dc8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dec9190612b77565b600760009054906101000a90046001600160a01b03166001600160a01b031663618b2add6040518163ffffffff1660e01b81526004016020604051808303816000875af1158015610e41573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e659190612b90565b6006546040516370a0823160e01b81526001600160a01b03909116600482015267ffffffffffffffff9190911690600080516020612c09833981519152906370a0823190602401602060405180830381865afa158015610ec9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eed9190612b77565b610ef79190612b55565b610f019190612bba565b811015610f465760405162461bcd60e51b815260206004820152601360248201527226bab9ba103830bc9032bc30b1ba1031b7b4b760691b60448201526064016104bb565b6040516323b872dd60e01b8152600080516020612c09833981519152906323b872dd90610f7b90339030908690600401612af9565b6020604051808303816000875af1158015610f9a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fbe9190612b1d565b5060068054600080516020612c098339815191529163a9059cbb916001600160a01b031690610fee856005612bba565b610ff89190612b55565b6040518363ffffffff1660e01b8152600401611015929190612a9f565b6020604051808303816000875af1158015611034573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110589190612b1d565b5060065460405163036b68b760e01b81526001600160a01b039091169063036b68b79061108b9033908690600401612a9f565b600060405180830381600087803b1580156110a557600080fd5b505af11580156110b9573d6000803e3d6000fd5b505050505b50506001600055565b600084815260026020526040902054156111425760405162461bcd60e51b815260206004820152603660248201527f5468652073656c6563746564204e4654206973206f70656e20666f722073616c604482015275194b0818d85b9b9bdd08189948185d58dd1a5bdb995960521b60648201526084016104bb565b60008481526001602052604090206004015460ff16156111b45760405162461bcd60e51b815260206004820152602760248201527f5468652073656c6563746564204e465420616c72656164792068617320616e2060448201526630bab1ba34b7b760c91b60648201526084016104bb565b6007546040516331a9108f60e11b81526004810186905233916001600160a01b031690636352211e90602401602060405180830381865afa1580156111fd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112219190612adc565b6001600160a01b0316146112775760405162461bcd60e51b815260206004820181905260248201527f4f6e6c79206f776e65722063616e2061756374696f6e2074686973206974656d60448201526064016104bb565b600084815260016020526040902080546001600160a01b0319166001600160a01b0384161790556112a88342612bd9565b6000948552600160208190526040909520808601919091556005810191909155600401805460ff19169093179092555050565b6000818152600160205260409020546001600160a01b0316331461134f5760405162461bcd60e51b815260206004820152602560248201527f4f6e6c792062656e65666963696572792063616e20776974686472617720617560448201526431ba34b7b760d91b60648201526084016104bb565b60008181526001602052604090206004015460ff1680156113825750600081815260016020819052604090912001544210155b801561139e575060008181526001602052604090206003015415155b1561143e57600081815260016020526040908190206002810154600390910154915163a9059cbb60e01b8152600080516020612c098339815191529263a9059cbb926113f9926001600160a01b039091169190600401612a9f565b6020604051808303816000875af1158015611418573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061143c9190612b1d565b505b6000908152600160208190526040822080546001600160a01b031990811682559181018390556002810180549092169091556003810182905560048101805460ff1916905560050155565b6007546040516331a9108f60e11b81526004810185905233916001600160a01b031690636352211e90602401602060405180830381865afa1580156114d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114f69190612adc565b6001600160a01b03161461154c5760405162461bcd60e51b815260206004820152601d60248201527f4f6e6c79206f776e65722063616e2073656c6c2074686973206974656d00000060448201526064016104bb565b60008381526001602052604090206004015460ff16156115c65760405162461bcd60e51b815260206004820152602f60248201527f43616e6e6f742073656c6c20616e206974656d2077686963682068617320616e60448201526e1030b1ba34bb329030bab1ba34b7b760891b60648201526084016104bb565b6000838152600260205260409020829055811561160557600083815260036020526040902080546001600160a01b0319166001600160a01b0383161790555b505050565b60005460011461162c5760405162461bcd60e51b81526004016104bb90612ab8565b600260009081558281526001602052604090206004015460ff16158015611660575060008281526002602052604090205415155b6116ac5760405162461bcd60e51b815260206004820152601f60248201527f54686520636f6c6c65637469626c65206973206e6f7420666f722073616c650060448201526064016104bb565b6007546040516331a9108f60e11b8152600481018490526000916001600160a01b031690636352211e90602401602060405180830381865afa1580156116f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061171a9190612adc565b90506001600160a01b03811633036117865760405162461bcd60e51b815260206004820152602960248201527f5468652073656c6c65722063616e6e6f742062757920686973206f776e20636f6044820152686c6c65637469626c6560b81b60648201526084016104bb565b60075460408051630bd43adf60e31b815290516000926001600160a01b031691635ea1d6f8916004808301926020929190829003018187875af11580156117d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117f59190612b77565b905082600003611bcb576007546040516323b872dd60e01b81526001600160a01b03909116906323b872dd9061183390859033908990600401612af9565b600060405180830381600087803b15801561184d57600080fd5b505af1158015611861573d6000803e3d6000fd5b50505050600060646002836118769190612b55565b6118809034612bba565b61188a9190612b55565b90506000606461189a8434612bba565b6118a49190612b55565b9050600060646118b5600286612b55565b6118bf9034612bba565b6118c99190612b55565b9050600081836118d98634612bf1565b6118e39190612bf1565b6118ed9190612bf1565b60008981526003602052604080822054905192935090916001600160a01b039091169083908381818185875af1925050503d806000811461194a576040519150601f19603f3d011682016040523d82523d6000602084013e61194f565b606091505b50509050806119a05760405162461bcd60e51b815260206004820152601a60248201527f5472616e7366657220746f2073656c6c6572206661696c65642e00000000000060448201526064016104bb565b600754604080516308721a5560e31b815290516000926001600160a01b031691634390d2a8916004808301926020929190829003018187875af11580156119eb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a0f9190612adc565b6001600160a01b03168660405160006040518083038185875af1925050503d8060008114611a59576040519150601f19603f3d011682016040523d82523d6000602084013e611a5e565b606091505b5050905080611aaf5760405162461bcd60e51b815260206004820152601c60248201527f5472616e7366657220746f206465767266756e64206661696c65642e0000000060448201526064016104bb565b600754604051633bebfc0f60e21b8152600481018c90526000916001600160a01b03169063efaff03c906024016020604051808303816000875af1158015611afb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b1f9190612adc565b6001600160a01b03168660405160006040518083038185875af1925050503d8060008114611b69576040519150601f19603f3d011682016040523d82523d6000602084013e611b6e565b606091505b5050905080611bbf5760405162461bcd60e51b815260206004820152601f60248201527f5472616e7366657220746f206669727374206f776e6572206661696c65642e0060448201526064016104bb565b50505050505050611f6f565b6000848152600260205260409020548314611c1b5760405162461bcd60e51b815260206004820152601060248201526f4e6f7420656e6f7567682066756e647360801b60448201526064016104bb565b60006064611c2a600284612b55565b611c349086612bba565b611c3e9190612b55565b905060006064611c4e8487612bba565b611c589190612b55565b905060006064611c69600286612b55565b611c739088612bba565b611c7d9190612b55565b905060008183611c8d868a612bf1565b611c979190612bf1565b611ca19190612bf1565b6040516323b872dd60e01b8152909150600080516020612c09833981519152906323b872dd90611cd990339030908990600401612af9565b6020604051808303816000875af1158015611cf8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d1c9190612b1d565b506006546040516323b872dd60e01b8152600080516020612c09833981519152916323b872dd91611d5f9133916001600160a01b03909116908790600401612af9565b6020604051808303816000875af1158015611d7e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611da29190612b1d565b506040516323b872dd60e01b8152600080516020612c09833981519152906323b872dd90611dd89033908a908690600401612af9565b6020604051808303816000875af1158015611df7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e1b9190612b1d565b50600754604051633bebfc0f60e21b8152600481018a9052600080516020612c09833981519152916323b872dd9133916001600160a01b03169063efaff03c906024016020604051808303816000875af1158015611e7d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ea19190612adc565b866040518463ffffffff1660e01b8152600401611ec093929190612af9565b6020604051808303816000875af1158015611edf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f039190612b1d565b506007546040516323b872dd60e01b81526001600160a01b03909116906323b872dd90611f3890899033908d90600401612af9565b600060405180830381600087803b158015611f5257600080fd5b505af1158015611f66573d6000803e3d6000fd5b50505050505050505b600084815260026020908152604080832080546004845282852055839055600382529182902080546001600160a01b0319169055905134815233916001600160a01b0385169187917f88863d5e20f64464b554931394e2e4b6f09c10015147215bf26b3ba5070acebe910160405180910390a4505060016000555050565b60005460011461200f5760405162461bcd60e51b81526004016104bb90612ab8565b60026000556007546040516331a9108f60e11b81526004810183905233916001600160a01b031690636352211e90602401602060405180830381865afa15801561205d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120819190612adc565b6001600160a01b0316146120d75760405162461bcd60e51b815260206004820152601f60248201527f4f6e6c79206f776e65722063616e2066696e616c697a652061756374696f6e0060448201526064016104bb565b6120e08161291e565b61211e5760405162461bcd60e51b815260206004820152600f60248201526e43616e6e6f742066696e616c697a6560881b60448201526064016104bb565b600081815260016020526040902060030154156125c2576000818152600160209081526040808320600201546007548251630bd43adf60e31b815292516001600160a01b0392831695949190921692635ea1d6f89260048083019392829003018187875af1158015612194573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121b89190612b77565b9050600060646121c9600284612b55565b6000868152600160205260409020600301546121e59190612bba565b6121ef9190612b55565b60008581526001602052604081206003015491925090606490612213908590612bba565b61221d9190612b55565b90506000606461222e600286612b55565b60008881526001602052604090206003015461224a9190612bba565b6122549190612b55565b6000878152600160205260408120600301549192509082908490612279908790612bf1565b6122839190612bf1565b61228d9190612bf1565b60065460405163a9059cbb60e01b8152919250600080516020612c098339815191529163a9059cbb916122d0916001600160a01b03909116908690600401612a9f565b6020604051808303816000875af11580156122ef573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123139190612b1d565b506000878152600160205260409081902054905163a9059cbb60e01b8152600080516020612c098339815191529163a9059cbb9161235f916001600160a01b0316908590600401612a9f565b6020604051808303816000875af115801561237e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123a29190612b1d565b50600754604051633bebfc0f60e21b815260048101899052600080516020612c098339815191529163a9059cbb916001600160a01b039091169063efaff03c906024016020604051808303816000875af1158015612404573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124289190612adc565b856040518363ffffffff1660e01b8152600401612446929190612a9f565b6020604051808303816000875af1158015612465573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124899190612b1d565b50600087815260016020908152604091829020805460039091015492519283526001600160a01b03898116939116918a917f88863d5e20f64464b554931394e2e4b6f09c10015147215bf26b3ba5070acebe910160405180910390a46007546040516331a9108f60e11b8152600481018990526000916001600160a01b031690636352211e90602401602060405180830381865afa15801561252f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125539190612adc565b6007546040516323b872dd60e01b81529192506001600160a01b0316906323b872dd906125889084908b908d90600401612af9565b600060405180830381600087803b1580156125a257600080fd5b505af11580156125b6573d6000803e3d6000fd5b50505050505050505050505b60008181526001602052604090819020600281015460039091015491517fdaec4582d5d9595688c8c98545fdd1c696d41c6aeaeb636737e84ed2f5c00eda92612614926001600160a01b031691612a9f565b60405180910390a16000908152600160208190526040822080546001600160a01b0319908116825581830184905560028201805490911690556003810183905560048101805460ff191690556005018290559055565b600081815260026020526040812054819081901561269b5750505060008181526002602052604081205490806126e2565b600084815260016020526040902060030154156126cd57505050600081815260016020526040812060030154816126e2565b50505060008181526004602052604081205481905b9193909250565b60005460011461270b5760405162461bcd60e51b81526004016104bb90612ab8565b60026000556007546040516331a9108f60e11b81526004810183905233916001600160a01b031690636352211e90602401602060405180830381865afa158015612759573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061277d9190612adc565b6001600160a01b0316146127d35760405162461bcd60e51b815260206004820152601b60248201527f4d757374206265206f776e6564206279206d73672e73656e646572000000000060448201526064016104bb565b6007546006546040516323b872dd60e01b81526001600160a01b03928316926323b872dd9261280c923392909116908690600401612af9565b600060405180830381600087803b15801561282657600080fd5b505af115801561283a573d6000803e3d6000fd5b505060065460405163d33f1b1d60e01b81526001600160a01b03909116925063d33f1b1d91506128709033908590600401612a9f565b600060405180830381600087803b15801561288a57600080fd5b505af115801561289e573d6000803e3d6000fd5b50506001600055505050565b6005546001600160a01b031633146128d55760405163e90f753f60e01b815260040160405180910390fd5b6001600160a01b0381166128fc576040516383c806d560e01b815260040160405180910390fd5b600680546001600160a01b0319166001600160a01b0392909216919091179055565b60008181526001602052604081206004015460ff16801561296f57506000828152600160205260409020600581015460039091015410158061296f5750600082815260016020526040902060030154155b1561297c57506001919050565b506000919050565b6001600160a01b038116811461299957600080fd5b50565b600080604083850312156129af57600080fd5b82356129ba81612984565b946020939093013593505050565b6000602082840312156129da57600080fd5b5035919050565b600080604083850312156129f457600080fd5b50508035926020909101359150565b60008060008060808587031215612a1957600080fd5b84359350602085013592506040850135612a3281612984565b9396929550929360600135925050565b600080600060608486031215612a5757600080fd5b83359250602084013591506040840135612a7081612984565b809150509250925092565b600060208284031215612a8d57600080fd5b8135612a9881612984565b9392505050565b6001600160a01b03929092168252602082015260400190565b6020808252600a90820152695245454e5452414e435960b01b604082015260600190565b600060208284031215612aee57600080fd5b8151612a9881612984565b6001600160a01b039384168152919092166020820152604081019190915260600190565b600060208284031215612b2f57600080fd5b81518015158114612a9857600080fd5b634e487b7160e01b600052601160045260246000fd5b600082612b7257634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215612b8957600080fd5b5051919050565b600060208284031215612ba257600080fd5b815167ffffffffffffffff81168114612a9857600080fd5b6000816000190483118215151615612bd457612bd4612b3f565b500290565b60008219821115612bec57612bec612b3f565b500190565b600082821015612c0357612c03612b3f565b50039056fe000000000000000000000000f21661d0d1d76d3ecb8e1b9f1c923dbfffae4097a2646970667358221220f6e53ca8050eafc0969fe320e2dc3ffe615c421c282f21d8b9c5b2eb222fb04764736f6c634300080f0033" . parse () . expect ("invalid bytecode")
        });
    pub struct Marketplace<M>(ethers::contract::Contract<M>);
    impl<M> Clone for Marketplace<M> {
        fn clone(&self) -> Self {
            Marketplace(self.0.clone())
        }
    }
    impl<M> std::ops::Deref for Marketplace<M> {
        type Target = ethers::contract::Contract<M>;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl<M: ethers::providers::Middleware> std::fmt::Debug for Marketplace<M> {
        fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
            f.debug_tuple(stringify!(Marketplace))
                .field(&self.address())
                .finish()
        }
    }
    impl<M: ethers::providers::Middleware> Marketplace<M> {
        #[doc = r" Creates a new contract instance with the specified `ethers`"]
        #[doc = r" client at the given `Address`. The contract derefs to a `ethers::Contract`"]
        #[doc = r" object"]
        pub fn new<T: Into<ethers::core::types::Address>>(
            address: T,
            client: ::std::sync::Arc<M>,
        ) -> Self {
            ethers::contract::Contract::new(address.into(), MARKETPLACE_ABI.clone(), client).into()
        }
        #[doc = r" Constructs the general purpose `Deployer` instance based on the provided constructor arguments and sends it."]
        #[doc = r" Returns a new instance of a deployer that returns an instance of this contract after sending the transaction"]
        #[doc = r""]
        #[doc = r" Notes:"]
        #[doc = r" 1. If there are no constructor arguments, you should pass `()` as the argument."]
        #[doc = r" 1. The default poll duration is 7 seconds."]
        #[doc = r" 1. The default number of confirmations is 1 block."]
        #[doc = r""]
        #[doc = r""]
        #[doc = r" # Example"]
        #[doc = r""]
        #[doc = r" Generate contract bindings with `abigen!` and deploy a new contract instance."]
        #[doc = r""]
        #[doc = r" *Note*: this requires a `bytecode` and `abi` object in the `greeter.json` artifact."]
        #[doc = r""]
        #[doc = r" ```ignore"]
        #[doc = r" # async fn deploy<M: ethers::providers::Middleware>(client: ::std::sync::Arc<M>) {"]
        #[doc = r#"     abigen!(Greeter,"../greeter.json");"#]
        #[doc = r""]
        #[doc = r#"    let greeter_contract = Greeter::deploy(client, "Hello world!".to_string()).unwrap().send().await.unwrap();"#]
        #[doc = r"    let msg = greeter_contract.greet().call().await.unwrap();"]
        #[doc = r" # }"]
        #[doc = r" ```"]
        pub fn deploy<T: ethers::core::abi::Tokenize>(
            client: ::std::sync::Arc<M>,
            constructor_args: T,
        ) -> ::std::result::Result<
            ethers::contract::builders::ContractDeployer<M, Self>,
            ethers::contract::ContractError<M>,
        > {
            let factory = ethers::contract::ContractFactory::new(
                MARKETPLACE_ABI.clone(),
                MARKETPLACE_BYTECODE.clone().into(),
                client,
            );
            let deployer = factory.deploy(constructor_args)?;
            let deployer = ethers::contract::ContractDeployer::new(deployer);
            Ok(deployer)
        }
        #[doc = "Calls the contract's `WETH` (0xad5c4648) function"]
        pub fn weth(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([173, 92, 70, 72], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `_wallets` (0xf1bc8210) function"]
        pub fn wallets(
            &self,
            p0: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([241, 188, 130, 16], p0)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `admin` (0xf851a440) function"]
        pub fn admin(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([248, 81, 164, 64], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `auctionFinalize` (0xdc16bd43) function"]
        pub fn auction_finalize(
            &self,
            token_id: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([220, 22, 189, 67], token_id)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `auctions` (0x571a26a0) function"]
        pub fn auctions(
            &self,
            p0: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<
            M,
            (
                ethers::core::types::Address,
                ethers::core::types::U256,
                ethers::core::types::Address,
                ethers::core::types::U256,
                bool,
                ethers::core::types::U256,
            ),
        > {
            self.0
                .method_hash([87, 26, 38, 160], p0)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `bid` (0x598647f8) function"]
        pub fn bid(
            &self,
            token_id: ethers::core::types::U256,
            rio_amount: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([89, 134, 71, 248], (token_id, rio_amount))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `buy` (0xd6febde8) function"]
        pub fn buy(
            &self,
            token_id: ethers::core::types::U256,
            rio_amount: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([214, 254, 189, 232], (token_id, rio_amount))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `buyFromBank` (0x7322e3bd) function"]
        pub fn buy_from_bank(
            &self,
            token_id: ethers::core::types::U256,
            rio_amount: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([115, 34, 227, 189], (token_id, rio_amount))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `createAuction` (0xb1cb48ef) function"]
        pub fn create_auction(
            &self,
            token_id: ethers::core::types::U256,
            closing_time: ethers::core::types::U256,
            beneficiary: ethers::core::types::Address,
            reserve_price: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash(
                    [177, 203, 72, 239],
                    (token_id, closing_time, beneficiary, reserve_price),
                )
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `getPrice` (0xe7572230) function"]
        pub fn get_price(
            &self,
            token_id: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<
            M,
            (
                ethers::core::types::U256,
                ethers::core::types::U256,
                ethers::core::types::U256,
            ),
        > {
            self.0
                .method_hash([231, 87, 34, 48], token_id)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `landBank` (0xefd32973) function"]
        pub fn land_bank(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([239, 211, 41, 115], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `landNFT` (0x39d022e1) function"]
        pub fn land_nft(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([57, 208, 34, 225], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `sell` (0xd04c6983) function"]
        pub fn sell(
            &self,
            token_id: ethers::core::types::U256,
            price: ethers::core::types::U256,
            wallet: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([208, 76, 105, 131], (token_id, price, wallet))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `sellBidPrice` (0x172b099d) function"]
        pub fn sell_bid_price(
            &self,
            p0: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([23, 43, 9, 157], p0)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `sellToBank` (0xec58c097) function"]
        pub fn sell_to_bank(
            &self,
            token_id: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([236, 88, 192, 151], token_id)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `setLandBank` (0xf0640d95) function"]
        pub fn set_land_bank(
            &self,
            land_bank: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([240, 100, 13, 149], land_bank)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `soldFor` (0xa36b1462) function"]
        pub fn sold_for(
            &self,
            p0: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([163, 107, 20, 98], p0)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `withdrawAuction` (0xb5fc9833) function"]
        pub fn withdraw_auction(
            &self,
            token_id: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([181, 252, 152, 51], token_id)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `withdrawFromLandBank` (0x12151e3a) function"]
        pub fn withdraw_from_land_bank(
            &self,
            beneficiary: ethers::core::types::Address,
            amount: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([18, 21, 30, 58], (beneficiary, amount))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Gets the contract's `AuctionEnded` event"]
        pub fn auction_ended_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, AuctionEndedFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `HighestBidIncreased` event"]
        pub fn highest_bid_increased_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, HighestBidIncreasedFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `Refund` event"]
        pub fn refund_filter(&self) -> ethers::contract::builders::Event<M, RefundFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `Sale` event"]
        pub fn sale_filter(&self) -> ethers::contract::builders::Event<M, SaleFilter> {
            self.0.event()
        }
        #[doc = r" Returns an [`Event`](#ethers_contract::builders::Event) builder for all events of this contract"]
        pub fn events(&self) -> ethers::contract::builders::Event<M, MarketplaceEvents> {
            self.0.event_with_filter(Default::default())
        }
    }
    impl<M: ethers::providers::Middleware> From<ethers::contract::Contract<M>> for Marketplace<M> {
        fn from(contract: ethers::contract::Contract<M>) -> Self {
            Self(contract)
        }
    }
    #[doc = "Custom Error type `MarketPlaceCannotSetAddressZero` with signature `MarketPlaceCannotSetAddressZero()` and selector `[131, 200, 6, 213]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthError,
        ethers :: contract :: EthDisplay,
    )]
    #[etherror(
        name = "MarketPlaceCannotSetAddressZero",
        abi = "MarketPlaceCannotSetAddressZero()"
    )]
    pub struct MarketPlaceCannotSetAddressZero;
    #[doc = "Custom Error type `MarketPlaceNotAuthorized` with signature `MarketPlaceNotAuthorized()` and selector `[233, 15, 117, 63]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthError,
        ethers :: contract :: EthDisplay,
    )]
    #[etherror(name = "MarketPlaceNotAuthorized", abi = "MarketPlaceNotAuthorized()")]
    pub struct MarketPlaceNotAuthorized;
    #[derive(Debug, Clone, PartialEq, Eq, ethers :: contract :: EthAbiType)]
    pub enum MarketplaceErrors {
        MarketPlaceCannotSetAddressZero(MarketPlaceCannotSetAddressZero),
        MarketPlaceNotAuthorized(MarketPlaceNotAuthorized),
    }
    impl ethers::core::abi::AbiDecode for MarketplaceErrors {
        fn decode(
            data: impl AsRef<[u8]>,
        ) -> ::std::result::Result<Self, ethers::core::abi::AbiError> {
            if let Ok(decoded) =
                <MarketPlaceCannotSetAddressZero as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(MarketplaceErrors::MarketPlaceCannotSetAddressZero(decoded));
            }
            if let Ok(decoded) =
                <MarketPlaceNotAuthorized as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(MarketplaceErrors::MarketPlaceNotAuthorized(decoded));
            }
            Err(ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ethers::core::abi::AbiEncode for MarketplaceErrors {
        fn encode(self) -> Vec<u8> {
            match self {
                MarketplaceErrors::MarketPlaceCannotSetAddressZero(element) => element.encode(),
                MarketplaceErrors::MarketPlaceNotAuthorized(element) => element.encode(),
            }
        }
    }
    impl ::std::fmt::Display for MarketplaceErrors {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            match self {
                MarketplaceErrors::MarketPlaceCannotSetAddressZero(element) => element.fmt(f),
                MarketplaceErrors::MarketPlaceNotAuthorized(element) => element.fmt(f),
            }
        }
    }
    impl ::std::convert::From<MarketPlaceCannotSetAddressZero> for MarketplaceErrors {
        fn from(var: MarketPlaceCannotSetAddressZero) -> Self {
            MarketplaceErrors::MarketPlaceCannotSetAddressZero(var)
        }
    }
    impl ::std::convert::From<MarketPlaceNotAuthorized> for MarketplaceErrors {
        fn from(var: MarketPlaceNotAuthorized) -> Self {
            MarketplaceErrors::MarketPlaceNotAuthorized(var)
        }
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "AuctionEnded", abi = "AuctionEnded(address,uint256)")]
    pub struct AuctionEndedFilter {
        pub winner: ethers::core::types::Address,
        pub amount: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(
        name = "HighestBidIncreased",
        abi = "HighestBidIncreased(address,uint256,uint256)"
    )]
    pub struct HighestBidIncreasedFilter {
        #[ethevent(indexed)]
        pub bidder: ethers::core::types::Address,
        pub amount: ethers::core::types::U256,
        pub token_id: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "Refund", abi = "Refund(address,uint256)")]
    pub struct RefundFilter {
        pub bidder: ethers::core::types::Address,
        pub amount: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "Sale", abi = "Sale(uint256,address,address,uint256)")]
    pub struct SaleFilter {
        #[ethevent(indexed)]
        pub token_id: ethers::core::types::U256,
        #[ethevent(indexed)]
        pub from: ethers::core::types::Address,
        #[ethevent(indexed)]
        pub to: ethers::core::types::Address,
        pub value: ethers::core::types::U256,
    }
    #[derive(Debug, Clone, PartialEq, Eq, ethers :: contract :: EthAbiType)]
    pub enum MarketplaceEvents {
        AuctionEndedFilter(AuctionEndedFilter),
        HighestBidIncreasedFilter(HighestBidIncreasedFilter),
        RefundFilter(RefundFilter),
        SaleFilter(SaleFilter),
    }
    impl ethers::contract::EthLogDecode for MarketplaceEvents {
        fn decode_log(
            log: &ethers::core::abi::RawLog,
        ) -> ::std::result::Result<Self, ethers::core::abi::Error>
        where
            Self: Sized,
        {
            if let Ok(decoded) = AuctionEndedFilter::decode_log(log) {
                return Ok(MarketplaceEvents::AuctionEndedFilter(decoded));
            }
            if let Ok(decoded) = HighestBidIncreasedFilter::decode_log(log) {
                return Ok(MarketplaceEvents::HighestBidIncreasedFilter(decoded));
            }
            if let Ok(decoded) = RefundFilter::decode_log(log) {
                return Ok(MarketplaceEvents::RefundFilter(decoded));
            }
            if let Ok(decoded) = SaleFilter::decode_log(log) {
                return Ok(MarketplaceEvents::SaleFilter(decoded));
            }
            Err(ethers::core::abi::Error::InvalidData)
        }
    }
    impl ::std::fmt::Display for MarketplaceEvents {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            match self {
                MarketplaceEvents::AuctionEndedFilter(element) => element.fmt(f),
                MarketplaceEvents::HighestBidIncreasedFilter(element) => element.fmt(f),
                MarketplaceEvents::RefundFilter(element) => element.fmt(f),
                MarketplaceEvents::SaleFilter(element) => element.fmt(f),
            }
        }
    }
    #[doc = "Container type for all input parameters for the `WETH` function with signature `WETH()` and selector `[173, 92, 70, 72]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "WETH", abi = "WETH()")]
    pub struct WethCall;
    #[doc = "Container type for all input parameters for the `_wallets` function with signature `_wallets(uint256)` and selector `[241, 188, 130, 16]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "_wallets", abi = "_wallets(uint256)")]
    pub struct WalletsCall(pub ethers::core::types::U256);
    #[doc = "Container type for all input parameters for the `admin` function with signature `admin()` and selector `[248, 81, 164, 64]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "admin", abi = "admin()")]
    pub struct AdminCall;
    #[doc = "Container type for all input parameters for the `auctionFinalize` function with signature `auctionFinalize(uint256)` and selector `[220, 22, 189, 67]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "auctionFinalize", abi = "auctionFinalize(uint256)")]
    pub struct AuctionFinalizeCall {
        pub token_id: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `auctions` function with signature `auctions(uint256)` and selector `[87, 26, 38, 160]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "auctions", abi = "auctions(uint256)")]
    pub struct AuctionsCall(pub ethers::core::types::U256);
    #[doc = "Container type for all input parameters for the `bid` function with signature `bid(uint256,uint256)` and selector `[89, 134, 71, 248]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "bid", abi = "bid(uint256,uint256)")]
    pub struct BidCall {
        pub token_id: ethers::core::types::U256,
        pub rio_amount: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `buy` function with signature `buy(uint256,uint256)` and selector `[214, 254, 189, 232]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "buy", abi = "buy(uint256,uint256)")]
    pub struct BuyCall {
        pub token_id: ethers::core::types::U256,
        pub rio_amount: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `buyFromBank` function with signature `buyFromBank(uint256,uint256)` and selector `[115, 34, 227, 189]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "buyFromBank", abi = "buyFromBank(uint256,uint256)")]
    pub struct BuyFromBankCall {
        pub token_id: ethers::core::types::U256,
        pub rio_amount: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `createAuction` function with signature `createAuction(uint256,uint256,address,uint256)` and selector `[177, 203, 72, 239]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "createAuction",
        abi = "createAuction(uint256,uint256,address,uint256)"
    )]
    pub struct CreateAuctionCall {
        pub token_id: ethers::core::types::U256,
        pub closing_time: ethers::core::types::U256,
        pub beneficiary: ethers::core::types::Address,
        pub reserve_price: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `getPrice` function with signature `getPrice(uint256)` and selector `[231, 87, 34, 48]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "getPrice", abi = "getPrice(uint256)")]
    pub struct GetPriceCall {
        pub token_id: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `landBank` function with signature `landBank()` and selector `[239, 211, 41, 115]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "landBank", abi = "landBank()")]
    pub struct LandBankCall;
    #[doc = "Container type for all input parameters for the `landNFT` function with signature `landNFT()` and selector `[57, 208, 34, 225]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "landNFT", abi = "landNFT()")]
    pub struct LandNFTCall;
    #[doc = "Container type for all input parameters for the `sell` function with signature `sell(uint256,uint256,address)` and selector `[208, 76, 105, 131]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "sell", abi = "sell(uint256,uint256,address)")]
    pub struct SellCall {
        pub token_id: ethers::core::types::U256,
        pub price: ethers::core::types::U256,
        pub wallet: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `sellBidPrice` function with signature `sellBidPrice(uint256)` and selector `[23, 43, 9, 157]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "sellBidPrice", abi = "sellBidPrice(uint256)")]
    pub struct SellBidPriceCall(pub ethers::core::types::U256);
    #[doc = "Container type for all input parameters for the `sellToBank` function with signature `sellToBank(uint256)` and selector `[236, 88, 192, 151]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "sellToBank", abi = "sellToBank(uint256)")]
    pub struct SellToBankCall {
        pub token_id: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `setLandBank` function with signature `setLandBank(address)` and selector `[240, 100, 13, 149]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "setLandBank", abi = "setLandBank(address)")]
    pub struct SetLandBankCall {
        pub land_bank: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `soldFor` function with signature `soldFor(uint256)` and selector `[163, 107, 20, 98]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "soldFor", abi = "soldFor(uint256)")]
    pub struct SoldForCall(pub ethers::core::types::U256);
    #[doc = "Container type for all input parameters for the `withdrawAuction` function with signature `withdrawAuction(uint256)` and selector `[181, 252, 152, 51]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "withdrawAuction", abi = "withdrawAuction(uint256)")]
    pub struct WithdrawAuctionCall {
        pub token_id: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `withdrawFromLandBank` function with signature `withdrawFromLandBank(address,uint256)` and selector `[18, 21, 30, 58]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "withdrawFromLandBank",
        abi = "withdrawFromLandBank(address,uint256)"
    )]
    pub struct WithdrawFromLandBankCall {
        pub beneficiary: ethers::core::types::Address,
        pub amount: ethers::core::types::U256,
    }
    #[derive(Debug, Clone, PartialEq, Eq, ethers :: contract :: EthAbiType)]
    pub enum MarketplaceCalls {
        Weth(WethCall),
        Wallets(WalletsCall),
        Admin(AdminCall),
        AuctionFinalize(AuctionFinalizeCall),
        Auctions(AuctionsCall),
        Bid(BidCall),
        Buy(BuyCall),
        BuyFromBank(BuyFromBankCall),
        CreateAuction(CreateAuctionCall),
        GetPrice(GetPriceCall),
        LandBank(LandBankCall),
        LandNFT(LandNFTCall),
        Sell(SellCall),
        SellBidPrice(SellBidPriceCall),
        SellToBank(SellToBankCall),
        SetLandBank(SetLandBankCall),
        SoldFor(SoldForCall),
        WithdrawAuction(WithdrawAuctionCall),
        WithdrawFromLandBank(WithdrawFromLandBankCall),
    }
    impl ethers::core::abi::AbiDecode for MarketplaceCalls {
        fn decode(
            data: impl AsRef<[u8]>,
        ) -> ::std::result::Result<Self, ethers::core::abi::AbiError> {
            if let Ok(decoded) = <WethCall as ethers::core::abi::AbiDecode>::decode(data.as_ref()) {
                return Ok(MarketplaceCalls::Weth(decoded));
            }
            if let Ok(decoded) =
                <WalletsCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(MarketplaceCalls::Wallets(decoded));
            }
            if let Ok(decoded) = <AdminCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(MarketplaceCalls::Admin(decoded));
            }
            if let Ok(decoded) =
                <AuctionFinalizeCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(MarketplaceCalls::AuctionFinalize(decoded));
            }
            if let Ok(decoded) =
                <AuctionsCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(MarketplaceCalls::Auctions(decoded));
            }
            if let Ok(decoded) = <BidCall as ethers::core::abi::AbiDecode>::decode(data.as_ref()) {
                return Ok(MarketplaceCalls::Bid(decoded));
            }
            if let Ok(decoded) = <BuyCall as ethers::core::abi::AbiDecode>::decode(data.as_ref()) {
                return Ok(MarketplaceCalls::Buy(decoded));
            }
            if let Ok(decoded) =
                <BuyFromBankCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(MarketplaceCalls::BuyFromBank(decoded));
            }
            if let Ok(decoded) =
                <CreateAuctionCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(MarketplaceCalls::CreateAuction(decoded));
            }
            if let Ok(decoded) =
                <GetPriceCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(MarketplaceCalls::GetPrice(decoded));
            }
            if let Ok(decoded) =
                <LandBankCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(MarketplaceCalls::LandBank(decoded));
            }
            if let Ok(decoded) =
                <LandNFTCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(MarketplaceCalls::LandNFT(decoded));
            }
            if let Ok(decoded) = <SellCall as ethers::core::abi::AbiDecode>::decode(data.as_ref()) {
                return Ok(MarketplaceCalls::Sell(decoded));
            }
            if let Ok(decoded) =
                <SellBidPriceCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(MarketplaceCalls::SellBidPrice(decoded));
            }
            if let Ok(decoded) =
                <SellToBankCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(MarketplaceCalls::SellToBank(decoded));
            }
            if let Ok(decoded) =
                <SetLandBankCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(MarketplaceCalls::SetLandBank(decoded));
            }
            if let Ok(decoded) =
                <SoldForCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(MarketplaceCalls::SoldFor(decoded));
            }
            if let Ok(decoded) =
                <WithdrawAuctionCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(MarketplaceCalls::WithdrawAuction(decoded));
            }
            if let Ok(decoded) =
                <WithdrawFromLandBankCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(MarketplaceCalls::WithdrawFromLandBank(decoded));
            }
            Err(ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ethers::core::abi::AbiEncode for MarketplaceCalls {
        fn encode(self) -> Vec<u8> {
            match self {
                MarketplaceCalls::Weth(element) => element.encode(),
                MarketplaceCalls::Wallets(element) => element.encode(),
                MarketplaceCalls::Admin(element) => element.encode(),
                MarketplaceCalls::AuctionFinalize(element) => element.encode(),
                MarketplaceCalls::Auctions(element) => element.encode(),
                MarketplaceCalls::Bid(element) => element.encode(),
                MarketplaceCalls::Buy(element) => element.encode(),
                MarketplaceCalls::BuyFromBank(element) => element.encode(),
                MarketplaceCalls::CreateAuction(element) => element.encode(),
                MarketplaceCalls::GetPrice(element) => element.encode(),
                MarketplaceCalls::LandBank(element) => element.encode(),
                MarketplaceCalls::LandNFT(element) => element.encode(),
                MarketplaceCalls::Sell(element) => element.encode(),
                MarketplaceCalls::SellBidPrice(element) => element.encode(),
                MarketplaceCalls::SellToBank(element) => element.encode(),
                MarketplaceCalls::SetLandBank(element) => element.encode(),
                MarketplaceCalls::SoldFor(element) => element.encode(),
                MarketplaceCalls::WithdrawAuction(element) => element.encode(),
                MarketplaceCalls::WithdrawFromLandBank(element) => element.encode(),
            }
        }
    }
    impl ::std::fmt::Display for MarketplaceCalls {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            match self {
                MarketplaceCalls::Weth(element) => element.fmt(f),
                MarketplaceCalls::Wallets(element) => element.fmt(f),
                MarketplaceCalls::Admin(element) => element.fmt(f),
                MarketplaceCalls::AuctionFinalize(element) => element.fmt(f),
                MarketplaceCalls::Auctions(element) => element.fmt(f),
                MarketplaceCalls::Bid(element) => element.fmt(f),
                MarketplaceCalls::Buy(element) => element.fmt(f),
                MarketplaceCalls::BuyFromBank(element) => element.fmt(f),
                MarketplaceCalls::CreateAuction(element) => element.fmt(f),
                MarketplaceCalls::GetPrice(element) => element.fmt(f),
                MarketplaceCalls::LandBank(element) => element.fmt(f),
                MarketplaceCalls::LandNFT(element) => element.fmt(f),
                MarketplaceCalls::Sell(element) => element.fmt(f),
                MarketplaceCalls::SellBidPrice(element) => element.fmt(f),
                MarketplaceCalls::SellToBank(element) => element.fmt(f),
                MarketplaceCalls::SetLandBank(element) => element.fmt(f),
                MarketplaceCalls::SoldFor(element) => element.fmt(f),
                MarketplaceCalls::WithdrawAuction(element) => element.fmt(f),
                MarketplaceCalls::WithdrawFromLandBank(element) => element.fmt(f),
            }
        }
    }
    impl ::std::convert::From<WethCall> for MarketplaceCalls {
        fn from(var: WethCall) -> Self {
            MarketplaceCalls::Weth(var)
        }
    }
    impl ::std::convert::From<WalletsCall> for MarketplaceCalls {
        fn from(var: WalletsCall) -> Self {
            MarketplaceCalls::Wallets(var)
        }
    }
    impl ::std::convert::From<AdminCall> for MarketplaceCalls {
        fn from(var: AdminCall) -> Self {
            MarketplaceCalls::Admin(var)
        }
    }
    impl ::std::convert::From<AuctionFinalizeCall> for MarketplaceCalls {
        fn from(var: AuctionFinalizeCall) -> Self {
            MarketplaceCalls::AuctionFinalize(var)
        }
    }
    impl ::std::convert::From<AuctionsCall> for MarketplaceCalls {
        fn from(var: AuctionsCall) -> Self {
            MarketplaceCalls::Auctions(var)
        }
    }
    impl ::std::convert::From<BidCall> for MarketplaceCalls {
        fn from(var: BidCall) -> Self {
            MarketplaceCalls::Bid(var)
        }
    }
    impl ::std::convert::From<BuyCall> for MarketplaceCalls {
        fn from(var: BuyCall) -> Self {
            MarketplaceCalls::Buy(var)
        }
    }
    impl ::std::convert::From<BuyFromBankCall> for MarketplaceCalls {
        fn from(var: BuyFromBankCall) -> Self {
            MarketplaceCalls::BuyFromBank(var)
        }
    }
    impl ::std::convert::From<CreateAuctionCall> for MarketplaceCalls {
        fn from(var: CreateAuctionCall) -> Self {
            MarketplaceCalls::CreateAuction(var)
        }
    }
    impl ::std::convert::From<GetPriceCall> for MarketplaceCalls {
        fn from(var: GetPriceCall) -> Self {
            MarketplaceCalls::GetPrice(var)
        }
    }
    impl ::std::convert::From<LandBankCall> for MarketplaceCalls {
        fn from(var: LandBankCall) -> Self {
            MarketplaceCalls::LandBank(var)
        }
    }
    impl ::std::convert::From<LandNFTCall> for MarketplaceCalls {
        fn from(var: LandNFTCall) -> Self {
            MarketplaceCalls::LandNFT(var)
        }
    }
    impl ::std::convert::From<SellCall> for MarketplaceCalls {
        fn from(var: SellCall) -> Self {
            MarketplaceCalls::Sell(var)
        }
    }
    impl ::std::convert::From<SellBidPriceCall> for MarketplaceCalls {
        fn from(var: SellBidPriceCall) -> Self {
            MarketplaceCalls::SellBidPrice(var)
        }
    }
    impl ::std::convert::From<SellToBankCall> for MarketplaceCalls {
        fn from(var: SellToBankCall) -> Self {
            MarketplaceCalls::SellToBank(var)
        }
    }
    impl ::std::convert::From<SetLandBankCall> for MarketplaceCalls {
        fn from(var: SetLandBankCall) -> Self {
            MarketplaceCalls::SetLandBank(var)
        }
    }
    impl ::std::convert::From<SoldForCall> for MarketplaceCalls {
        fn from(var: SoldForCall) -> Self {
            MarketplaceCalls::SoldFor(var)
        }
    }
    impl ::std::convert::From<WithdrawAuctionCall> for MarketplaceCalls {
        fn from(var: WithdrawAuctionCall) -> Self {
            MarketplaceCalls::WithdrawAuction(var)
        }
    }
    impl ::std::convert::From<WithdrawFromLandBankCall> for MarketplaceCalls {
        fn from(var: WithdrawFromLandBankCall) -> Self {
            MarketplaceCalls::WithdrawFromLandBank(var)
        }
    }
    #[doc = "Container type for all return fields from the `WETH` function with signature `WETH()` and selector `[173, 92, 70, 72]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct WethReturn(pub ethers::core::types::Address);
    #[doc = "Container type for all return fields from the `_wallets` function with signature `_wallets(uint256)` and selector `[241, 188, 130, 16]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct WalletsReturn(pub ethers::core::types::Address);
    #[doc = "Container type for all return fields from the `admin` function with signature `admin()` and selector `[248, 81, 164, 64]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct AdminReturn(pub ethers::core::types::Address);
    #[doc = "Container type for all return fields from the `auctions` function with signature `auctions(uint256)` and selector `[87, 26, 38, 160]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct AuctionsReturn {
        pub beneficiary: ethers::core::types::Address,
        pub auction_end: ethers::core::types::U256,
        pub highest_bidder: ethers::core::types::Address,
        pub highest_bid: ethers::core::types::U256,
        pub open: bool,
        pub reserve: ethers::core::types::U256,
    }
    #[doc = "Container type for all return fields from the `getPrice` function with signature `getPrice(uint256)` and selector `[231, 87, 34, 48]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct GetPriceReturn(
        pub ethers::core::types::U256,
        pub ethers::core::types::U256,
        pub ethers::core::types::U256,
    );
    #[doc = "Container type for all return fields from the `landBank` function with signature `landBank()` and selector `[239, 211, 41, 115]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct LandBankReturn(pub ethers::core::types::Address);
    #[doc = "Container type for all return fields from the `landNFT` function with signature `landNFT()` and selector `[57, 208, 34, 225]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct LandNFTReturn(pub ethers::core::types::Address);
    #[doc = "Container type for all return fields from the `sellBidPrice` function with signature `sellBidPrice(uint256)` and selector `[23, 43, 9, 157]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct SellBidPriceReturn(pub ethers::core::types::U256);
    #[doc = "Container type for all return fields from the `soldFor` function with signature `soldFor(uint256)` and selector `[163, 107, 20, 98]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct SoldForReturn(pub ethers::core::types::U256);
}
